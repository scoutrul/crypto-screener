const CoinRepository = require('../../domain/repositories/CoinRepository');
const NotificationService = require('../services/NotificationService');

/**
 * –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π Use Case –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
 */
class FilterCoinsByMarketCapCompactUseCase {
  constructor(coinRepository, notificationService) {
    this.coinRepository = coinRepository;
    this.notificationService = notificationService;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –º–æ–Ω–µ—Ç –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @param {number} params.totalLimit - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
   * @param {number} params.minMarketCapBTC - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤ BTC (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 40)
   * @param {string} params.currency - –í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'btc')
   * @returns {Promise<void>}
   */
  async execute(params = {}) {
    const {
      totalLimit = 100,
      minMarketCapBTC = 40,
      currency = 'btc',
      maxResults = null
    } = params;

    try {
      console.log(`=== –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ >= ${minMarketCapBTC} BTC ===`);
      console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: totalLimit=${totalLimit}, minMarketCapBTC=${minMarketCapBTC}, currency=${currency}, maxResults=${maxResults || '–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      const isCoinGeckoAvailable = await this.coinRepository.isAvailable();
      if (!isCoinGeckoAvailable) {
        throw new Error('CoinGecko API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const isNotificationAvailable = await this.notificationService.isAvailable();
      if (!isNotificationAvailable) {
        throw new Error('–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –º–æ–Ω–µ—Ç
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-${totalLimit} –º–æ–Ω–µ—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏...`);
      const allCoins = await this.coinRepository.getTopCoinsByMarketCap(totalLimit, currency);
      
      if (!allCoins || allCoins.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö');
      }

      console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${allCoins.length} –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);

      // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞ 24 —á–∞—Å–∞ –∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
      console.log(`–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∑–∞ 24—á >= ${minMarketCapBTC} BTC (–∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã)...`);
      
      // –°–Ω–∞—á–∞–ª–∞ –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
      const nonStablecoins = allCoins.filter(coin => !this.isStablecoin(coin));
      console.log(`–ò—Å–∫–ª—é—á–µ–Ω–æ ${allCoins.length - nonStablecoins.length} —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤`);
      
      // –ó–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
      const filteredCoins = nonStablecoins.filter(coin => {
        try {
          const marketCap24h = coin.getMarketCap24h();
          return marketCap24h && marketCap24h.getValue() >= minMarketCapBTC;
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞ 24—á –¥–ª—è ${coin.getSymbol()}:`, error.message);
          return false;
        }
      });

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${filteredCoins.length} –º–æ–Ω–µ—Ç —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∑–∞ 24—á >= ${minMarketCapBTC} BTC (–±–µ–∑ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤)`);

      // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      let finalCoins = filteredCoins;
      if (maxResults && filteredCoins.length > maxResults) {
        finalCoins = filteredCoins.slice(0, maxResults);
        console.log(`–û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ —Ç–æ–ø-${maxResults} –º–æ–Ω–µ—Ç –∏–∑ ${filteredCoins.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö`);
      }

      if (finalCoins.length === 0) {
        await this.notificationService.sendNotification(
          '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
          `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∑–∞ 24—á >= ${minMarketCapBTC} BTC —Å—Ä–µ–¥–∏ —Ç–æ–ø-${totalLimit} –º–æ–Ω–µ—Ç (–∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã).`,
          'info'
        );
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      await this.sendCompactResults(finalCoins, allCoins.length, minMarketCapBTC);

      console.log('‚úÖ –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç:', error.message);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      try {
        await this.notificationService.sendErrorNotification(error, 'FilterCoinsByMarketCapCompactUseCase');
      } catch (sendError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError.message);
      }
      
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–Ω–µ—Ç–∞ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–º
   * @param {Coin} coin - –ú–æ–Ω–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {boolean} - true –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω
   */
  isStablecoin(coin) {
    const symbol = coin.getSymbol()?.toUpperCase() || '';
    const name = coin.getName()?.toUpperCase() || '';
    
    // –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤
    const stablecoinKeywords = [
      'USD', 'EUR', 'GBP', 'JPY', 'CNY', 'KRW', 'CAD', 'AUD', 'CHF', 'SGD',
      'USDT', 'USDC', 'BUSD', 'DAI', 'TUSD', 'FRAX', 'USDP', 'USDD', 'GUSD',
      'USDK', 'USDN', 'USDJ', 'USDK', 'USDN', 'USDJ', 'USDK', 'USDN', 'USDJ'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    return stablecoinKeywords.some(keyword => 
      symbol.includes(keyword) || name.includes(keyword)
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
   * @param {Array<Coin>} filteredCoins - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
   * @param {number} totalAnalyzed - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
   * @param {number} minMarketCapBTC - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
   */
  async sendCompactResults(filteredCoins, totalAnalyzed, minMarketCapBTC) {
    // –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
    const coinList = filteredCoins.map((coin, index) => {
      const rank = index + 1;
      const symbol = coin.getSymbol() || 'N/A';
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      let marketCap24h = 0;
      let price = 0;
      let change24h = 0;
      
      try {
        const marketCap24hObj = coin.getMarketCap24h();
        marketCap24h = marketCap24hObj ? marketCap24hObj.getValue() : 0;
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞ 24—á –¥–ª—è ${symbol}:`, error.message);
      }
      
      try {
        const priceObj = coin.getCurrentPrice();
        price = priceObj ? priceObj.getValue() : 0;
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${symbol}:`, error.message);
      }
      
      try {
        const changeObj = coin.getPriceChangePercentage24h();
        change24h = changeObj ? changeObj.getValue() : 0;
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${symbol}:`, error.message);
      }
      
      // –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
      let priceFormatted;
      if (price >= 1) {
        priceFormatted = `$${price.toFixed(2)}`;
      } else if (price >= 0.01) {
        priceFormatted = `$${price.toFixed(4)}`;
      } else {
        priceFormatted = `$${price.toFixed(6)}`;
      }
      
      // –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
      const changeEmoji = change24h > 0 ? 'üìà' : change24h < 0 ? 'üìâ' : '‚û°Ô∏è';
      const changeSign = change24h > 0 ? '+' : '';
      
      // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –†–∞–Ω–≥. –°–∏–º–≤–æ–ª –≠–º–æ–¥–∑–∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ% | –¶–µ–Ω–∞ | –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞ 24—á BTC
      return `${rank.toString().padStart(2)}.${symbol.padEnd(6)}${changeEmoji}${changeSign}${change24h.toFixed(1)}%|${priceFormatted}|${marketCap24h.toFixed(1)}BTC(24h)`;
    });

    // –†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 50 –º–æ–Ω–µ—Ç (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ 400)
    const chunks = [];
    for (let i = 0; i < coinList.length; i += 50) {
      chunks.push(coinList.slice(i, i + 50));
    }

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      const partNumber = i + 1;
      const totalParts = chunks.length;
      
      const message = `üìä **–ú–û–ù–ï–¢–´ –ó–ê 24–ß >= ${minMarketCapBTC} BTC** (${partNumber}/${totalParts})
üö´ **–ò—Å–∫–ª—é—á–µ–Ω—ã —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã**

${chunk.join('\n')}

üïê ${new Date().toLocaleString('ru-RU')}`;

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageLength = message.length;
      console.log(`üìè –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageLength} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      if (messageLength > 4000) {
        console.warn(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (${messageLength} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º...`);
        const maxLength = 4000;
        const header = `üìä **–ú–û–ù–ï–¢–´ –ó–ê 24–ß >= ${minMarketCapBTC} BTC** (${partNumber}/${totalParts})\n\n`;
        const footer = `\n\nüïê ${new Date().toLocaleString('ru-RU')}`;
        const availableLength = maxLength - header.length - footer.length;
        
        const truncatedChunk = chunk.slice(0, Math.floor(availableLength / 50)); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        const truncatedMessage = header + truncatedChunk.join('\n') + footer;
        console.log(`üìè –û–±—Ä–µ–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${truncatedMessage.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ ${partNumber}/${totalParts}...`);
        await this.sendWithRetry(
          `–ú–æ–Ω–µ—Ç—ã –∑–∞ 24—á >= ${minMarketCapBTC} BTC (${partNumber}/${totalParts})`,
          truncatedMessage,
          'info',
          partNumber,
          totalParts
        );
      } else {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —á–∞—Å—Ç–∏ ${partNumber}/${totalParts}...`);
        await this.sendWithRetry(
          `–ú–æ–Ω–µ—Ç—ã –∑–∞ 24—á >= ${minMarketCapBTC} BTC (${partNumber}/${totalParts})`,
          message,
          'info',
          partNumber,
          totalParts
        );
      }
      
      // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
      if (i < chunks.length - 1) {
        console.log(`‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç—å—é...`);
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const risingCoins = filteredCoins.filter(coin => {
      try {
        return coin.isPriceRising24h();
      } catch (error) {
        return false;
      }
    }).length;
    
    const fallingCoins = filteredCoins.filter(coin => {
      try {
        return coin.isPriceFalling24h();
      } catch (error) {
        return false;
      }
    }).length;
    
    const stableCoins = filteredCoins.length - risingCoins - fallingCoins;
    
    const totalMarketCap24h = filteredCoins.reduce((sum, coin) => {
      try {
        const marketCap24h = coin.getMarketCap24h();
        return sum + (marketCap24h ? marketCap24h.getValue() : 0);
      } catch (error) {
        return sum;
      }
    }, 0);
    
    const statsMessage = `üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 24–ß >= ${minMarketCapBTC} BTC**
üö´ **–ò—Å–∫–ª—é—á–µ–Ω—ã —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã**

üìä –ù–∞–π–¥–µ–Ω–æ: ${filteredCoins.length} –∏–∑ ${totalAnalyzed}
üí∞ –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞ 24—á: ${totalMarketCap24h.toFixed(2)} BTC

üìà –†–∞—Å—Ç—É—â–∏—Ö: ${risingCoins} (${(risingCoins/filteredCoins.length*100).toFixed(1)}%)
üìâ –ü–∞–¥–∞—é—â–∏—Ö: ${fallingCoins} (${(fallingCoins/filteredCoins.length*100).toFixed(1)}%)
‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã—Ö: ${stableCoins} (${(stableCoins/filteredCoins.length*100).toFixed(1)}%)

üîó CoinGecko API`;

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    await this.sendWithRetry(
      `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24—á >= ${minMarketCapBTC} BTC`,
      statsMessage,
      'info',
      'stats',
      'stats'
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ rate limit
   * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string|number} partNumber - –ù–æ–º–µ—Ä —á–∞—Å—Ç–∏
   * @param {string|number} totalParts - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
   */
  async sendWithRetry(title, message, type, partNumber, totalParts) {
    const maxRetries = 5;
    const baseDelay = 10000; // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        await this.notificationService.sendNotification(title, message, type);
        console.log(`‚úÖ –ß–∞—Å—Ç—å ${partNumber}/${totalParts} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        return;
      } catch (error) {
        const isRateLimit = error.message && error.message.includes('429');
        
        if (isRateLimit && attempt < maxRetries) {
          const delay = baseDelay * attempt; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          console.log(`‚ö†Ô∏è Rate limit (429) –¥–ª—è —á–∞—Å—Ç–∏ ${partNumber}/${totalParts}. –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`);
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay/1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        } else {
          console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å ${partNumber}/${totalParts} –ø–æ—Å–ª–µ ${attempt} –ø–æ–ø—ã—Ç–æ–∫:`, error.message);
          throw error;
        }
      }
    }
  }
}

module.exports = FilterCoinsByMarketCapCompactUseCase; 