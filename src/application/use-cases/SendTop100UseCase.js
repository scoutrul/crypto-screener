const CoinRepository = require('../../domain/repositories/CoinRepository');
const NotificationService = require('../services/NotificationService');

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Use Case –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ø-100 –º–æ–Ω–µ—Ç
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ API –≤–º–µ—Å—Ç–æ —á–µ—Ç—ã—Ä–µ—Ö
 */
class SendTop100UseCase {
  constructor(coinRepository, notificationService) {
    this.coinRepository = coinRepository;
    this.notificationService = notificationService;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–ø-100 –º–æ–Ω–µ—Ç
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @param {number} params.limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
   * @param {string} params.currency - –í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'btc')
   * @returns {Promise<void>}
   */
  async execute(params = {}) {
    const {
      limit = 100,
      currency = 'btc'
    } = params;

    try {
      console.log(`=== –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ø-${limit} –º–æ–Ω–µ—Ç (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ) ===`);
      console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: limit=${limit}, currency=${currency}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      const isCoinGeckoAvailable = await this.coinRepository.isAvailable();
      if (!isCoinGeckoAvailable) {
        throw new Error('CoinGecko API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const isNotificationAvailable = await this.notificationService.isAvailable();
      if (!isNotificationAvailable) {
        throw new Error('–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-${limit} –º–æ–Ω–µ—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (1 –∑–∞–ø—Ä–æ—Å)...`);
      const coins = await this.coinRepository.getTopCoinsByMarketCap(limit, currency);
      
      if (!coins || coins.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö');
      }

      console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${coins.length} –º–æ–Ω–µ—Ç (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)`);

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É
      console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ —Ç–æ–ø-${limit} –º–æ–Ω–µ—Ç...`);
      await this.notificationService.sendMarketSummary(coins, limit);

      console.log('‚úÖ –¢–æ–ø-100 –º–æ–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–ø-100 –º–æ–Ω–µ—Ç:', error.message);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      try {
        await this.notificationService.sendErrorNotification(error, 'SendTop100UseCase');
      } catch (sendError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError.message);
      }
      
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–ø-100 –º–æ–Ω–µ—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @returns {Promise<void>}
   */
  async executeSimpleFormat(params = {}) {
    const {
      limit = 100,
      currency = 'btc'
    } = params;

    try {
      console.log(`=== –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ø-${limit} –º–æ–Ω–µ—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ===`);
      
      // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-${limit} –º–æ–Ω–µ—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (1 –∑–∞–ø—Ä–æ—Å)...`);
      const coins = await this.coinRepository.getTopCoinsByMarketCap(limit, currency);
      
      if (!coins || coins.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö');
      }

      console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${coins.length} –º–æ–Ω–µ—Ç (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)`);

      // –°–æ–∑–¥–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      const simpleList = coins.map((coin, index) => {
        const rank = index + 1;
        const symbol = coin.getSymbol() || 'N/A';
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        let price = 0;
        try {
          const currentPrice = coin.getCurrentPrice();
          price = currentPrice ? currentPrice.getValue() : 0;
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${symbol}:`, error.message);
          price = 0;
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        let change24h = 0;
        try {
          const priceChange = coin.getPriceChangePercentage24h();
          change24h = priceChange ? priceChange.getValue() : 0;
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${symbol}:`, error.message);
          change24h = 0;
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ–ª–∏—á–∏–Ω—ã
        let priceFormatted;
        if (price >= 1) {
          priceFormatted = `$${price.toFixed(2)}`;
        } else if (price >= 0.01) {
          priceFormatted = `$${price.toFixed(4)}`;
        } else {
          priceFormatted = `$${price.toFixed(6)}`;
        }
        
        // –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        const changeEmoji = change24h > 0 ? 'üìà' : change24h < 0 ? 'üìâ' : '‚û°Ô∏è';
        const changeSign = change24h > 0 ? '+' : '';
        
        return `${rank.toString().padStart(2)}. ${symbol.padEnd(8)} ${changeEmoji} ${changeSign}${change24h.toFixed(2)}% | ${priceFormatted}`;
      });

      // –†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 20 –º–æ–Ω–µ—Ç
      const chunks = [];
      for (let i = 0; i < simpleList.length; i += 20) {
        chunks.push(simpleList.slice(i, i + 20));
      }

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
      for (let i = 0; i < chunks.length; i++) {
        const chunk = chunks[i];
        const partNumber = i + 1;
        const totalParts = chunks.length;
        
        const message = `üìä **–¢–û–ü-${limit} –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ –ü–û –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–ò** (—á–∞—Å—Ç—å ${partNumber}/${totalParts})

${chunk.join('\n')}

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ ${partNumber}/${totalParts}...`);
        await this.notificationService.sendNotification(
          `–¢–æ–ø-${limit} –º–æ–Ω–µ—Ç (—á–∞—Å—Ç—å ${partNumber}/${totalParts})`,
          message,
          'info'
        );
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if (i < chunks.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const risingCoins = coins.filter(coin => {
        try {
          return coin.isPriceRising24h();
        } catch (error) {
          return false;
        }
      }).length;
      
      const fallingCoins = coins.filter(coin => {
        try {
          return coin.isPriceFalling24h();
        } catch (error) {
          return false;
        }
      }).length;
      
      const stableCoins = coins.length - risingCoins - fallingCoins;
      
      const statsMessage = `üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–ü-${limit} –ú–û–ù–ï–¢**

üìà –†–∞—Å—Ç—É—â–∏—Ö: ${risingCoins} (${(risingCoins/coins.length*100).toFixed(1)}%)
üìâ –ü–∞–¥–∞—é—â–∏—Ö: ${fallingCoins} (${(fallingCoins/coins.length*100).toFixed(1)}%)
‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã—Ö: ${stableCoins} (${(stableCoins/coins.length*100).toFixed(1)}%)

üîó –î–∞–Ω–Ω—ã–µ: CoinGecko API (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)`;

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
      await this.notificationService.sendNotification(
        `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ø-${limit} –º–æ–Ω–µ—Ç`,
        statsMessage,
        'info'
      );

      console.log('‚úÖ –¢–æ–ø-100 –º–æ–Ω–µ—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–ø-100 –º–æ–Ω–µ—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:', error.message);
      throw error;
    }
  }
}

module.exports = SendTop100UseCase; 