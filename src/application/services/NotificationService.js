const NotificationRepository = require('../../domain/repositories/NotificationRepository');
const MarketAnalysisService = require('../../domain/services/MarketAnalysisService');

/**
 * –°–µ—Ä–≤–∏—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
class NotificationService {
  constructor(notificationRepository, marketAnalysisService) {
    this.notificationRepository = notificationRepository;
    this.marketAnalysisService = marketAnalysisService;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É —Ä—ã–Ω–∫–∞
   * @param {Array<Coin>} coins - –ú–∞—Å—Å–∏–≤ –º–æ–Ω–µ—Ç
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  async sendMarketSummary(coins, limit = 20) {
    try {
      console.log(`Preparing market summary for ${coins.length} coins, showing top ${limit}...`);
      
      // –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Ä—ã–Ω–∫–∞
      const summary = this.marketAnalysisService.getMarketSummary(coins, limit);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
      await this.notificationRepository.sendMarketSummary(coins, limit);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (process.env.NODE_ENV === 'development') {
        await this.notificationRepository.sendConsoleMessage(
          `Market Summary sent: ${summary.stats.totalCoins} coins, ${summary.stats.risingCoins} rising, ${summary.stats.fallingCoins} falling`,
          'log'
        );
      }
      
      console.log('Market summary sent successfully');
      
    } catch (error) {
      console.error('Error sending market summary:', error.message);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ–± –∞–Ω–æ–º–∞–ª–∏–∏
   * @param {Object} signal - –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
   * @returns {Promise<void>}
   */
  async sendAnomalySignal(signal) {
    try {
      console.log(`Sending anomaly signal for ${signal.coin}...`);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
      await this.notificationRepository.sendAnomalySignal(signal);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (process.env.NODE_ENV === 'development') {
        await this.notificationRepository.sendConsoleMessage(
          `Anomaly signal sent: ${signal.coin} - ${signal.type} (${signal.severity} severity)`,
          'warn'
        );
      }
      
      console.log('Anomaly signal sent successfully');
      
    } catch (error) {
      console.error('Error sending anomaly signal:', error.message);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  async sendNotification(title, message, type = 'info') {
    try {
      console.log(`Sending notification: ${title}...`);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
      await this.notificationRepository.sendNotification(title, message, type);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (process.env.NODE_ENV === 'development') {
        await this.notificationRepository.sendConsoleMessage(
          `Notification sent: ${title} - ${message}`,
          type === 'error' ? 'error' : 'log'
        );
      }
      
      console.log('Notification sent successfully');
      
    } catch (error) {
      console.error('Error sending notification:', error.message);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
   * @param {Object} trade - –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
   * @returns {Promise<void>}
   */
  async sendNewTradeNotification(trade) {
    try {
      console.log(`Sending new trade notification for ${trade.symbol}...`);
      
      const message = this.buildNewTradeMessage(trade);
      await this.notificationRepository.sendTelegramMessage(message, { parseMode: 'HTML' });
      
      console.log('New trade notification sent successfully');
      
    } catch (error) {
      console.error('Error sending new trade notification:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
   * @param {Object} trade - –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  buildNewTradeMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const emoji = trade.type === 'Long' ? 'üü¢' : 'üî¥';
    const stopLoss = trade.stopLoss;
    const takeProfit = trade.takeProfit;

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
    const tradeTime = new Date(trade.entryTime).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    let message = `üéØ <b>–ù–û–í–ê–Ø –°–î–ï–õ–ö–ê: ${symbol} ‚Üí ${trade.type} ${emoji}</b>\n\n`;
    
    if (trade.anomalyId) {
      message += `üÜî <b>ID:</b> ${trade.anomalyId}\n`;
    }
    
    message += `üïê <b>–í—Ä–µ–º—è:</b> ${tradeTime}\n\n`;
    message += `üí∞ <b>–í—Ö–æ–¥:</b> $${trade.entryPrice.toFixed(6)}\n`;
    message += `üõë <b>–°—Ç–æ–ø:</b> $${stopLoss.toFixed(6)}\n`;
    message += `üéØ <b>–¢–µ–π–∫:</b> $${takeProfit.toFixed(6)} (0% –ø—Ä–æ–≥—Ä–µ—Å—Å)\n`;
    
    if (trade.virtualAmount) {
      message += `üíµ <b>–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> $${trade.virtualAmount}\n`;
    }
    
    if (trade.volumeIncrease) {
      message += `üìä <b>–û–±—ä–µ–º:</b> ${trade.volumeIncrease.toFixed(1)}x\n`;
    }
    
    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns {Promise<void>}
   */
  async sendConsoleMessage(message, level = 'log') {
    try {
      await this.notificationRepository.sendConsoleMessage(message, level);
    } catch (error) {
      console.error('Error sending console message:', error.message);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {Promise<void>}
   */
  async sendTestMessage() {
    try {
      console.log('Sending test message...');
      
      await this.sendNotification(
        '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Crypto Screener. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.',
        'info'
      );
      
      console.log('Test message sent successfully');
      
    } catch (error) {
      console.error('Error sending test message:', error.message);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã
   * @returns {Promise<void>}
   */
  async sendStartupNotification() {
    try {
      const startupTime = new Date().toLocaleString('ru-RU');
      
      // –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –≤ Telegram
      // await this.sendNotification(
      //   '–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞',
      //   `Crypto Screener —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ ${startupTime}`,
      //   'success'
      // );
      
      console.log(`üöÄ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ ${startupTime} (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–æ)`);
      
    } catch (error) {
      console.error('Error sending startup notification:', error.message);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @param {Error} error - –û—à–∏–±–∫–∞
   * @param {string} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
   * @returns {Promise<void>}
   */
  async sendErrorNotification(error, context = 'Unknown') {
    try {
      await this.sendNotification(
        '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
        `–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context}\n–û—à–∏–±–∫–∞: ${error.message}\n–°—Ç–µ–∫: ${error.stack}`,
        'error'
      );
      
    } catch (sendError) {
      console.error('Error sending error notification:', sendError.message);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   * @returns {Promise<boolean>}
   */
  async isAvailable() {
    try {
      return await this.notificationRepository.isAvailable();
    } catch (error) {
      console.error('Error checking notification service availability:', error.message);
      return false;
    }
  }
}

module.exports = NotificationService; 