/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 */

const fs = require('fs').promises;
const path = require('path');

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
class VirtualTradingBaseService {
  constructor(config = {}) {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.config = {
      timeframe: '15m',
      volumeThreshold: 8, // –û–±—ä–µ–º –≤ 8 —Ä–∞–∑ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
      historicalWindow: 8, // 8 —Å–≤–µ—á–µ–π (2 —á–∞—Å–∞)
      consolidationThreshold: 0.015, // 1.5% –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
      priceThreshold: 0.005, // 0.5% –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      stopLossPercent: 0.005, // stop 0.5%
      takeProfitPercent: 0.025, // 2.5%
      entryLevelPercent: 0.004, // 0.4% –¥–ª—è —É—Ä–æ–≤–Ω—è –≤—Ö–æ–¥–∞
      cancelLevelPercent: 0.006, // 0.6% –¥–ª—è —É—Ä–æ–≤–Ω—è –æ—Ç–º–µ–Ω—ã
      anomalyCooldown: 4, // 4 TF (1 —á–∞—Å) –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
      entryConfirmationTFs: 6, // 6 TF –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (3 —á–∞—Å–∞)
      ...config
    };

    // –î–∞–Ω–Ω—ã–µ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º)
    this.filteredCoins = [];
    this.activeTrades = new Map(); // symbol -> trade object
    this.watchlist = new Set(); // —Å–∏–º–≤–æ–ª—ã –≤ watchlist
    this.anomalyCooldowns = new Map(); // symbol -> timestamp
    this.pendingAnomalies = new Map(); // symbol -> anomaly object
    this.tradeHistory = []; // –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
    this.tradingStatistics = null; // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏

    // –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.notificationService = null;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.systemStartTime = new Date();
    this.lastStatisticsUpdate = new Date();
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  setNotificationService(notificationService) {
    this.notificationService = notificationService;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async loadFilteredCoins() {
    try {
      let filename = path.join(__dirname, '..', '..', '..', 'data', 'binance-coins.json');
      let data;
      try {
        data = await fs.readFile(filename, 'utf8');
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç, —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –Ω–∞ Binance');
      } catch (error) {
        filename = path.join(__dirname, '..', '..', '..', 'data', 'filtered-coins.json');
        data = await fs.readFile(filename, 'utf8');
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç');
      }
      const coinsData = JSON.parse(data);
      this.filteredCoins = coinsData.coins;
      // –í—ã–≤–æ–¥–∏–º meta-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
      if (coinsData.meta) {
        console.log('---\nMETA-–ò–ù–§–û –û –í–´–ë–û–†–ö–ï –ú–û–ù–ï–¢:');
        console.log(JSON.stringify(coinsData.meta, null, 2));
        console.log('---');
      }
      // –í—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
      console.log('---\n–¢–ï–ö–£–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ –°–ò–°–¢–ï–ú–´:');
      console.log(JSON.stringify(this.config, null, 2));
      console.log('---');
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.filteredCoins.length} –º–æ–Ω–µ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç:', error.message);
      return false;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async loadTradeHistory() {
    try {
      const filename = path.join(__dirname, '..', '..', '..', 'data', 'trade-history.json');
      const data = await fs.readFile(filename, 'utf8');
      this.tradeHistory = JSON.parse(data);
      
      // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É volumeIncrease –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–æ–∫
      this.tradeHistory.forEach(trade => {
        if (!trade.volumeIncrease) {
          trade.volumeIncrease = null; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å null –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–¥–µ–ª–æ–∫
        }
        // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É bezubitok –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–æ–∫
        if (trade.bezubitok === undefined) {
          trade.bezubitok = false; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å false –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–¥–µ–ª–æ–∫
        }
      });
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.tradeHistory.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫`);
    } catch (error) {
      console.log('üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
      this.tradeHistory = [];
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async loadTradingStatistics() {
    try {
      const filename = path.join(__dirname, '..', '..', '..', 'data', 'trading-statistics.json');
      const data = await fs.readFile(filename, 'utf8');
      this.tradingStatistics = JSON.parse(data);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (${this.tradingStatistics.totalTrades} —Å–¥–µ–ª–æ–∫)`);
    } catch (error) {
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
      this.tradingStatistics = {
        lastUpdated: new Date().toISOString(),
        totalTrades: 0,
        winningTrades: 0,
        losingTrades: 0,
        winRate: 0,
        totalProfit: 0,
        averageProfit: 0,
        bestTrade: null,
        worstTrade: null,
        longestTrade: null,
        shortestTrade: null,
        monthlyStats: {},
        dailyStats: {},
        tradeHistory: [],
        systemStartTime: new Date().toISOString(),
        totalDaysRunning: 0,
        averageTradesPerDay: 0
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async loadSignalStatistics() {
    try {
      const filename = path.join(__dirname, '..', '..', '..', 'data', 'signal-statistics.json');
      const data = await fs.readFile(filename, 'utf8');
      this.signalStatistics = JSON.parse(data);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (${this.signalStatistics.totalLeads} –ª–∏–¥–æ–≤)`);
    } catch (error) {
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
      this.signalStatistics = {
        lastUpdated: new Date().toISOString(),
        totalLeads: 0,
        convertedToTrade: 0,
        averageLeadLifetimeMinutes: 0,
        leads: []
      };
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async saveTradingStatistics() {
    try {
      const dataDir = path.join(__dirname, '..', '..', '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });
      const filename = path.join(dataDir, 'trading-statistics.json');
      
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      this.updateTradingStatistics();
      
      await fs.writeFile(filename, JSON.stringify(this.tradingStatistics, null, 2));
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ Git stage
      try {
        const { stageTradingFiles } = require('../../../scripts/git-stage-trading-files.js');
        stageTradingFiles();
      } catch (error) {
        console.log('‚ÑπÔ∏è Git stage –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω:', error.message);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏:', error.message);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async saveSignalStatistics() {
    try {
      const dataDir = path.join(__dirname, '..', '..', '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });
      const filename = path.join(dataDir, 'signal-statistics.json');
      
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      this.updateSignalStatistics();
      
      await fs.writeFile(filename, JSON.stringify(this.signalStatistics, null, 2));
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ Git stage
      try {
        const { stageTradingFiles } = require('../../../scripts/git-stage-trading-files.js');
        stageTradingFiles();
      } catch (error) {
        console.log('‚ÑπÔ∏è Git stage –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω:', error.message);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:', error.message);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async saveTradeHistory() {
    try {
      const dataDir = path.join(__dirname, '..', '..', '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });
      const filename = path.join(dataDir, 'trade-history.json');
      await fs.writeFile(filename, JSON.stringify(this.tradeHistory, null, 2));
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ Git stage
      try {
        const { stageTradingFiles } = require('../../../scripts/git-stage-trading-files.js');
        stageTradingFiles();
      } catch (error) {
        console.log('‚ÑπÔ∏è Git stage –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω:', error.message);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫:', error.message);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å pending anomalies (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async savePendingAnomalies() {
    try {
      const dataDir = path.join(__dirname, '..', '..', '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });
      const filename = path.join(dataDir, 'pending-anomalies.json');
      const anomaliesData = Array.from(this.pendingAnomalies.entries()).map(([symbol, anomaly]) => ({
        symbol,
        ...anomaly
      }));
      await fs.writeFile(filename, JSON.stringify(anomaliesData, null, 2));
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ Git stage
      try {
        const { stageTradingFiles } = require('../../../scripts/git-stage-trading-files.js');
        stageTradingFiles();
      } catch (error) {
        console.log('‚ÑπÔ∏è Git stage –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω:', error.message);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è pending anomalies:', error.message);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å pending anomalies (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async loadPendingAnomalies() {
    try {
      const filename = path.join(__dirname, '..', '..', '..', 'data', 'pending-anomalies.json');
      const data = await fs.readFile(filename, 'utf8');
      const anomaliesData = JSON.parse(data);
      this.pendingAnomalies.clear();
      anomaliesData.forEach(anomaly => {
        this.pendingAnomalies.set(anomaly.symbol, {
          tradeType: anomaly.tradeType,
          anomalyTime: anomaly.anomalyTime,
          anomalyCandleIndex: anomaly.anomalyCandleIndex,
          anomalyPrice: anomaly.anomalyPrice,
          historicalPrice: anomaly.historicalPrice,
          anomalyId: anomaly.anomalyId,
          watchlistTime: anomaly.watchlistTime,
          currentVolume: anomaly.currentVolume || null, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É currentVolume
          volumeLeverage: anomaly.volumeLeverage || null, // Leverage –æ–±—ä–µ–º–∞
          maxPrice: anomaly.maxPrice || null, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ watchlist
          minPrice: anomaly.minPrice || null, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ watchlist
          entryLevel: anomaly.entryLevel || null, // –£—Ä–æ–≤–µ–Ω—å –≤—Ö–æ–¥–∞
          cancelLevel: anomaly.cancelLevel || null, // –£—Ä–æ–≤–µ–Ω—å –æ—Ç–º–µ–Ω—ã
          isConsolidated: anomaly.isConsolidated || false, // –§–ª–∞–≥ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
          closePrice: anomaly.closePrice || null // –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–Ω–æ–º–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏
        });
      });
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.pendingAnomalies.size} pending anomalies`);
    } catch (error) {
      console.log('üìä Pending anomalies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ');
      this.pendingAnomalies = new Map();
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async loadActiveTrades() {
    try {
      const filename = path.join(__dirname, '..', '..', '..', 'data', 'active-trades.json');
      const data = await fs.readFile(filename, 'utf8');
      const tradesData = JSON.parse(data);
      this.activeTrades.clear();
      tradesData.forEach(trade => {
        // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É volumeIncrease –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–æ–∫
        if (!trade.volumeIncrease) {
          trade.volumeIncrease = null; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å null –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–¥–µ–ª–æ–∫
        }
        // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É bezubitok –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–æ–∫
        if (trade.bezubitok === undefined) {
          trade.bezubitok = false; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å false –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–¥–µ–ª–æ–∫
        }
        this.activeTrades.set(trade.symbol, trade);
        this.watchlist.add(trade.symbol);
      });
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.activeTrades.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫`);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö
      if (this.activeTrades.size > 0) {
        await this.sendExistingTradesNotification();
      }
    } catch (error) {
      console.log('üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ');
      this.activeTrades = new Map();
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async saveActiveTrades() {
    try {
      const dataDir = path.join(__dirname, '..', '..', '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });
      const filename = path.join(dataDir, 'active-trades.json');
      const tradesData = Array.from(this.activeTrades.values());
      await fs.writeFile(filename, JSON.stringify(tradesData, null, 2));
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ Git stage
      try {
        const { stageTradingFiles } = require('../../../scripts/git-stage-trading-files.js');
        stageTradingFiles();
      } catch (error) {
        console.log('‚ÑπÔ∏è Git stage –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω:', error.message);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:', error.message);
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  calculateAveragePrice(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalPrice = candles.reduce((sum, candle) => {
      return sum + (candle[1] + candle[4]) / 2; // (open + close) / 2
    }, 0);
    
    return totalPrice / candles.length;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  calculateAverageVolume(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalVolume = candles.reduce((sum, candle) => sum + candle[5], 0);
    return totalVolume / candles.length;
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –æ–±—ä–µ–º–∞ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  detectVolumeAnomaly(currentVolume, historicalVolume) {
    return currentVolume > historicalVolume * this.config.volumeThreshold;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cooldown –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  isAnomalyOnCooldown(symbol) {
    const cooldownTime = this.anomalyCooldowns.get(symbol);
    if (!cooldownTime) return false;
    
    const now = Date.now();
    const cooldownDuration = this.config.anomalyCooldown * 15 * 60 * 1000; // 4 TF * 15 –º–∏–Ω—É—Ç
    return (now - cooldownTime) < cooldownDuration;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cooldown –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  setAnomalyCooldown(symbol) {
    this.anomalyCooldowns.set(symbol, Date.now());
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  determineTradeType(anomalyPrice, historicalPrice) {
    const priceDiff = (anomalyPrice - historicalPrice) / historicalPrice;
    
    if (priceDiff > this.config.priceThreshold) {
      return 'Short';
    } else if (priceDiff < -this.config.priceThreshold) {
      return 'Long';
    }
    
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—é —Å–≤–µ—á–∏ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   * –≠—Ç–∞–ø 2: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
   */
  checkConsolidation(candle) {
    const high = candle[2]; // High
    const low = candle[3];  // Low
    const consolidationRange = (high - low) / low;
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: High=${high}, Low=${low}, Range=${(consolidationRange * 100).toFixed(2)}%`);
    
    // –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å, –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É High –∏ Low –º–µ–Ω—å—à–µ 2%
    // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ >= 2%, —Ç–æ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å
    const isConsolidated = consolidationRange < this.config.consolidationThreshold;
    
    if (isConsolidated) {
      console.log(`‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å (–¥–∏–∞–ø–∞–∑–æ–Ω < ${(this.config.consolidationThreshold * 100).toFixed(1)}%)`);
    } else {
      console.log(`‚ùå –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å (–¥–∏–∞–ø–∞–∑–æ–Ω >= ${(this.config.consolidationThreshold * 100).toFixed(1)}%)`);
    }
    
    return isConsolidated;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞ –∏ –æ—Ç–º–µ–Ω—ã (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   * –≠—Ç–∞–ø 3: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∞–ø–∞ –∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
   */
  calculateEntryLevels(closePrice, tradeType) {
    let entryLevel, cancelLevel;
    
    if (tradeType === 'Long') {
      entryLevel = closePrice * (1 + this.config.entryLevelPercent);
      cancelLevel = closePrice * (1 - this.config.cancelLevelPercent);
    } else { // Short
      entryLevel = closePrice * (1 - this.config.entryLevelPercent);
      cancelLevel = closePrice * (1 + this.config.cancelLevelPercent);
    }
    
    console.log(`üìä –£—Ä–æ–≤–Ω–∏ –¥–ª—è ${tradeType}:`);
    console.log(`   üéØ –í—Ö–æ–¥: $${entryLevel.toFixed(6)}`);
    console.log(`   ‚ùå –û—Ç–º–µ–Ω–∞: $${cancelLevel.toFixed(6)}`);
    
    return { entryLevel, cancelLevel };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   * –≠—Ç–∞–ø 4: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
   */
  checkEntryConditions(currentPrice, entryLevel, cancelLevel, tradeType) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞ –¥–ª—è ${tradeType}:`);
    console.log(`   üéØ –£—Ä–æ–≤–µ–Ω—å –≤—Ö–æ–¥–∞: $${entryLevel}`);
    console.log(`   ‚ùå –£—Ä–æ–≤–µ–Ω—å –æ—Ç–º–µ–Ω—ã: $${cancelLevel}`);
    
    if (tradeType === 'Long') {
      if (currentPrice > entryLevel) {
        console.log(`‚úÖ –£—Å–ª–æ–≤–∏–µ –≤—Ö–æ–¥–∞ –¥–ª—è Long –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`);
        return 'entry';
      } else if (currentPrice < cancelLevel) {
        console.log(`‚ùå –£—Å–ª–æ–≤–∏–µ –æ—Ç–º–µ–Ω—ã –¥–ª—è Long –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`);
        return 'cancel';
      }
    } else { // Short
      if (currentPrice < entryLevel) {
        console.log(`‚úÖ –£—Å–ª–æ–≤–∏–µ –≤—Ö–æ–¥–∞ –¥–ª—è Short –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`);
        return 'entry';
      } else if (currentPrice > cancelLevel) {
        console.log(`‚ùå –£—Å–ª–æ–≤–∏–µ –æ—Ç–º–µ–Ω—ã –¥–ª—è Short –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`);
        return 'cancel';
      }
    }
    
    console.log(`‚è≥ –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ...`);
    return 'wait';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  checkEntryTimeout(anomaly) {
    const watchlistTime = new Date(anomaly.watchlistTime || anomaly.anomalyTime);
    const timeInWatchlist = Date.now() - watchlistTime.getTime();
    const minutesInWatchlist = Math.floor(timeInWatchlist / (15 * 60 * 1000));
    
    console.log(`‚è∞ –í—Ä–µ–º—è –≤ watchlist: ${minutesInWatchlist} TF –∏–∑ ${this.config.entryConfirmationTFs}`);
    
    return minutesInWatchlist >= this.config.entryConfirmationTFs;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –±–µ–∑—É–±—ã—Ç–∫–∞ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  checkAndSetBezubitok(trade, currentPrice) {
    if (trade.bezubitok) {
      return; // –£–∂–µ –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑—É–±—ã—Ç–∫–∞
    }

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É
    let progressToTakeProfit = 0;
    if (trade.type === 'Long') {
      progressToTakeProfit = ((currentPrice - trade.entryPrice) / (trade.takeProfit - trade.entryPrice)) * 100;
    } else { // Short
      progressToTakeProfit = ((trade.entryPrice - currentPrice) / (trade.entryPrice - trade.takeProfit)) * 100;
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 100%
    progressToTakeProfit = Math.max(0, Math.min(100, progressToTakeProfit));

    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ 20% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É
    if (progressToTakeProfit >= 20) {
      trade.bezubitok = true;
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è —Ä–µ–∂–∏–º–∞ –±–µ–∑—É–±—ã—Ç–∫–∞ (+6% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞)
      const bezubitokStopLossPercent = 0.06; // 6%
      if (trade.type === 'Long') {
        trade.stopLoss = trade.entryPrice * (1 + bezubitokStopLossPercent);
      } else { // Short
        trade.stopLoss = trade.entryPrice * (1 - bezubitokStopLossPercent);
      }

      console.log(`üü¢ ${trade.symbol} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–µ–∂–∏–º –±–µ–∑—É–±—ã—Ç–∫–∞!`);
      console.log(`   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É: ${progressToTakeProfit.toFixed(1)}%`);
      console.log(`   üõë –ù–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: $${trade.stopLoss.toFixed(6)}`);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
      this.sendBezubitokNotification(trade, progressToTakeProfit).catch(error => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑—É–±—ã—Ç–∫–µ –¥–ª—è ${trade.symbol}:`, error.message);
      });
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  createVirtualTrade(symbol, tradeType, entryPrice, anomalyId = null, currentVolume = null, entryLevel = null, cancelLevel = null) {
    const stopLoss = tradeType === 'Long' 
      ? entryPrice * (1 - this.config.stopLossPercent)
      : entryPrice * (1 + this.config.stopLossPercent);
    
    const takeProfit = tradeType === 'Long'
      ? entryPrice * (1 + this.config.takeProfitPercent)
      : entryPrice * (1 - this.config.takeProfitPercent);

    const trade = {
      id: `${symbol}_${Date.now()}`,
      anomalyId: anomalyId || `${symbol.replace('/USDT', '')}_${Date.now()}`,
      symbol: symbol,
      type: tradeType,
      entryPrice: entryPrice,
      stopLoss: stopLoss,
      takeProfit: takeProfit,
      entryTime: new Date().toISOString(),
      status: 'open',
      lastPrice: entryPrice,
      lastUpdateTime: new Date().toISOString(),
      currentVolume: currentVolume, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º —Å–≤–µ—á–∏
      volumeIncrease: null, // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –≤ —Ä–∞–∑–∞—Ö (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ)
      entryLevel: entryLevel, // –£—Ä–æ–≤–µ–Ω—å –≤—Ö–æ–¥–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      cancelLevel: cancelLevel, // –£—Ä–æ–≤–µ–Ω—å –æ—Ç–º–µ–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      bezubitok: false // –†–µ–∂–∏–º –±–µ–∑—É–±—ã—Ç–∫–∞
    };

    this.activeTrades.set(symbol, trade);
    this.watchlist.add(symbol);
    
    console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ ${tradeType} –¥–ª—è ${symbol} –ø–æ —Ü–µ–Ω–µ $${entryPrice.toFixed(6)}`);
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
    this.sendNewTradeNotification(trade).catch(error => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ –¥–ª—è ${symbol}:`, error.message);
    });
    
    return trade;
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async closeTrade(trade, exitPrice, reason, profitLoss) {
    trade.exitPrice = exitPrice;
    trade.exitTime = new Date().toISOString();
    trade.status = 'closed';
    trade.closeReason = reason;
    trade.profitLoss = profitLoss;
    trade.duration = new Date(trade.exitTime) - new Date(trade.entryTime);

    // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.tradeHistory.push(trade);
    
    // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏ watchlist
    this.activeTrades.delete(trade.symbol);
    this.watchlist.delete(trade.symbol);
    console.log(`üóëÔ∏è ${trade.symbol} —É–¥–∞–ª–µ–Ω –∏–∑ trade list –∏ watchlist`);

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await this.saveTradeHistory();
    await this.saveTradingStatistics();

    console.log(`üîí –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞ ${trade.type} –¥–ª—è ${trade.symbol}: ${profitLoss.toFixed(2)}% (${reason})`);
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.sendTradeNotification(trade);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async sendTradeNotification(trade) {
    try {
      if (!this.notificationService) return;
      
      const message = this.createTradeNotificationMessage(trade);
      await this.notificationService.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  createTradeNotificationMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const profitLossText = trade.profitLoss >= 0 ? `+${trade.profitLoss.toFixed(2)}%` : `${trade.profitLoss.toFixed(2)}%`;
    const emoji = trade.profitLoss >= 0 ? 'üü¢' : 'üî¥';
    const reasonText = trade.closeReason === 'take_profit' ? '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç' : '–°—Ç–æ–ø-–ª–æ—Å—Å';
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.getCurrentStatistics();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
    const closeTime = new Date(trade.exitTime).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏
    let takeProfitProgress = 0;
    if (trade.type === 'Long') {
      takeProfitProgress = ((trade.exitPrice - trade.entryPrice) / (trade.takeProfit - trade.entryPrice)) * 100;
    } else {
      // –î–ª—è Short —Å–¥–µ–ª–æ–∫ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è
      takeProfitProgress = ((trade.entryPrice - trade.exitPrice) / (trade.entryPrice - trade.takeProfit)) * 100;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 100%
    takeProfitProgress = Math.max(0, Math.min(100, takeProfitProgress));
    
    // –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–∑—É–±—ã—Ç–∫–µ
    const bezubitokInfo = trade.bezubitok ? '\nüü¢ –ë–ï–ó–£–ë–´–¢–û–ö: –î–∞' : '';
    
    return `${symbol} ‚Üí ${trade.type} ${emoji} –ó–ê–ö–†–´–¢–ê
üÜî ID: ${trade.anomalyId || trade.id || 'N/A'}
üïê –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: ${closeTime}

üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
üí∞ –í—ã—Ö–æ–¥: $${trade.exitPrice.toFixed(6)}
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${profitLossText}
üéØ –¢–µ–π–∫: $${trade.takeProfit.toFixed(6)} (${takeProfitProgress.toFixed(0)}% –ø—Ä–æ–≥—Ä–µ—Å—Å)
üìä –û–±—ä–µ–º: ${trade.volumeIncrease ? `${trade.volumeIncrease}x` : 'N/A'}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(trade.duration / 1000 / 60)} –º–∏–Ω—É—Ç
üéØ –ü—Ä–∏—á–∏–Ω–∞: ${reasonText}${bezubitokInfo}

üìà –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades} üü¢
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades} üî¥
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate}%
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats.totalProfit}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  getCurrentStatistics() {
    if (!this.tradingStatistics) {
      return {
        totalTrades: 0,
        winningTrades: 0,
        losingTrades: 0,
        winRate: 0,
        totalProfit: 0
      };
    }
    
    return {
      totalTrades: this.tradingStatistics.totalTrades,
      winningTrades: this.tradingStatistics.winningTrades,
      losingTrades: this.tradingStatistics.losingTrades,
      winRate: this.tradingStatistics.winRate,
      totalProfit: this.tradingStatistics.totalProfit.toFixed(2)
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  updateTradingStatistics() {
    if (!this.tradingStatistics) return;

    const totalTrades = this.tradeHistory.length;
    const winningTrades = this.tradeHistory.filter(t => t.profitLoss > 0).length;
    const losingTrades = this.tradeHistory.filter(t => t.profitLoss < 0).length;
    const winRate = totalTrades > 0 ? (winningTrades / totalTrades * 100).toFixed(1) : 0;
    const totalProfit = this.tradeHistory.reduce((sum, t) => sum + t.profitLoss, 0);
    const averageProfit = totalTrades > 0 ? (totalProfit / totalTrades).toFixed(2) : 0;

    // –ù–∞–π—Ç–∏ –ª—É—á—à—É—é –∏ —Ö—É–¥—à—É—é —Å–¥–µ–ª–∫–∏
    const bestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((best, current) => 
        current.profitLoss > best.profitLoss ? current : best
      ) : null;

    const worstTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((worst, current) => 
        current.profitLoss < worst.profitLoss ? current : worst
      ) : null;

    // –ù–∞–π—Ç–∏ —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –∏ –∫–æ—Ä–æ—Ç–∫—É—é —Å–¥–µ–ª–∫–∏
    const longestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((longest, current) => 
        current.duration > longest.duration ? current : longest
      ) : null;

    const shortestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((shortest, current) => 
        current.duration < shortest.duration ? current : shortest
      ) : null;

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    const systemStartTime = new Date(this.tradingStatistics.systemStartTime);
    const now = new Date();
    const totalDaysRunning = Math.ceil((now - systemStartTime) / (1000 * 60 * 60 * 24));
    const averageTradesPerDay = totalDaysRunning > 0 ? (totalTrades / totalDaysRunning).toFixed(1) : 0;

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.tradingStatistics = {
      ...this.tradingStatistics,
      lastUpdated: new Date().toISOString(),
      totalTrades,
      winningTrades,
      losingTrades,
      winRate: parseFloat(winRate),
      totalProfit,
      averageProfit: parseFloat(averageProfit),
      bestTrade: bestTrade ? {
        symbol: bestTrade.symbol,
        type: bestTrade.type,
        profitLoss: bestTrade.profitLoss,
        entryTime: bestTrade.entryTime
      } : null,
      worstTrade: worstTrade ? {
        symbol: worstTrade.symbol,
        type: worstTrade.type,
        profitLoss: worstTrade.profitLoss,
        entryTime: worstTrade.entryTime
      } : null,
      longestTrade: longestTrade ? {
        symbol: longestTrade.symbol,
        type: longestTrade.type,
        duration: longestTrade.duration,
        entryTime: longestTrade.entryTime
      } : null,
      shortestTrade: shortestTrade ? {
        symbol: shortestTrade.symbol,
        type: shortestTrade.type,
        duration: shortestTrade.duration,
        entryTime: shortestTrade.entryTime
      } : null,
      tradeHistory: this.tradeHistory.map(trade => ({
        id: trade.id,
        symbol: trade.symbol,
        type: trade.type,
        entryPrice: trade.entryPrice,
        exitPrice: trade.exitPrice,
        profitLoss: trade.profitLoss,
        entryTime: trade.entryTime,
        exitTime: trade.exitTime,
        closeReason: trade.closeReason,
        duration: trade.duration
      })),
      totalDaysRunning,
      averageTradesPerDay: parseFloat(averageTradesPerDay)
    };
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –ª–∏–¥–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  addLeadRecord(anomaly, outcome, converted) {
    if (!this.signalStatistics) {
      this.signalStatistics = {
        leads: [],
        totalLeads: 0,
        convertedToTrade: 0,
        averageLeadLifetimeMinutes: 0,
        lastUpdated: new Date().toISOString()
      };
    }

    const leadTime = new Date(anomaly.watchlistTime || anomaly.anomalyTime);
    const now = new Date();
    const lifetimeMinutes = Math.round((now - leadTime) / (1000 * 60));

    const leadRecord = {
      symbol: anomaly.symbol,
      anomalyId: anomaly.anomalyId,
      tradeType: anomaly.tradeType,
      volumeLeverage: anomaly.volumeLeverage,
      outcome: outcome, // 'consolidation', 'entry', 'cancel', 'timeout'
      converted: converted,
      watchlistTime: anomaly.watchlistTime,
      lifetimeMinutes: lifetimeMinutes,
      createdAt: new Date().toISOString()
    };

    this.signalStatistics.leads.push(leadRecord);
    this.updateSignalStatistics();
    
    console.log(`üìä –õ–∏–¥ ${anomaly.symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ${outcome} (${converted ? '–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω' : '–Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω'})`);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  updateSignalStatistics() {
    if (!this.signalStatistics || this.signalStatistics.leads.length === 0) return;

    const totalLeads = this.signalStatistics.leads.length;
    const convertedLeads = this.signalStatistics.leads.filter(lead => lead.converted).length;
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
    const totalLifetime = this.signalStatistics.leads.reduce((sum, lead) => sum + lead.lifetimeMinutes, 0);
    const averageLifetime = totalLifetime / totalLeads;

    this.signalStatistics = {
      ...this.signalStatistics,
      lastUpdated: new Date().toISOString(),
      totalLeads,
      convertedToTrade: convertedLeads,
      averageLeadLifetimeMinutes: Math.round(averageLifetime * 10) / 10
    };
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
   */
  showStatistics() {
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò:');
    console.log(`üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${this.tradeHistory.length}`);
    console.log(`üí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}`);
    console.log(`üìã –í watchlist: ${this.pendingAnomalies.size}`);
    
    if (this.tradingStatistics) {
      const winRate = this.tradingStatistics.winRate || 0;
      const totalProfit = this.tradingStatistics.totalProfit || 0;
      console.log(`üéØ –í–∏–Ω—Ä–µ–π—Ç: ${winRate}%`);
      console.log(`üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${totalProfit}%`);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    if (this.signalStatistics) {
      console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í:');
      console.log(`üìà –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${this.signalStatistics.totalLeads}`);
      console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–¥–µ–ª–∫–∏: ${this.signalStatistics.convertedToTrade}`);
      console.log(`‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ª–∏–¥–∞: ${this.signalStatistics.averageLeadLifetimeMinutes} –º–∏–Ω`);
      
      if (this.signalStatistics.totalLeads > 0) {
        const conversionRate = ((this.signalStatistics.convertedToTrade / this.signalStatistics.totalLeads) * 100).toFixed(1);
        console.log(`üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${conversionRate}%`);
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async sendNewTradeNotification(trade) {
    try {
      if (!this.notificationService) return;
      
      const message = this.createNewTradeMessage(trade);
      await this.notificationService.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  createNewTradeMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const emoji = trade.type === 'Long' ? 'üü¢' : 'üî¥';
    const stopLoss = trade.stopLoss;
    const takeProfit = trade.takeProfit;

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.getCurrentStatistics();

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
    const tradeTime = new Date(trade.entryTime).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    return `üéØ –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê: ${symbol} ‚Üí ${trade.type} ${emoji}
üÜî ID: ${trade.anomalyId || trade.id || 'N/A'}
üïê –í—Ä–µ–º—è: ${tradeTime}

üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
üõë –°—Ç–æ–ø: $${stopLoss.toFixed(6)}
üéØ –¢–µ–π–∫: $${takeProfit.toFixed(6)} (0% –ø—Ä–æ–≥—Ä–µ—Å—Å)
üíµ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $${trade.virtualAmount}
üìä –û–±—ä–µ–º: ${trade.volumeIncrease ? `${trade.volumeIncrease.toFixed(1)}x` : 'N/A'}

üí° –ë–ï–ó–£–ë–´–¢–û–ö: –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 20% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É
üõë —Å—Ç–æ–ø-–ª–æ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ +6% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞

üìà –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades} üü¢
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades} üî¥
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async sendExistingTradesNotification() {
    try {
      if (!this.notificationService) return;
      
      const message = this.createExistingTradesMessage();
      await this.notificationService.sendTelegramMessage(message);
      console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö:', error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  async sendBezubitokNotification(trade, progressToTakeProfit) {
    try {
      if (!this.notificationService) return;
      
      const message = this.createBezubitokMessage(trade, progressToTakeProfit);
      await this.notificationService.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑—É–±—ã—Ç–∫–µ:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  createBezubitokMessage(trade, progressToTakeProfit) {
    const symbol = trade.symbol.replace('/USDT', '');
    const emoji = trade.type === 'Long' ? 'üü¢' : 'üî¥';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
    const bezubitokTime = new Date().toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    return `üü¢ –ë–ï–ó–£–ë–´–¢–û–ö: ${symbol} ‚Üí ${trade.type} ${emoji}
üÜî ID: ${trade.anomalyId || trade.id || 'N/A'}
üïê –í—Ä–µ–º—è: ${bezubitokTime}

üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${trade.lastPrice.toFixed(6)}
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É: ${progressToTakeProfit.toFixed(1)}%
üõë –ù–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: $${trade.stopLoss.toFixed(6)} (+6% –æ—Ç –≤—Ö–æ–¥–∞)

üí° –°–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –±–µ–∑—É–±—ã—Ç–∫–∞!
üéØ –¢–µ–ø–µ—Ä—å —Å—Ç–æ–ø-–ª–æ—Å—Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–±—ã–ª—å –≤ 6%`;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
   */
  createExistingTradesMessage() {
    const trades = Array.from(this.activeTrades.values());
    const longTrades = trades.filter(t => t.type === 'Long');
    const shortTrades = trades.filter(t => t.type === 'Short');
    
    let message = `üìä –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–î–ï–õ–ö–ò (${trades.length})\n\n`;
    
    if (longTrades.length > 0) {
      message += `üü¢ LONG (${longTrades.length}):\n`;
      longTrades.forEach(trade => {
        const symbol = trade.symbol.replace('/USDT', '');
        const entryTime = new Date(trade.entryTime).toLocaleString('ru-RU');
        const lastUpdateTime = trade.lastUpdateTime ? new Date(trade.lastUpdateTime).toLocaleString('ru-RU') : '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å';
        
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        const lastPrice = trade.lastPrice || trade.entryPrice;
        const priceChange = ((lastPrice - trade.entryPrice) / trade.entryPrice) * 100;
        const changeEmoji = priceChange >= 0 ? 'üü¢' : 'üî¥';
        const changeSign = priceChange >= 0 ? '+' : '';
        
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ: (—Ç–µ–∫—É—â–∞—è - –≤—Ö–æ–¥)/(—Ç–µ–π–∫-–≤—Ö–æ–¥)*100
        let takeProfitProgress = 0;
        if (trade.type === 'Long') {
          takeProfitProgress = ((lastPrice - trade.entryPrice) / (trade.takeProfit - trade.entryPrice)) * 100;
        } else {
          // –î–ª—è Short —Å–¥–µ–ª–æ–∫ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è
          takeProfitProgress = ((trade.entryPrice - lastPrice) / (trade.entryPrice - trade.takeProfit)) * 100;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 100%
        takeProfitProgress = Math.max(0, Math.min(100, takeProfitProgress));
        
        // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progressEmoji = takeProfitProgress > 0 ? 'üü¢' : '‚ö™';
        
        // –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–µ–∑—É–±—ã—Ç–∫–∞
        const bezubitokIndicator = trade.bezubitok ? ' üü¢ –ë–ï–ó–£–ë–´–¢–û–ö' : '';
        
        message += `‚Ä¢ ${symbol} ${changeEmoji}${bezubitokIndicator}\n`;
        message += `  üïê –í—Ö–æ–¥: ${entryTime}\n`;
        message += `  üí∞ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: $${trade.entryPrice.toFixed(6)}\n`;
        message += `  üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${lastPrice.toFixed(6)}\n`;
        message += `  üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeSign}${priceChange.toFixed(2)}%\n`;
        message += `  üéØ –¢–µ–π–∫: $${trade.takeProfit.toFixed(6)}\n`;
        message += `  üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressEmoji} ${takeProfitProgress.toFixed(0)}%\n`;
        message += `  ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdateTime}\n\n`;
      });
    }
    
    if (shortTrades.length > 0) {
      message += `üî¥ SHORT (${shortTrades.length}):\n`;
      shortTrades.forEach(trade => {
        const symbol = trade.symbol.replace('/USDT', '');
        const entryTime = new Date(trade.entryTime).toLocaleString('ru-RU');
        const lastUpdateTime = trade.lastUpdateTime ? new Date(trade.lastUpdateTime).toLocaleString('ru-RU') : '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å';
        
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–¥–ª—è Short –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è)
        const lastPrice = trade.lastPrice || trade.entryPrice;
        const priceChange = ((trade.entryPrice - lastPrice) / trade.entryPrice) * 100;
        const changeEmoji = priceChange >= 0 ? 'üü¢' : 'üî¥';
        const changeSign = priceChange >= 0 ? '+' : '';
        
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ: (—Ç–µ–∫—É—â–∞—è - –≤—Ö–æ–¥)/(—Ç–µ–π–∫-–≤—Ö–æ–¥)*100
        let takeProfitProgress = 0;
        if (trade.type === 'Long') {
          takeProfitProgress = ((lastPrice - trade.entryPrice) / (trade.takeProfit - trade.entryPrice)) * 100;
        } else {
          // –î–ª—è Short —Å–¥–µ–ª–æ–∫ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è
          takeProfitProgress = ((trade.entryPrice - lastPrice) / (trade.entryPrice - trade.takeProfit)) * 100;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 100%
        takeProfitProgress = Math.max(0, Math.min(100, takeProfitProgress));
        
        // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progressEmoji = takeProfitProgress > 0 ? 'üü¢' : '‚ö™';
        
        // –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–µ–∑—É–±—ã—Ç–∫–∞
        const bezubitokIndicator = trade.bezubitok ? ' üü¢ –ë–ï–ó–£–ë–´–¢–û–ö' : '';
        
        message += `‚Ä¢ ${symbol} ${changeEmoji}${bezubitokIndicator}\n`;
        message += `  üïê –í—Ö–æ–¥: ${entryTime}\n`;
        message += `  üí∞ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: $${trade.entryPrice.toFixed(6)}\n`;
        message += `  üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${lastPrice.toFixed(6)}\n`;
        message += `  üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeSign}${priceChange.toFixed(2)}%\n`;
        message += `  üéØ –¢–µ–π–∫: $${trade.takeProfit.toFixed(6)}\n`;
        message += `  üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressEmoji} ${takeProfitProgress.toFixed(0)}%\n`;
        message += `  üìä –û–±—ä–µ–º: ${trade.volumeIncrease ? `${trade.volumeIncrease}x` : 'N/A'}\n`;
        message += `  ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdateTime}\n\n`;
      });
    }
    
    message += `üí° –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —ç—Ç–∏ —Å–¥–µ–ª–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`;
    
    return message;
  }

  /**
   * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
   */
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  async initialize() {
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
    const loaded = await this.loadFilteredCoins();
    if (!loaded) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç');
    }

    await this.loadTradeHistory();
    await this.loadTradingStatistics();
    await this.loadSignalStatistics();
    await this.loadPendingAnomalies();
    await this.loadActiveTrades();

    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π)
   */
  async start() {
    throw new Error('–ú–µ—Ç–æ–¥ start() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π)
   */
  async stop() {
    throw new Error('–ú–µ—Ç–æ–¥ stop() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π)
   */
  async checkAnomalies(coin) {
    throw new Error('–ú–µ—Ç–æ–¥ checkAnomalies() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ pending anomalies (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π)
   */
  async checkPendingAnomalies() {
    throw new Error('–ú–µ—Ç–æ–¥ checkPendingAnomalies() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ');
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π)
   */
  async trackActiveTrades() {
    throw new Error('–ú–µ—Ç–æ–¥ trackActiveTrades() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ pending anomalies
   */
  async sendPendingAnomalyAddedNotification(anomaly) {
    try {
      if (!this.notificationService) return;
      
      const message = this.createPendingAnomalyAddedMessage(anomaly);
      await this.notificationService.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ pending anomalies –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ pending:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ pending anomalies
   */
  createPendingAnomalyAddedMessage(anomaly) {
    const symbol = anomaly.symbol.replace('/USDT', '');
    const emoji = anomaly.tradeType === 'Long' ? 'üü¢' : 'üî¥';
    const leverageText = anomaly.volumeLeverage ? `${anomaly.volumeLeverage.toFixed(1)}x` : 'N/A';
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É pending anomalies
    const pendingStats = this.getPendingAnomaliesStats();
    
    return `üìã –î–û–ë–ê–í–õ–ï–ù–ê –í PENDING ANOMALIES: ${symbol} ‚Üí ${anomaly.tradeType} ${emoji}

üö® –ê–Ω–æ–º–∞–ª–∏—è –æ–±—ä–µ–º–∞: ${leverageText}
üÜî ID: ${anomaly.anomalyId || 'N/A'}
‚è∞ –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: ${new Date(anomaly.anomalyTime).toLocaleString('ru-RU')}
üí∞ –¶–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏: $${anomaly.anomalyPrice?.toFixed(6) || 'N/A'}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê PENDING ANOMALIES:
‚Ä¢ –í—Å–µ–≥–æ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: ${pendingStats.total}
‚Ä¢ Long: ${pendingStats.longCount} üü¢
‚Ä¢ Short: ${pendingStats.shortCount} üî¥
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π leverage: ${pendingStats.avgLeverage}x

üí° –ú–æ–Ω–µ—Ç–∞ –±—É–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ pending anomalies
   */
  async sendPendingAnomalyRemovedNotification(symbol, reason, anomaly = null) {
    try {
      if (!this.notificationService) return;
      
      const message = this.createPendingAnomalyRemovedMessage(symbol, reason, anomaly);
      await this.notificationService.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ pending anomalies –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ pending:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ pending anomalies
   */
  createPendingAnomalyRemovedMessage(symbol, reason, anomaly = null) {
    const symbolName = symbol.replace('/USDT', '');
    const reasonText = this.getRemovalReasonText(reason);
    const emoji = reason === 'converted_to_trade' ? 'üí∞' : '‚ùå';
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É pending anomalies
    const pendingStats = this.getPendingAnomaliesStats();
    
    let message = `${emoji} –£–î–ê–õ–ï–ù–ê –ò–ó PENDING ANOMALIES: ${symbolName}

üìã –ü—Ä–∏—á–∏–Ω–∞: ${reasonText}
‚è∞ –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`;

    if (anomaly) {
      const leverageText = anomaly.volumeLeverage ? `${anomaly.volumeLeverage.toFixed(1)}x` : 'N/A';
      const watchlistTime = anomaly.watchlistTime ? new Date(anomaly.watchlistTime).toLocaleString('ru-RU') : 'N/A';
      
      message += `\n\nüìä –î–ï–¢–ê–õ–ò –ê–ù–û–ú–ê–õ–ò–ò:
‚Ä¢ –¢–∏–ø: ${anomaly.tradeType || 'N/A'}
‚Ä¢ Leverage: ${leverageText}
‚Ä¢ –í—Ä–µ–º—è –≤ watchlist: ${watchlistTime}
‚Ä¢ ID: ${anomaly.anomalyId || 'N/A'}`;
    }

    message += `\n\nüìä –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê PENDING:
‚Ä¢ –í—Å–µ–≥–æ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: ${pendingStats.total}
‚Ä¢ Long: ${pendingStats.longCount} üü¢
‚Ä¢ Short: ${pendingStats.shortCount} üî¥
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π leverage: ${pendingStats.avgLeverage}x`;

    return message;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
   */
  getRemovalReasonText(reason) {
    const reasons = {
      'converted_to_trade': '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–¥–µ–ª–∫—É üí∞',
      'timeout': '–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ‚è∞',
      'consolidation': '–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã üìä',
      'removed': '–£–¥–∞–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é ‚ùå',
      'cancel_level_hit': '–î–æ—Å—Ç–∏–≥–Ω—É—Ç —É—Ä–æ–≤–µ–Ω—å –æ—Ç–º–µ–Ω—ã üö´'
    };
    return reasons[reason] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É pending anomalies
   */
  getPendingAnomaliesStats() {
    if (!this.pendingAnomalies) {
      return { total: 0, longCount: 0, shortCount: 0, avgLeverage: 0 };
    }

    const anomalies = Array.from(this.pendingAnomalies.values());
    const longCount = anomalies.filter(a => a.tradeType === 'Long').length;
    const shortCount = anomalies.filter(a => a.tradeType === 'Short').length;
    
    const totalLeverage = anomalies.reduce((sum, a) => sum + (a.volumeLeverage || 0), 0);
    const avgLeverage = anomalies.length > 0 ? (totalLeverage / anomalies.length).toFixed(1) : 0;

    return {
      total: anomalies.length,
      longCount,
      shortCount,
      avgLeverage
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —Å–¥–µ–ª–∫—É —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
   */
  async sendTradeEntryNotification(trade, anomaly = null) {
    try {
      if (!this.notificationService) return;
      
      const message = this.createTradeEntryMessage(trade, anomaly);
      await this.notificationService.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —Å–¥–µ–ª–∫—É —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ –≤ —Å–¥–µ–ª–∫—É:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —Å–¥–µ–ª–∫—É —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
   */
  createTradeEntryMessage(trade, anomaly = null) {
    const symbol = trade.symbol.replace('/USDT', '');
    const emoji = trade.type === 'Long' ? 'üü¢' : 'üî¥';
    const leverageText = anomaly?.volumeLeverage ? `${anomaly.volumeLeverage.toFixed(1)}x` : 'N/A';
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.getCurrentStatistics();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
    const tradeTime = new Date(trade.entryTime).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    let message = `üí∞ –í–•–û–î –í –°–î–ï–õ–ö–£: ${symbol} ‚Üí ${trade.type} ${emoji}

üìã –û–ë–û–°–ù–û–í–ê–ù–ò–ï –í–•–û–î–ê:
‚Ä¢ –ê–Ω–æ–º–∞–ª–∏—è –æ–±—ä–µ–º–∞: ${leverageText}
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è: ‚úÖ
‚Ä¢ –í—Ä–µ–º—è –≤ watchlist: ${anomaly ? this.getWatchlistDuration(anomaly) : 'N/A'}
‚Ä¢ ID –∞–Ω–æ–º–∞–ª–∏–∏: ${anomaly?.anomalyId || trade.anomalyId || 'N/A'}

üí∞ –ü–ê–†–ê–ú–ï–¢–†–´ –°–î–ï–õ–ö–ò:
‚Ä¢ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
‚Ä¢ –°—Ç–æ–ø: $${trade.stopLoss.toFixed(6)}
‚Ä¢ –¢–µ–π–∫: $${trade.takeProfit.toFixed(6)}
‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $${trade.virtualAmount}
‚Ä¢ –í—Ä–µ–º—è –≤—Ö–æ–¥–∞: ${tradeTime}

üí° –ë–ï–ó–£–ë–´–¢–û–ö: –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 20% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É
üõë —Å—Ç–æ–ø-–ª–æ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ +6% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞

üìà –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades} üü¢
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades} üî¥
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}`;

    return message;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ watchlist
   */
  getWatchlistDuration(anomaly) {
    if (!anomaly.watchlistTime) return 'N/A';
    
    const watchlistTime = new Date(anomaly.watchlistTime);
    const now = new Date();
    const durationMs = now - watchlistTime;
    const durationMinutes = Math.round(durationMs / (1000 * 60));
    
    if (durationMinutes < 1) return '< 1 –º–∏–Ω—É—Ç—ã';
    if (durationMinutes < 60) return `${durationMinutes} –º–∏–Ω`;
    
    const hours = Math.floor(durationMinutes / 60);
    const minutes = durationMinutes % 60;
    return `${hours}—á ${minutes}–º`;
  }
}

module.exports = { VirtualTradingBaseService }; 