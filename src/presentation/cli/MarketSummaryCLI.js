/**
 * CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ —Ä—ã–Ω–∫–∞
 */
class MarketSummaryCLI {
  constructor() {
    this.useCase = null;
    this.notificationService = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å CLI
   */
  async initialize() {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
      if (!global.cryptoScreener) {
        throw new Error('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
      }

      this.useCase = global.cryptoScreener.sendMarketSummaryUseCase;
      this.notificationService = global.cryptoScreener.notificationService;
      console.log('‚úÖ CLI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CLI:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
   */
  showHelp() {
    console.log(`
üìä Crypto Screener - CLI –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ —Ä—ã–Ω–∫–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node src/cli.js [–∫–æ–º–∞–Ω–¥–∞] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ö–æ–º–∞–Ω–¥—ã:
  summary [limit]           - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É —Ä—ã–Ω–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20 –º–æ–Ω–µ—Ç)
  rising [limit]           - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç
  falling [limit]          - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É —Ç–æ–ª—å–∫–æ –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç
  test                     - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  help                     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  limit                    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-100)

–ü—Ä–∏–º–µ—Ä—ã:
  node src/cli.js summary 10
  node src/cli.js rising 15
  node src/cli.js falling 5
  node src/cli.js test

–ò–ª–∏ —á–µ—Ä–µ–∑ npm:
  npm run summary:10
  npm run rising
  npm run falling
  npm run test

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TELEGRAM_BOT_TOKEN       - –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
  TELEGRAM_CHAT_ID         - ID —á–∞—Ç–∞ Telegram
  NODE_ENV                 - –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (development/production)
    `);
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
   * @param {string} command - –ö–æ–º–∞–Ω–¥–∞
   * @param {Array<string>} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã
   */
  async executeCommand(command, args = []) {
    try {
      await this.initialize();

      switch (command) {
        case 'summary':
          await this.executeSummary(args);
          break;
        case 'rising':
          await this.executeRising(args);
          break;
        case 'falling':
          await this.executeFalling(args);
          break;
        case 'test':
          await this.executeTest();
          break;
        case 'help':
        case '--help':
        case '-h':
          this.showHelp();
          break;
        default:
          console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
          this.showHelp();
          process.exit(1);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error.message);
      process.exit(1);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏
   * @param {Array<string>} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã
   */
  async executeSummary(args) {
    const limit = this.parseLimit(args[0]);
    
    console.log(`üìä –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ —Ä—ã–Ω–∫–∞ (—Ç–æ–ø-${limit} –º–æ–Ω–µ—Ç)...`);
    
    await this.useCase.execute({
      limit: limit,
      totalLimit: 1000,
      currency: 'btc'
    });
    
    console.log('‚úÖ –°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏ —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç
   * @param {Array<string>} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã
   */
  async executeRising(args) {
    const limit = this.parseLimit(args[0]);
    
    console.log(`üìà –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç (—Ç–æ–ø-${limit} –º–æ–Ω–µ—Ç)...`);
    
    await this.useCase.executeRisingCoins({
      limit: limit,
      totalLimit: 1000,
      currency: 'btc'
    });
    
    console.log('‚úÖ –°–≤–æ–¥–∫–∞ —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏ –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç
   * @param {Array<string>} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã
   */
  async executeFalling(args) {
    const limit = this.parseLimit(args[0]);
    
    console.log(`üìâ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç (—Ç–æ–ø-${limit} –º–æ–Ω–µ—Ç)...`);
    
    await this.useCase.executeFallingCoins({
      limit: limit,
      totalLimit: 1000,
      currency: 'btc'
    });
    
    console.log('‚úÖ –°–≤–æ–¥–∫–∞ –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async executeTest() {
    console.log('üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    await this.notificationService.sendTestMessage();
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç—å –ª–∏–º–∏—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
   * @param {string} arg - –ê—Ä–≥—É–º–µ–Ω—Ç
   * @returns {number} –õ–∏–º–∏—Ç
   */
  parseLimit(arg) {
    if (!arg) {
      return 20; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    const limit = parseInt(arg);
    
    if (isNaN(limit) || limit < 1 || limit > 100) {
      console.error('‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 100');
      process.exit(1);
    }
    
    return limit;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å CLI
   */
  static async run() {
    const cli = new MarketSummaryCLI();
    const args = process.argv.slice(2);
    const command = args[0] || 'help';
    const commandArgs = args.slice(1);

    await cli.executeCommand(command, commandArgs);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = MarketSummaryCLI;

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  MarketSummaryCLI.run().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ CLI:', error.message);
    process.exit(1);
  });
} 