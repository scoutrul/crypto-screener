const WebSocket = require('ws');

/**
 * WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è Binance
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ—Ç–æ–∫–∏ —Å–≤–µ—á–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
 */
class BinanceWebSocketProvider {
  constructor() {
    this.ws = null;
    this.isConnected = false;
    this.subscriptions = new Map(); // symbol -> { interval, callback }
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    this.pingInterval = null;
    this.pongTimeout = null;
    this.lastPong = Date.now();
    
    // URL –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.wsUrl = 'wss://data-stream.binance.vision/ws';
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.onMessageCallback = null;
    this.onConnectCallback = null;
    this.onDisconnectCallback = null;
    this.onErrorCallback = null;
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket
   */
  async connect() {
    return new Promise((resolve, reject) => {
      try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance WebSocket...');
        
        this.ws = new WebSocket(this.wsUrl);
        
        this.ws.on('open', () => {
          console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
          this.isConnected = true;
          this.reconnectAttempts = 0;
          this.startHeartbeat();
          
          if (this.onConnectCallback) {
            this.onConnectCallback();
          }
          
          resolve();
        });
        
        this.ws.on('message', (data) => {
          try {
            const message = JSON.parse(data.toString());
            this.handleMessage(message);
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
          }
        });
        
        this.ws.on('close', (code, reason) => {
          console.log(`üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: ${code} - ${reason}`);
          this.isConnected = false;
          this.stopHeartbeat();
          
          if (this.onDisconnectCallback) {
            this.onDisconnectCallback(code, reason);
          }
          
          // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          this.scheduleReconnect();
        });
        
        this.ws.on('error', (error) => {
          console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
          
          if (this.onErrorCallback) {
            this.onErrorCallback(error);
          }
          
          reject(error);
        });
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        reject(error);
      }
    });
  }

  /**
   * –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç WebSocket
   */
  disconnect() {
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket...');
    
    if (this.ws) {
      this.stopHeartbeat();
      this.ws.close();
      this.ws = null;
    }
    
    this.isConnected = false;
    this.subscriptions.clear();
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–æ–∫ —Å–≤–µ—á–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞
   * @param {string} symbol - –°–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
   * @param {string} interval - –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π ('1m', '5m', '15m', '1h', '4h', '1d')
   * @param {function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  subscribeToKline(symbol, interval, callback) {
    if (!this.isConnected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
    
    const streamName = `${symbol.toLowerCase()}@kline_${interval}`;
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    this.subscriptions.set(symbol, {
      interval,
      callback,
      streamName
    });
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
    const subscribeMessage = {
      method: 'SUBSCRIBE',
      params: [streamName],
      id: Date.now()
    };
    
    this.ws.send(JSON.stringify(subscribeMessage));
    console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${streamName}`);
  }

  /**
   * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ—Ç–æ–∫–∞ —Å–≤–µ—á–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞
   * @param {string} symbol - –°–∏–º–≤–æ–ª
   */
  unsubscribeFromKline(symbol) {
    if (!this.isConnected) {
      return;
    }
    
    const subscription = this.subscriptions.get(symbol);
    if (!subscription) {
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø–∏—Å–∫—É
    const unsubscribeMessage = {
      method: 'UNSUBSCRIBE',
      params: [subscription.streamName],
      id: Date.now()
    };
    
    this.ws.send(JSON.stringify(unsubscribeMessage));
    this.subscriptions.delete(symbol);
    console.log(`üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç ${subscription.streamName}`);
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
   * @param {Array} streams - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { symbol, interval, callback }
   */
  subscribeToMultipleStreams(streams) {
    if (!this.isConnected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
    
    const streamNames = [];
    
    streams.forEach(({ symbol, interval, callback }) => {
      const streamName = `${symbol.toLowerCase()}@kline_${interval}`;
      streamNames.push(streamName);
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
      this.subscriptions.set(symbol, {
        interval,
        callback,
        streamName
      });
    });
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
    const subscribeMessage = {
      method: 'SUBSCRIBE',
      params: streamNames,
      id: Date.now()
    };
    
    this.ws.send(JSON.stringify(subscribeMessage));
    console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${streamNames.length} –ø–æ—Ç–æ–∫–æ–≤:`, streamNames);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
   */
  getActiveSubscriptions() {
    return Array.from(this.subscriptions.keys());
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {Object} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket
   */
  handleMessage(message) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    if (message.result !== undefined) {
      console.log('üì® –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É:', message);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (message.error) {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', message.error);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
    if (message.e === 'kline') {
      this.handleKlineData(message);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ping/pong
    if (message.pong) {
      this.lastPong = Date.now();
      return;
    }
    
    console.log('üì® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
   * @param {Object} klineData - –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
   */
  handleKlineData(klineData) {
    const { s: symbol, k: kline } = klineData;
    
    // –ù–∞–π—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    const subscription = this.subscriptions.get(symbol);
    if (!subscription) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∞
    if (!kline.x) {
      return; // –°–≤–µ—á–∞ –µ—â–µ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞
    }
    
    // –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —Å–≤–µ—á–∏ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const candle = {
      openTime: kline.t,
      open: parseFloat(kline.o),
      high: parseFloat(kline.h),
      low: parseFloat(kline.l),
      close: parseFloat(kline.c),
      volume: parseFloat(kline.v),
      closeTime: kline.T,
      quoteAssetVolume: parseFloat(kline.q),
      numberOfTrades: kline.n,
      takerBuyBaseAssetVolume: parseFloat(kline.V),
      takerBuyQuoteAssetVolume: parseFloat(kline.Q),
      isClosed: kline.x
    };
    
    // –í—ã–∑–≤–∞—Ç—å callback —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–≤–µ—á–∏
    try {
      subscription.callback(symbol, candle);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ callback –¥–ª—è ${symbol}:`, error);
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å heartbeat –º–µ—Ö–∞–Ω–∏–∑–º
   */
  startHeartbeat() {
    this.pingInterval = setInterval(() => {
      if (this.isConnected && this.ws) {
        this.ws.send(JSON.stringify({ ping: Date.now() }));
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ pong timeout
        if (Date.now() - this.lastPong > 60000) { // 60 —Å–µ–∫—É–Ω–¥
          console.log('‚ö†Ô∏è Pong timeout, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
          this.ws.close();
        }
      }
    }, 30000); // Ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å heartbeat –º–µ—Ö–∞–Ω–∏–∑–º
   */
  stopHeartbeat() {
    if (this.pingInterval) {
      clearInterval(this.pingInterval);
      this.pingInterval = null;
    }
  }

  /**
   * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  scheduleReconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      return;
    }
    
    this.reconnectAttempts++;
    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
    
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}ms`);
    
    setTimeout(() => {
      this.connect().catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      });
    }, delay);
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  onMessage(callback) {
    this.onMessageCallback = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   * @param {function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  onConnect(callback) {
    this.onConnectCallback = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
   * @param {function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  onDisconnect(callback) {
    this.onDisconnectCallback = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
   * @param {function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  onError(callback) {
    this.onErrorCallback = callback;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  getConnectionStatus() {
    return {
      isConnected: this.isConnected,
      reconnectAttempts: this.reconnectAttempts,
      activeSubscriptions: this.subscriptions.size,
      lastPong: this.lastPong
    };
  }
}

module.exports = { BinanceWebSocketProvider }; 