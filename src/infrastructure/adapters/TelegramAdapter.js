const axios = require('axios');

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
 */
class TelegramAdapter {
  constructor(botToken, chatId) {
    if (!botToken || !chatId) {
      throw new Error('Bot token and chat ID are required');
    }
    
    this.botToken = botToken;
    this.chatId = chatId;
    this.apiUrl = `https://api.telegram.org/bot${botToken}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @returns {Promise<void>}
   */
  async sendMessage(message, options = {}) {
    try {
      const payload = {
        chat_id: this.chatId,
        text: message,
        parse_mode: options.parseMode || 'HTML',
        disable_web_page_preview: options.disableWebPagePreview || true
      };

      if (options.replyMarkup) {
        payload.reply_markup = options.replyMarkup;
      }

      const response = await axios.post(`${this.apiUrl}/sendMessage`, payload);
      
      if (!response.data.ok) {
        throw new Error(`Telegram API Error: ${response.data.description}`);
      }

      console.log('Message sent to Telegram successfully');
      return response.data.result;
      
    } catch (error) {
      console.error('Failed to send Telegram message:', error.message);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É —Ä—ã–Ω–∫–∞
   * @param {Array<Coin>} coins - –ú–∞—Å—Å–∏–≤ –º–æ–Ω–µ—Ç
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  async sendMarketSummary(coins, limit = 20) {
    const message = this.buildMarketSummaryMessage(coins, limit);
    await this.sendMessage(message, { parseMode: 'HTML' });
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π —Ä—ã–Ω–∫–∞
   * @param {Array<Coin>} coins - –ú–∞—Å—Å–∏–≤ –º–æ–Ω–µ—Ç
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  buildMarketSummaryMessage(coins, limit = 20) {
    const now = new Date().toLocaleString('ru-RU');
    const coinsToShow = coins.slice(0, limit);
    
    let message = `üìä <b>–¢–û–ü-${coinsToShow.length} –ú–û–ù–ï–¢ –ü–û –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–ò (BTC –ø–∞—Ä—ã)</b>\n\n`;
    message += `üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${now}\n`;
    message += `üìà <b>–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –≤ –±–∞–∑–µ:</b> ${coins.length}\n\n`;
    
    coinsToShow.forEach((coin, index) => {
      const rank = index + 1;
      const price = coin.getCurrentPrice().format(8);
      const change24h = coin.getPriceChangePercentage24h() ? 
        coin.getPriceChangePercentage24h().format() : 'N/A';
      const changeIcon = coin.getPriceChangePercentage24h() ? 
        (coin.getPriceChangePercentage24h().isPositive() ? 'üìà' : 
         coin.getPriceChangePercentage24h().isNegative() ? 'üìâ' : '‚û°Ô∏è') : '‚û°Ô∏è';
      
      message += `${rank}. <b>${coin.getName()}</b> (${coin.getSymbol()})\n`;
      message += `   üí∞ ${price} BTC ${changeIcon} ${change24h}\n\n`;
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞
    const risingCoins = coins.filter(c => c.isPriceRising24h()).length;
    const fallingCoins = coins.filter(c => c.isPriceFalling24h()).length;
    const stableCoins = coins.length - risingCoins - fallingCoins;
    
    message += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞:</b>\n`;
    message += `üìà –†–∞—Å—Ç—É—Ç: ${risingCoins} –º–æ–Ω–µ—Ç\n`;
    message += `üìâ –ü–∞–¥–∞—é—Ç: ${fallingCoins} –º–æ–Ω–µ—Ç\n`;
    message += `‚û°Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${stableCoins} –º–æ–Ω–µ—Ç\n\n`;
    message += `üîó <i>–î–∞–Ω–Ω—ã–µ: CoinGecko API</i>`;
    
    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ–± –∞–Ω–æ–º–∞–ª–∏–∏
   * @param {Object} signal - –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
   * @returns {Promise<void>}
   */
  async sendAnomalySignal(signal) {
    const message = this.buildAnomalySignalMessage(signal);
    await this.sendMessage(message, { parseMode: 'HTML' });
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ –∞–Ω–æ–º–∞–ª–∏–∏
   * @param {Object} signal - –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  buildAnomalySignalMessage(signal) {
    const now = new Date().toLocaleString('ru-RU');
    const severityIcon = signal.severity === 'high' ? 'üö®' : '‚ö†Ô∏è';
    
    let message = `${severityIcon} <b>–°–ò–ì–ù–ê–õ –ê–ù–û–ú–ê–õ–ò–ò</b>\n\n`;
    message += `üïê <b>–í—Ä–µ–º—è:</b> ${now}\n`;
    message += `ü™ô <b>–ú–æ–Ω–µ—Ç–∞:</b> ${signal.coin}\n`;
    message += `üìä <b>–¢–∏–ø:</b> ${signal.type}\n`;
    message += `üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã:</b> ${signal.priceChange}%\n`;
    message += `üìä <b>–û–±—ä–µ–º:</b> ${signal.volumeChange}\n`;
    message += `‚ö° <b>–í–∞–∂–Ω–æ—Å—Ç—å:</b> ${signal.severity === 'high' ? '–í—ã—Å–æ–∫–∞—è' : '–°—Ä–µ–¥–Ω—è—è'}\n\n`;
    message += `üîç <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</i>`;
    
    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫
   * @param {string} messageText - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  async sendNotification(title, messageText, type = 'info') {
    const message = this.buildNotificationMessage(title, messageText, type);
    await this.sendMessage(message, { parseMode: 'HTML' });
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫
   * @param {string} messageText - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  buildNotificationMessage(title, messageText, type = 'info') {
    const now = new Date().toLocaleString('ru-RU');
    const typeIcons = {
      info: '‚ÑπÔ∏è',
      warning: '‚ö†Ô∏è',
      error: '‚ùå',
      success: '‚úÖ'
    };
    
    const icon = typeIcons[type] || typeIcons.info;
    
    let message = `${icon} <b>${title.toUpperCase()}</b>\n\n`;
    message += `üïê <b>–í—Ä–µ–º—è:</b> ${now}\n`;
    message += `üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${messageText}\n\n`;
    message += `üîó <i>Crypto Screener</i>`;
    
    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns {Promise<void>}
   */
  async sendConsoleMessage(message, level = 'log') {
    const timestamp = new Date().toISOString();
    const prefix = `[${timestamp}] [${level.toUpperCase()}]`;
    
    switch (level) {
      case 'warn':
        console.warn(`${prefix} ${message}`);
        break;
      case 'error':
        console.error(`${prefix} ${message}`);
        break;
      default:
        console.log(`${prefix} ${message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
   * @returns {Promise<boolean>}
   */
  async isAvailable() {
    try {
      const response = await axios.get(`${this.apiUrl}/getMe`);
      return response.data.ok;
    } catch (error) {
      console.error('Telegram bot is not available:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
   * @returns {Promise<Object>}
   */
  async getBotInfo() {
    try {
      const response = await axios.get(`${this.apiUrl}/getMe`);
      if (response.data.ok) {
        return response.data.result;
      }
      throw new Error('Failed to get bot info');
    } catch (error) {
      console.error('Error getting bot info:', error.message);
      throw error;
    }
  }
}

module.exports = TelegramAdapter; 