const NotificationRepository = require('../../domain/repositories/NotificationRepository');
const messageQueue = require('../../../scripts/telegram-message-queue');

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
 */
class TelegramNotificationRepository extends NotificationRepository {
  constructor() {
    super();
    this.chatId = process.env.TELEGRAM_CHAT_ID;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram
   */
  async isAvailable() {
    return !!this.chatId;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
   */
  async sendTelegramMessage(message, options = {}) {
    try {
      if (!this.chatId) {
        console.warn('‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–æ—Ç–æ–≤ –ª–∏ –±–æ—Ç
      if (!messageQueue.isBotReady()) {
        console.warn('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return;
      }

      await messageQueue.addMessage(this.chatId, message, options);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É —Ä—ã–Ω–∫–∞
   */
  async sendMarketSummary(coins, limit = 20) {
    const message = this.buildMarketSummaryMessage(coins, limit);
    await this.sendTelegramMessage(message, { parseMode: 'HTML' });
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π —Ä—ã–Ω–∫–∞
   */
  buildMarketSummaryMessage(coins, limit = 20) {
    const now = new Date().toLocaleString('ru-RU');
    const coinsToShow = coins.slice(0, limit);
    
    let message = `üìä <b>–¢–û–ü-${coinsToShow.length} –ú–û–ù–ï–¢ –ü–û –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–ò</b>\n\n`;
    message += `üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${now}\n`;
    message += `üìà <b>–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –≤ –±–∞–∑–µ:</b> ${coins.length}\n\n`;
    
    coinsToShow.forEach((coin, index) => {
      const rank = index + 1;
      message += `${rank}. <b>${coin.name}</b> (${coin.symbol})\n`;
      message += `   üí∞ ${coin.currentPrice} BTC\n\n`;
    });
    
    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ–± –∞–Ω–æ–º–∞–ª–∏–∏
   */
  async sendAnomalySignal(signal) {
    const message = this.buildAnomalySignalMessage(signal);
    await this.sendTelegramMessage(message, { parseMode: 'HTML' });
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏
   */
  buildAnomalySignalMessage(signal) {
    const now = new Date().toLocaleString('ru-RU');
    
    let message = `üö® <b>–û–ë–ù–ê–†–£–ñ–ï–ù–ê –ê–ù–û–ú–ê–õ–ò–Ø</b>\n\n`;
    message += `üïê <b>–í—Ä–µ–º—è:</b> ${now}\n`;
    message += `üìä <b>–ú–æ–Ω–µ—Ç–∞:</b> ${signal.coin}\n`;
    message += `üîç <b>–¢–∏–ø:</b> ${signal.type}\n`;
    message += `‚ö†Ô∏è <b>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:</b> ${signal.severity}\n\n`;
    message += `üìà <b>–î–µ—Ç–∞–ª–∏:</b> ${signal.description || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}`;
    
    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendNotification(title, message, type = 'info') {
    const formattedMessage = this.buildNotificationMessage(title, message, type);
    await this.sendTelegramMessage(formattedMessage, { parseMode: 'HTML' });
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  buildNotificationMessage(title, message, type = 'info') {
    const icons = {
      info: '‚ÑπÔ∏è',
      warning: '‚ö†Ô∏è',
      error: '‚ùå',
      success: '‚úÖ'
    };
    
    const icon = icons[type] || icons.info;
    
    let formattedMessage = `${icon} <b>${title}</b>\n\n`;
    formattedMessage += `${message}\n\n`;
    formattedMessage += `üïê ${new Date().toLocaleString('ru-RU')}`;
    
    return formattedMessage;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   */
  async sendConsoleMessage(message, level = 'log') {
    const timestamp = new Date().toLocaleString('ru-RU');
    const formattedMessage = `[${timestamp}] ${message}`;
    
    switch (level) {
      case 'error':
        console.error(formattedMessage);
        break;
      case 'warn':
        console.warn(formattedMessage);
        break;
      default:
        console.log(formattedMessage);
    }
  }
}

module.exports = TelegramNotificationRepository; 