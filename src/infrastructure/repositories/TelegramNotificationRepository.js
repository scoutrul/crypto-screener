const NotificationRepository = require('../../domain/repositories/NotificationRepository');
const TelegramAdapter = require('../adapters/TelegramAdapter');
const AppConfig = require('../config/AppConfig');

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Telegram
 */
class TelegramNotificationRepository extends NotificationRepository {
  constructor() {
    super();
    
    try {
      const config = new AppConfig();
      this.adapter = new TelegramAdapter(config.telegram.botToken, config.telegram.chatId);
      this.config = config;
    } catch (error) {
      console.warn('Telegram configuration not available, using console-only mode');
      this.adapter = null;
      this.config = AppConfig.getDevelopmentConfig();
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @returns {Promise<void>}
   */
  async sendTelegramMessage(message, options = {}) {
    if (this.adapter && this.config.notifications.enableTelegram) {
      return await this.adapter.sendMessage(message, options);
    } else {
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
      await this.sendConsoleMessage(message, 'log');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É —Ä—ã–Ω–∫–∞
   * @param {Array<Coin>} coins - –ú–∞—Å—Å–∏–≤ –º–æ–Ω–µ—Ç
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  async sendMarketSummary(coins, limit = 20) {
    if (this.adapter && this.config.notifications.enableTelegram) {
      return await this.adapter.sendMarketSummary(coins, limit);
    } else {
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
      const message = this.buildMarketSummaryMessage(coins, limit);
      await this.sendConsoleMessage(message, 'log');
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π —Ä—ã–Ω–∫–∞
   * @param {Array<Coin>} coins - –ú–∞—Å—Å–∏–≤ –º–æ–Ω–µ—Ç
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  buildMarketSummaryMessage(coins, limit = 20) {
    const now = new Date().toLocaleString('ru-RU');
    const coinsToShow = coins.slice(0, limit);
    
    let message = `üìä –¢–û–ü-${coinsToShow.length} –ú–û–ù–ï–¢ –ü–û –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–ò (BTC –ø–∞—Ä—ã)\n\n`;
    message += `üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${now}\n`;
    message += `üìà –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –≤ –±–∞–∑–µ: ${coins.length}\n\n`;
    
    coinsToShow.forEach((coin, index) => {
      const rank = index + 1;
      const price = coin.getCurrentPrice().format(8);
      const change24h = coin.getPriceChangePercentage24h() ? 
        coin.getPriceChangePercentage24h().format() : 'N/A';
      const changeIcon = coin.getPriceChangePercentage24h() ? 
        (coin.getPriceChangePercentage24h().isPositive() ? 'üìà' : 
         coin.getPriceChangePercentage24h().isNegative() ? 'üìâ' : '‚û°Ô∏è') : '‚û°Ô∏è';
      
      message += `${rank}. ${coin.getName()} (${coin.getSymbol()})\n`;
      message += `   üí∞ ${price} BTC ${changeIcon} ${change24h}\n\n`;
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞
    const risingCoins = coins.filter(c => c.isPriceRising24h()).length;
    const fallingCoins = coins.filter(c => c.isPriceFalling24h()).length;
    const stableCoins = coins.length - risingCoins - fallingCoins;
    
    message += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞:\n`;
    message += `üìà –†–∞—Å—Ç—É—Ç: ${risingCoins} –º–æ–Ω–µ—Ç\n`;
    message += `üìâ –ü–∞–¥–∞—é—Ç: ${fallingCoins} –º–æ–Ω–µ—Ç\n`;
    message += `‚û°Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${stableCoins} –º–æ–Ω–µ—Ç\n\n`;
    message += `üîó –î–∞–Ω–Ω—ã–µ: CoinGecko API`;
    
    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ–± –∞–Ω–æ–º–∞–ª–∏–∏
   * @param {Object} signal - –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
   * @returns {Promise<void>}
   */
  async sendAnomalySignal(signal) {
    if (this.adapter && this.config.notifications.enableTelegram) {
      return await this.adapter.sendAnomalySignal(signal);
    } else {
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
      const message = this.buildAnomalySignalMessage(signal);
      await this.sendConsoleMessage(message, 'warn');
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ –∞–Ω–æ–º–∞–ª–∏–∏
   * @param {Object} signal - –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  buildAnomalySignalMessage(signal) {
    const now = new Date().toLocaleString('ru-RU');
    const severityIcon = signal.severity === 'high' ? 'üö®' : '‚ö†Ô∏è';
    
    let message = `${severityIcon} –°–ò–ì–ù–ê–õ –ê–ù–û–ú–ê–õ–ò–ò\n\n`;
    message += `üïê –í—Ä–µ–º—è: ${now}\n`;
    message += `ü™ô –ú–æ–Ω–µ—Ç–∞: ${signal.coin}\n`;
    message += `üìä –¢–∏–ø: ${signal.type}\n`;
    message += `üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${signal.priceChange}%\n`;
    message += `üìä –û–±—ä–µ–º: ${signal.volumeChange}\n`;
    message += `‚ö° –í–∞–∂–Ω–æ—Å—Ç—å: ${signal.severity === 'high' ? '–í—ã—Å–æ–∫–∞—è' : '–°—Ä–µ–¥–Ω—è—è'}\n\n`;
    message += `üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑`;
    
    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫
   * @param {string} messageText - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  async sendNotification(title, messageText, type = 'info') {
    if (this.adapter && this.config.notifications.enableTelegram) {
      return await this.adapter.sendNotification(title, messageText, type);
    } else {
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
      const message = this.buildNotificationMessage(title, messageText, type);
      const level = type === 'error' ? 'error' : type === 'warning' ? 'warn' : 'log';
      await this.sendConsoleMessage(message, level);
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫
   * @param {string} messageText - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  buildNotificationMessage(title, messageText, type = 'info') {
    const now = new Date().toLocaleString('ru-RU');
    const typeIcons = {
      info: '‚ÑπÔ∏è',
      warning: '‚ö†Ô∏è',
      error: '‚ùå',
      success: '‚úÖ'
    };
    
    const icon = typeIcons[type] || typeIcons.info;
    
    let message = `${icon} ${title.toUpperCase()}\n\n`;
    message += `üïê –í—Ä–µ–º—è: ${now}\n`;
    message += `üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n${messageText}\n\n`;
    message += `üîó Crypto Screener`;
    
    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns {Promise<void>}
   */
  async sendConsoleMessage(message, level = 'log') {
    if (this.config.notifications.enableConsoleLogging) {
      const timestamp = new Date().toISOString();
      const prefix = `[${timestamp}] [${level.toUpperCase()}]`;
      
      switch (level) {
        case 'warn':
          console.warn(`${prefix} ${message}`);
          break;
        case 'error':
          console.error(`${prefix} ${message}`);
          break;
        default:
          console.log(`${prefix} ${message}`);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   * @returns {Promise<boolean>}
   */
  async isAvailable() {
    if (this.adapter && this.config.notifications.enableTelegram) {
      return await this.adapter.isAvailable();
    }
    return this.config.notifications.enableConsoleLogging;
  }
}

module.exports = TelegramNotificationRepository; 