const fs = require('fs');
const path = require('path');
const { BinanceWebSocketProvider } = require('../src/infrastructure/adapters/BinanceWebSocketProvider.js');
// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async function sendTelegramMessage(message) {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    console.log('üì± TELEGRAM:', message);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π
  volumeThreshold: 3, // –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ
  priceThreshold: 0.5, // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞
  entryConfirmationTFs: 2, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
  stopLossPercent: 1, // –°—Ç–æ–ø-–ª–æ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  takeProfitPercent: 3, // –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  virtualDeposit: 1000, // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –≤ USDT
  
  // –¢–∞–π–º–∞—É—Ç—ã
  cooldownPeriod: 4, // –ü–µ—Ä–∏–æ–¥ –∫—É–ª–¥–∞—É–Ω–∞ –≤ TF (4 TF = 1 —á–∞—Å)
  
  // WebSocket –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  useWebSocket: true, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSocket –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
  websocketIntervals: {
    watchlist: '1m', // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è watchlist (1 –º–∏–Ω—É—Ç–∞)
    tradeList: '1m'  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è trade list (1 –º–∏–Ω—É—Ç–∞)
  }
};

/**
 * –°–∏—Å—Ç–µ–º–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç WebSocket –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (watchlist –∏ trade list)
 * –∏ REST API –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π)
 */
class VirtualTradingSystemWebSocket {
  constructor() {
    // –î–∞–Ω–Ω—ã–µ
    this.filteredCoins = [];
    this.pendingAnomalies = new Map(); // watchlist
    this.activeTrades = new Map(); // trade list
    this.tradeHistory = [];
    this.tradingStatistics = {};
    this.anomalyCooldowns = new Map();
    
    // WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    this.wsProvider = null;
    this.wsConnected = false;
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è REST API (–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫)
    this.anomalyCheckInterval = null;
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this.sendTelegramMessage = sendTelegramMessage;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.systemStartTime = new Date();
    this.lastStatisticsUpdate = new Date();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
   */
  async initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å WebSocket...');
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    await this.loadFilteredCoins();
    await this.loadPendingAnomalies();
    await this.loadActiveTrades();
    await this.loadTradeHistory();
    await this.loadTradingStatistics();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    if (CONFIG.useWebSocket) {
      await this.initializeWebSocket();
    }
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  async initializeWebSocket() {
    console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...');
    
    this.wsProvider = new BinanceWebSocketProvider();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.wsProvider.onConnect(() => {
      console.log('üéâ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!');
      this.wsConnected = true;
      this.subscribeToWatchlistStreams();
      this.subscribeToTradeListStreams();
    });
    
    this.wsProvider.onDisconnect((code, reason) => {
      console.log(`üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: ${code} - ${reason}`);
      this.wsConnected = false;
    });
    
    this.wsProvider.onError((error) => {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
    });
    
    // –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket
    await this.wsProvider.connect();
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–æ–∫–∏ –¥–ª—è watchlist
   */
  subscribeToWatchlistStreams() {
    if (!this.wsConnected || this.pendingAnomalies.size === 0) {
      return;
    }
    
    const streams = [];
    
    this.pendingAnomalies.forEach((anomaly, symbol) => {
      streams.push({
        symbol: symbol.replace('/USDT', ''),
        interval: CONFIG.websocketIntervals.watchlist,
        callback: (symbol, candle) => this.handleWatchlistKline(symbol, candle)
      });
    });
    
    if (streams.length > 0) {
      this.wsProvider.subscribeToMultipleStreams(streams);
      console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${streams.length} –ø–æ—Ç–æ–∫–æ–≤ watchlist`);
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–æ–∫–∏ –¥–ª—è trade list
   */
  subscribeToTradeListStreams() {
    if (!this.wsConnected || this.activeTrades.size === 0) {
      return;
    }
    
    const streams = [];
    
    this.activeTrades.forEach((trade, symbol) => {
      streams.push({
        symbol: symbol.replace('/USDT', ''),
        interval: CONFIG.websocketIntervals.tradeList,
        callback: (symbol, candle) => this.handleTradeListKline(symbol, candle)
      });
    });
    
    if (streams.length > 0) {
      this.wsProvider.subscribeToMultipleStreams(streams);
      console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${streams.length} –ø–æ—Ç–æ–∫–æ–≤ trade list`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–µ—á–∏ –¥–ª—è watchlist
   */
  handleWatchlistKline(symbol, candle) {
    const fullSymbol = `${symbol}/USDT`;
    const anomaly = this.pendingAnomalies.get(fullSymbol);
    
    if (!anomaly) {
      return;
    }
    
    console.log(`üìä [WATCHLIST] ${fullSymbol} - –ù–æ–≤–∞—è —Å–≤–µ—á–∞: $${candle.close}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞
    this.checkEntryConfirmation(fullSymbol, anomaly, candle);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç watchlist
    this.checkWatchlistTimeout(fullSymbol, anomaly);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–µ—á–∏ –¥–ª—è trade list
   */
  handleTradeListKline(symbol, candle) {
    const fullSymbol = `${symbol}/USDT`;
    const trade = this.activeTrades.get(fullSymbol);
    
    if (!trade) {
      return;
    }
    
    console.log(`üìä [TRADE LIST] ${fullSymbol} - –ù–æ–≤–∞—è —Å–≤–µ—á–∞: $${candle.close}`);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
    trade.lastPrice = candle.close;
    trade.lastUpdateTime = new Date().toISOString();
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
    this.checkTradeExitConditions(trade, candle.close);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –¥–ª—è watchlist
   */
  async checkEntryConfirmation(symbol, anomaly, currentCandle) {
    const currentPrice = currentCandle.close;
    const anomalyPrice = anomaly.anomalyPrice;
    const tradeType = anomaly.tradeType;
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
    const priceChange = ((currentPrice - anomalyPrice) / anomalyPrice) * 100;
    const expectedDirection = tradeType === 'Long' ? 1 : -1;
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    if (Math.abs(priceChange) >= CONFIG.priceThreshold && 
        Math.sign(priceChange) === expectedDirection) {
      
      console.log(`‚úÖ ${symbol} - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞! –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${priceChange.toFixed(2)}%`);
      
      // –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É
      const trade = this.createVirtualTrade(symbol, tradeType, currentPrice, anomaly.anomalyId);
      this.activeTrades.set(symbol, trade);
      
      // –£–¥–∞–ª–∏—Ç—å –∏–∑ watchlist
      this.pendingAnomalies.delete(symbol);
      
      // –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç WebSocket –ø–æ—Ç–æ–∫–∞
      if (this.wsProvider) {
        this.wsProvider.unsubscribeFromKline(symbol.replace('/USDT', ''));
      }
      
      // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–æ–∫ –¥–ª—è trade list
      if (this.wsProvider && this.wsConnected) {
        this.wsProvider.subscribeToKline(
          symbol.replace('/USDT', ''),
          CONFIG.websocketIntervals.tradeList,
          (symbol, candle) => this.handleTradeListKline(symbol, candle)
        );
      }
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await this.sendNewTradeNotification(trade);
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      await this.saveActiveTrades();
      await this.savePendingAnomalies();
      
    } else {
      console.log(`‚è≥ ${symbol} - –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${priceChange.toFixed(2)}%`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç watchlist
   */
  checkWatchlistTimeout(symbol, anomaly) {
    const watchlistTime = new Date(anomaly.watchlistTime || anomaly.anomalyTime);
    const timeInWatchlist = Date.now() - watchlistTime.getTime();
    const minutesInWatchlist = Math.floor(timeInWatchlist / (15 * 60 * 1000));
    
    if (minutesInWatchlist >= CONFIG.cooldownPeriod) {
      console.log(`‚è∞ ${symbol} –≤ watchlist —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (${minutesInWatchlist} TF), —É–¥–∞–ª—è–µ–º`);
      
      // –£–¥–∞–ª–∏—Ç—å –∏–∑ watchlist
      this.pendingAnomalies.delete(symbol);
      
      // –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç WebSocket –ø–æ—Ç–æ–∫–∞
      if (this.wsProvider) {
        this.wsProvider.unsubscribeFromKline(symbol.replace('/USDT', ''));
      }
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      this.savePendingAnomalies();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏
   */
  checkTradeExitConditions(trade, currentPrice) {
    const { symbol, type, entryPrice, stopLoss, takeProfit } = trade;
    
    let shouldClose = false;
    let reason = '';
    let profitLoss = 0;
    
    if (type === 'Long') {
      if (currentPrice <= stopLoss) {
        shouldClose = true;
        reason = 'Stop Loss';
        profitLoss = ((currentPrice - entryPrice) / entryPrice) * 100;
      } else if (currentPrice >= takeProfit) {
        shouldClose = true;
        reason = 'Take Profit';
        profitLoss = ((currentPrice - entryPrice) / entryPrice) * 100;
      }
    } else { // Short
      if (currentPrice >= stopLoss) {
        shouldClose = true;
        reason = 'Stop Loss';
        profitLoss = ((entryPrice - currentPrice) / entryPrice) * 100;
      } else if (currentPrice <= takeProfit) {
        shouldClose = true;
        reason = 'Take Profit';
        profitLoss = ((entryPrice - currentPrice) / entryPrice) * 100;
      }
    }
    
    if (shouldClose) {
      console.log(`üî¥ ${symbol} - –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏: ${reason} (${profitLoss.toFixed(2)}%)`);
      this.closeTrade(trade, currentPrice, reason, profitLoss);
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
   */
  async start() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å WebSocket...');
    
    await this.initialize();
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ (–ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π) —á–µ—Ä–µ–∑ REST API
    await this.runAnomalyCheck();
    
    this.anomalyCheckInterval = setInterval(async () => {
      await this.runAnomalyCheck();
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞');
    console.log('   üîç –ü–æ—Ç–æ–∫ 1 (–∞–Ω–æ–º–∞–ª–∏–∏): –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (REST API)');
    console.log('   ‚è≥ –ü–æ—Ç–æ–∫ 2 (watchlist): WebSocket –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    console.log('   üìä –ü–æ—Ç–æ–∫ 3 (trade list): WebSocket –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
   */
  async stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
    
    if (this.anomalyCheckInterval) {
      clearInterval(this.anomalyCheckInterval);
      this.anomalyCheckInterval = null;
    }
    
    if (this.wsProvider) {
      this.wsProvider.disconnect();
    }
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
  // (loadFilteredCoins, loadPendingAnomalies, createVirtualTrade, etc.)

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
   */
  async loadFilteredCoins() {
    try {
      const data = fs.readFileSync(path.join(__dirname, '../data/filtered-coins.json'), 'utf8');
      this.filteredCoins = JSON.parse(data);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.filteredCoins.length} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç:', error.message);
      this.filteredCoins = [];
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å pending anomalies (watchlist)
   */
  async loadPendingAnomalies() {
    try {
      const data = fs.readFileSync(path.join(__dirname, '../data/pending-anomalies.json'), 'utf8');
      const anomalies = JSON.parse(data);
      
      this.pendingAnomalies.clear();
      anomalies.forEach(anomaly => {
        this.pendingAnomalies.set(anomaly.symbol, anomaly);
      });
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.pendingAnomalies.size} pending anomalies`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ pending anomalies:', error.message);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
   */
  async loadActiveTrades() {
    try {
      const data = fs.readFileSync(path.join(__dirname, '../data/active-trades.json'), 'utf8');
      const trades = JSON.parse(data);
      
      this.activeTrades.clear();
      trades.forEach(trade => {
        this.activeTrades.set(trade.symbol, trade);
      });
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.activeTrades.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:', error.message);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
   */
  async loadTradeHistory() {
    try {
      const data = fs.readFileSync(path.join(__dirname, '../data/trade-history.json'), 'utf8');
      this.tradeHistory = JSON.parse(data);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.tradeHistory.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫:', error.message);
      this.tradeHistory = [];
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
   */
  async loadTradingStatistics() {
    try {
      const data = fs.readFileSync(path.join(__dirname, '../data/trading-statistics.json'), 'utf8');
      this.tradingStatistics = JSON.parse(data);
      console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏:', error.message);
      this.tradingStatistics = {
        lastUpdated: new Date().toISOString(),
        totalTrades: 0,
        winningTrades: 0,
        losingTrades: 0,
        winRate: 0,
        totalProfit: 0,
        averageProfit: 0,
        bestTrade: null,
        worstTrade: null,
        longestTrade: null,
        shortestTrade: null,
        systemStartTime: new Date().toISOString()
      };
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å pending anomalies
   */
  async savePendingAnomalies() {
    try {
      const anomalies = Array.from(this.pendingAnomalies.values());
      fs.writeFileSync(
        path.join(__dirname, '../data/pending-anomalies.json'),
        JSON.stringify(anomalies, null, 2)
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è pending anomalies:', error.message);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
   */
  async saveActiveTrades() {
    try {
      const trades = Array.from(this.activeTrades.values());
      fs.writeFileSync(
        path.join(__dirname, '../data/active-trades.json'),
        JSON.stringify(trades, null, 2)
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É
   */
  createVirtualTrade(symbol, tradeType, entryPrice, anomalyId = null) {
    const stopLoss = tradeType === 'Long' 
      ? entryPrice * (1 - CONFIG.stopLossPercent / 100)
      : entryPrice * (1 + CONFIG.stopLossPercent / 100);
    
    const takeProfit = tradeType === 'Long'
      ? entryPrice * (1 + CONFIG.takeProfitPercent / 100)
      : entryPrice * (1 - CONFIG.takeProfitPercent / 100);
    
    const trade = {
      id: `${symbol}_${Date.now()}`,
      anomalyId: anomalyId || `${symbol.replace('/USDT', '')}_${Date.now()}`,
      symbol: symbol,
      type: tradeType,
      entryPrice: entryPrice,
      stopLoss: stopLoss,
      takeProfit: takeProfit,
      entryTime: new Date().toISOString(),
      status: 'open',
      virtualAmount: CONFIG.virtualDeposit,
      lastPrice: entryPrice,
      lastUpdateTime: new Date().toISOString()
    };
    
    return trade;
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É
   */
  async closeTrade(trade, exitPrice, reason, profitLoss) {
    trade.exitPrice = exitPrice;
    trade.exitTime = new Date().toISOString();
    trade.status = 'closed';
    trade.reason = reason;
    trade.profitLoss = profitLoss;
    
    // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.tradeHistory.push(trade);
    
    // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    this.activeTrades.delete(trade.symbol);
    
    // –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç WebSocket –ø–æ—Ç–æ–∫–∞
    if (this.wsProvider) {
      this.wsProvider.unsubscribeFromKline(trade.symbol.replace('/USDT', ''));
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.updateTradingStatistics();
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.sendTradeNotification(trade);
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    await this.saveActiveTrades();
    await this.saveTradeHistory();
    await this.saveTradingStatistics();
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
   */
  async sendNewTradeNotification(trade) {
    const message = this.createNewTradeMessage(trade);
    await this.sendTelegramMessage(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏
   */
  async sendTradeNotification(trade) {
    const message = this.createTradeNotificationMessage(trade);
    await this.sendTelegramMessage(message);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
   */
  createNewTradeMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const emoji = trade.type === 'Long' ? 'üü¢' : 'üî¥';
    const tradeTime = new Date(trade.entryTime).toLocaleString('ru-RU');
    
    return `üéØ –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê: ${symbol} ‚Üí ${trade.type} ${emoji}
üÜî ID: ${trade.anomalyId || trade.id || 'N/A'}
üïê –í—Ä–µ–º—è: ${tradeTime}

üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
üõë –°—Ç–æ–ø: $${trade.stopLoss.toFixed(6)}
üéØ –¢–µ–π–∫: $${trade.takeProfit.toFixed(6)}

üí° –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $${trade.virtualAmount}`;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏
   */
  createTradeNotificationMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const emoji = trade.profitLoss >= 0 ? 'üü¢' : 'üî¥';
    const closeTime = new Date(trade.exitTime).toLocaleString('ru-RU');
    
    return `${symbol} ‚Üí ${trade.type} ${emoji} –ó–ê–ö–†–´–¢–ê
üÜî ID: ${trade.anomalyId || trade.id || 'N/A'}
üïê –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: ${closeTime}

üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
üí∞ –í—ã—Ö–æ–¥: $${trade.exitPrice.toFixed(6)}
üìä –ü—Ä–∏–±—ã–ª—å: ${trade.profitLoss >= 0 ? '+' : ''}${trade.profitLoss.toFixed(2)}%
üéØ –ü—Ä–∏—á–∏–Ω–∞: ${trade.reason}`;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
   */
  updateTradingStatistics() {
    const totalTrades = this.tradeHistory.length;
    const winningTrades = this.tradeHistory.filter(t => t.profitLoss > 0).length;
    const losingTrades = this.tradeHistory.filter(t => t.profitLoss < 0).length;
    const winRate = totalTrades > 0 ? (winningTrades / totalTrades) * 100 : 0;
    
    const totalProfit = this.tradeHistory.reduce((sum, t) => sum + t.profitLoss, 0);
    const averageProfit = totalTrades > 0 ? totalProfit / totalTrades : 0;
    
    this.tradingStatistics = {
      lastUpdated: new Date().toISOString(),
      totalTrades,
      winningTrades,
      losingTrades,
      winRate,
      totalProfit,
      averageProfit,
      systemStartTime: this.systemStartTime.toISOString()
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
   */
  async saveTradeHistory() {
    try {
      fs.writeFileSync(
        path.join(__dirname, '../data/trade-history.json'),
        JSON.stringify(this.tradeHistory, null, 2)
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫:', error.message);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
   */
  async saveTradingStatistics() {
    try {
      fs.writeFileSync(
        path.join(__dirname, '../data/trading-statistics.json'),
        JSON.stringify(this.tradingStatistics, null, 2)
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏:', error.message);
    }
  }

  /**
   * –ü–æ—Ç–æ–∫ 1: –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π (REST API)
   */
  async runAnomalyCheck() {
    console.log('üîç [–ü–û–¢–û–ö 1] –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç...');
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π —á–µ—Ä–µ–∑ REST API
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${this.filteredCoins.length} –º–æ–Ω–µ—Ç –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏...`);
    
    // –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∞–Ω–æ–º–∞–ª–∏—é
    if (this.pendingAnomalies.size === 0 && this.activeTrades.size === 0) {
      console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∞–Ω–æ–º–∞–ª–∏–∏...');
      const testAnomaly = {
        symbol: 'BTC/USDT',
        anomalyId: 'BTC_TEST_' + Date.now(),
        tradeType: 'Long',
        anomalyTime: new Date().toISOString(),
        watchlistTime: new Date().toISOString(),
        anomalyCandleIndex: 6,
        anomalyPrice: 50000,
        historicalPrice: 49000
      };
      
      this.pendingAnomalies.set(testAnomaly.symbol, testAnomaly);
      await this.savePendingAnomalies();
      
      // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ WebSocket –ø–æ—Ç–æ–∫
      if (this.wsProvider && this.wsConnected) {
        this.wsProvider.subscribeToKline(
          'BTCUSDT',
          CONFIG.websocketIntervals.watchlist,
          (symbol, candle) => this.handleWatchlistKline(symbol, candle)
        );
      }
    }
    
    console.log('‚úÖ [–ü–û–¢–û–ö 1] –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  showStatistics() {
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:');
    console.log('=' .repeat(50));
    
    // WebSocket —Å—Ç–∞—Ç—É—Å
    if (this.wsProvider) {
      const wsStatus = this.wsProvider.getConnectionStatus();
      console.log(`üîå WebSocket: ${wsStatus.isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}`);
      console.log(`üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${wsStatus.activeSubscriptions}`);
    }
    
    // –°–¥–µ–ª–∫–∏
    console.log(`üìã –í watchlist: ${this.pendingAnomalies.size}`);
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}`);
    console.log(`üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${this.tradeHistory.length}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (this.tradingStatistics.totalTrades > 0) {
      console.log(`üéØ –í–∏–Ω—Ä–µ–π—Ç: ${this.tradingStatistics.winRate.toFixed(2)}%`);
      console.log(`üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${this.tradingStatistics.totalProfit.toFixed(2)}%`);
      console.log(`üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${this.tradingStatistics.averageProfit.toFixed(2)}%`);
    }
    
    console.log('=' .repeat(50));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = { VirtualTradingSystemWebSocket, CONFIG }; 