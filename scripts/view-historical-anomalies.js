/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π
 */

const fs = require('fs').promises;
const path = require('path');

async function viewHistoricalAnomalies(dayString = null) {
  try {
    // –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è
    if (!dayString) {
      const now = new Date();
      dayString = now.toISOString().split('T')[0]; // YYYY-MM-DD
    }
    
    const filePath = path.join(__dirname, '..', 'data', `anomalies_${dayString}.json`);
    
    console.log(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π –∑–∞ ${dayString}...`);
    console.log(`üìÅ –§–∞–π–ª: ${filePath}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    try {
      await fs.access(filePath);
    } catch (error) {
      console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return;
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    const data = await fs.readFile(filePath, 'utf8');
    const parsed = JSON.parse(data);
    
    if (parsed.meta && parsed.anomalies) {
      // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
      const { meta, anomalies } = parsed;
      
      console.log('\nüìä –ú–ï–¢–ê-–°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
      console.log(`üìÖ –î–∞—Ç–∞: ${meta.dayStats.date}`);
      console.log(`üìã –í—Å–µ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π: ${meta.dayStats.totalAnomalies}`);
      console.log(`üìà Long –∞–Ω–æ–º–∞–ª–∏–∏: ${meta.dayStats.longAnomaliesCount}`);
      console.log(`üìâ Short –∞–Ω–æ–º–∞–ª–∏–∏: ${meta.dayStats.shortAnomaliesCount}`);
      console.log(`üìä –°—Ä–µ–¥–Ω–∏–π leverage: ${meta.dayStats.averageVolumeLeverage}x`);
      console.log(`‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(meta.dayStats.lastUpdated).toLocaleString('ru-RU')}`);
      
      if (meta.dayStats.topVolumeLeverages.length > 0) {
        console.log('\nüèÜ –¢–û–ü-10 –ü–û LEVERAGE:');
        meta.dayStats.topVolumeLeverages.forEach((item, index) => {
          console.log(`  ${index + 1}. ${item.symbol} - ${item.leverage}x`);
        });
      }
      
      console.log('\nüìã –°–ü–ò–°–û–ö –ê–ù–û–ú–ê–õ–ò–ô:');
      if (anomalies.length === 0) {
        console.log('  –ù–µ—Ç –∞–Ω–æ–º–∞–ª–∏–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å');
      } else {
        anomalies.forEach((anomaly, index) => {
          const time = new Date(anomaly.anomalyTime).toLocaleString('ru-RU');
          const priceChange = ((anomaly.anomalyPrice - anomaly.historicalPrice) / anomaly.historicalPrice * 100).toFixed(2);
          const changeSign = priceChange >= 0 ? '+' : '';
          
          console.log(`  ${index + 1}. ${anomaly.symbol}`);
          console.log(`     üïê –í—Ä–µ–º—è: ${time}`);
          console.log(`     üìä –¢–∏–ø: ${anomaly.tradeType}`);
          console.log(`     üí∞ –¶–µ–Ω–∞: $${anomaly.anomalyPrice.toFixed(6)}`);
          console.log(`     üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeSign}${priceChange}%`);
          console.log(`     üìä –û–±—ä–µ–º: ${anomaly.volumeLeverage}x`);
          console.log(`     üÜî ID: ${anomaly.anomalyId}`);
          console.log('');
        });
      }
      
    } else if (Array.isArray(parsed)) {
      // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
      console.log('\nüìã –°–ü–ò–°–û–ö –ê–ù–û–ú–ê–õ–ò–ô (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞):');
      if (parsed.length === 0) {
        console.log('  –ù–µ—Ç –∞–Ω–æ–º–∞–ª–∏–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å');
      } else {
        parsed.forEach((anomaly, index) => {
          const time = new Date(anomaly.anomalyTime).toLocaleString('ru-RU');
          console.log(`  ${index + 1}. ${anomaly.symbol} - ${anomaly.tradeType} (${anomaly.volumeLeverage}x) - ${time}`);
        });
      }
    } else {
      console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error.message);
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const dayArg = process.argv[2];

if (require.main === module) {
  viewHistoricalAnomalies(dayArg).catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { viewHistoricalAnomalies }; 