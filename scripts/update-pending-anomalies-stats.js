const fs = require('fs').promises;
const path = require('path');

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ pending-anomalies.json
 */
class PendingAnomaliesStatsUpdater {
  constructor() {
    this.filePath = path.join(__dirname, '..', 'data', 'pending-anomalies.json');
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
   */
  async loadData() {
    try {
      const data = await fs.readFile(this.filePath, 'utf8');
      const parsed = JSON.parse(data);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
      if (parsed.meta && parsed.anomalies) {
        return parsed;
      } else if (Array.isArray(parsed)) {
        // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é
        return this.convertToNewStructure(parsed);
      } else {
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return this.createNewStructure();
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –Ω–æ–≤—É—é
   */
  convertToNewStructure(anomalies) {
    const now = new Date().toISOString();
    const sessionStartTime = anomalies.length > 0 
      ? anomalies[0].watchlistTime 
      : now;

    return {
      meta: {
        sessionStats: this.calculateSessionStats(anomalies, sessionStartTime),
        fileInfo: {
          version: "2.0",
          description: "Pending anomalies with session statistics",
          createdAt: sessionStartTime,
          lastModified: now
        }
      },
      anomalies: anomalies
    };
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
   */
  createNewStructure() {
    const now = new Date().toISOString();
    return {
      meta: {
        sessionStats: {
          sessionStartTime: now,
          lastUpdated: now,
          totalAnomaliesProcessed: 0,
          currentAnomaliesCount: 0,
          convertedToTrades: 0,
          removedFromWatchlist: 0,
          averageVolumeLeverage: 0,
          averageWatchlistTimeMinutes: 0,
          longAnomaliesCount: 0,
          shortAnomaliesCount: 0,
          consolidatedAnomaliesCount: 0,
          unconsolidatedAnomaliesCount: 0,
          topVolumeLeverages: [],
          conversionRate: 0.0,
          sessionDurationMinutes: 0
        },
        fileInfo: {
          version: "2.0",
          description: "Pending anomalies with session statistics",
          createdAt: now,
          lastModified: now
        }
      },
      anomalies: []
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
   */
  calculateSessionStats(anomalies, sessionStartTime) {
    const now = new Date();
    const sessionStart = new Date(sessionStartTime);
    const sessionDurationMinutes = Math.floor((now - sessionStart) / (1000 * 60));

    // –ë–∞–∑–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
    const longAnomalies = anomalies.filter(a => a.tradeType === 'Long');
    const shortAnomalies = anomalies.filter(a => a.tradeType === 'Short');
    const consolidatedAnomalies = anomalies.filter(a => a.isConsolidated === true);
    const unconsolidatedAnomalies = anomalies.filter(a => a.isConsolidated === false);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä–µ–º–∞–º
    const volumeLeverages = anomalies.map(a => a.volumeLeverage).filter(v => v && v > 0);
    const averageVolumeLeverage = volumeLeverages.length > 0 
      ? (volumeLeverages.reduce((sum, v) => sum + v, 0) / volumeLeverages.length).toFixed(1)
      : 0;

    // –í—Ä–µ–º—è –≤ watchlist
    const watchlistTimes = anomalies.map(anomaly => {
      const watchlistTime = new Date(anomaly.watchlistTime);
      return Math.floor((now - watchlistTime) / (1000 * 60));
    });
    
    const averageWatchlistTimeMinutes = watchlistTimes.length > 0
      ? Math.floor(watchlistTimes.reduce((sum, time) => sum + time, 0) / watchlistTimes.length)
      : 0;

    // –¢–æ–ø leverage
    const topVolumeLeverages = volumeLeverages
      .sort((a, b) => b - a)
      .slice(0, 5);

    return {
      sessionStartTime: sessionStartTime,
      lastUpdated: now.toISOString(),
      totalAnomaliesProcessed: anomalies.length,
      currentAnomaliesCount: anomalies.length,
      convertedToTrades: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∏–∑–≤–Ω–µ
      removedFromWatchlist: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∏–∑–≤–Ω–µ
      averageVolumeLeverage: parseFloat(averageVolumeLeverage),
      averageWatchlistTimeMinutes: averageWatchlistTimeMinutes,
      longAnomaliesCount: longAnomalies.length,
      shortAnomaliesCount: shortAnomalies.length,
      consolidatedAnomaliesCount: consolidatedAnomalies.length,
      unconsolidatedAnomaliesCount: unconsolidatedAnomalies.length,
      topVolumeLeverages: topVolumeLeverages,
      conversionRate: 0.0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∏–∑–≤–Ω–µ
      sessionDurationMinutes: sessionDurationMinutes
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  async updateStats(additionalStats = {}) {
    try {
      const data = await this.loadData();
      
      // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∞-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const newSessionStats = {
        ...data.meta.sessionStats,
        ...additionalStats,
        lastUpdated: new Date().toISOString()
      };

      // –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π
      const recalculatedStats = this.calculateSessionStats(data.anomalies, data.meta.sessionStats.sessionStartTime);
      
      // –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
      data.meta.sessionStats = {
        ...recalculatedStats,
        ...additionalStats,
        lastUpdated: new Date().toISOString()
      };

      // –û–±–Ω–æ–≤–∏—Ç—å fileInfo
      data.meta.fileInfo.lastModified = new Date().toISOString();

      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await fs.writeFile(this.filePath, JSON.stringify(data, null, 2));
      
      console.log('‚úÖ –ú–µ—Ç–∞-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  async addAnomaly(anomaly) {
    try {
      const data = await this.loadData();
      
      // –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é
      data.anomalies.push(anomaly);
      
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.updateStats({
        totalAnomaliesProcessed: data.meta.sessionStats.totalAnomaliesProcessed + 1
      });
      
      console.log(`‚úÖ –ê–Ω–æ–º–∞–ª–∏—è ${anomaly?.symbol || 'Unknown'} –¥–æ–±–∞–≤–ª–µ–Ω–∞`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–∏:', error.message);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  async removeAnomaly(symbol, reason = 'removed') {
    try {
      const data = await this.loadData();
      
      // –ù–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é
      const index = data.anomalies.findIndex(a => a.symbol === symbol);
      if (index === -1) {
        throw new Error(`–ê–Ω–æ–º–∞–ª–∏—è ${symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
      
      const removedAnomaly = data.anomalies.splice(index, 1)[0];
      
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const additionalStats = {
        removedFromWatchlist: data.meta.sessionStats.removedFromWatchlist + 1
      };
      
      if (reason === 'converted') {
        additionalStats.convertedToTrades = data.meta.sessionStats.convertedToTrades + 1;
      }
      
      await this.updateStats(additionalStats);
      
      console.log(`‚úÖ –ê–Ω–æ–º–∞–ª–∏—è ${symbol} —É–¥–∞–ª–µ–Ω–∞ (${reason})`);
      return removedAnomaly;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–∏:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  async getCurrentStats() {
    try {
      const data = await this.loadData();
      return data.meta.sessionStats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      return null;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  async showCurrentStats() {
    try {
      const stats = await this.getCurrentStats();
      if (!stats) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        return;
      }

      console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò WATCHLIST:\n');
      console.log(`üïê –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏: ${new Date(stats.sessionStartTime).toLocaleString('ru-RU')}`);
      console.log(`üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(stats.lastUpdated).toLocaleString('ru-RU')}`);
      console.log(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: ${stats.sessionDurationMinutes} –º–∏–Ω\n`);
      
      console.log(`üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
      console.log(`   üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.totalAnomaliesProcessed}`);
      console.log(`   üìã –¢–µ–∫—É—â–∏—Ö –≤ watchlist: ${stats.currentAnomaliesCount}`);
      console.log(`   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–¥–µ–ª–∫–∏: ${stats.convertedToTrades}`);
      console.log(`   ‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ watchlist: ${stats.removedFromWatchlist}\n`);
      
      console.log(`üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:`);
      console.log(`   üü¢ Long: ${stats.longAnomaliesCount}`);
      console.log(`   üî¥ Short: ${stats.shortAnomaliesCount}`);
      console.log(`   ‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${stats.consolidatedAnomaliesCount}`);
      console.log(`   ‚è≥ –ù–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${stats.unconsolidatedAnomaliesCount}\n`);
      
      console.log(`üìà –ú–ï–¢–†–ò–ö–ò:`);
      console.log(`   üìä –°—Ä–µ–¥–Ω–∏–π leverage: ${stats.averageVolumeLeverage}x`);
      console.log(`   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ watchlist: ${stats.averageWatchlistTimeMinutes} –º–∏–Ω`);
      console.log(`   üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stats.conversionRate}%\n`);
      
      if (stats.topVolumeLeverages.length > 0) {
        console.log(`üèÜ –¢–û–ü LEVERAGE:`);
        stats.topVolumeLeverages.forEach((leverage, index) => {
          console.log(`   ${index + 1}. ${leverage.toFixed(1)}x`);
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = PendingAnomaliesStatsUpdater;

// –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã
if (require.main === module) {
  const updater = new PendingAnomaliesStatsUpdater();
  
  const args = process.argv.slice(2);
  const command = args[0];
  
  switch (command) {
    case 'update':
      updater.updateStats();
      break;
    case 'show':
      updater.showCurrentStats();
      break;
    case 'convert':
      const symbol = args[1];
      if (symbol) {
        updater.removeAnomaly(symbol, 'converted');
      } else {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª: node scripts/update-pending-anomalies-stats.js convert SYMBOL');
      }
      break;
    case 'remove':
      const symbolToRemove = args[1];
      if (symbolToRemove) {
        updater.removeAnomaly(symbolToRemove, 'removed');
      } else {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª: node scripts/update-pending-anomalies-stats.js remove SYMBOL');
      }
      break;
    default:
      console.log('üìä –£—Ç–∏–ª–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ pending-anomalies.json\n');
      console.log('–ö–æ–º–∞–Ω–¥—ã:');
      console.log('  node scripts/update-pending-anomalies-stats.js update    - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      console.log('  node scripts/update-pending-anomalies-stats.js show      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      console.log('  node scripts/update-pending-anomalies-stats.js convert SYMBOL - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–¥–µ–ª–∫—É');
      console.log('  node scripts/update-pending-anomalies-stats.js remove SYMBOL - –£–¥–∞–ª–∏—Ç—å –∏–∑ watchlist');
      break;
  }
} 