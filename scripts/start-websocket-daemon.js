const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å WebSocket –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
 * –°–æ–∑–¥–∞–µ—Ç daemon –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
 */
function startWebSocketDaemon() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –í –§–û–ù–û–í–û–ú –†–ï–ñ–ò–ú–ï (DAEMON)');
  console.log('=' .repeat(50));
  
  // –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–∫—Ä–∏–ø—Ç—É
  const scriptPath = path.join(__dirname, 'start-websocket-system.js');
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(scriptPath)) {
    console.error('‚ùå –§–∞–π–ª start-websocket-system.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    process.exit(1);
  }
  
  // –°–æ–∑–¥–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª
  const logDir = path.join(__dirname, '../logs');
  if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
  }
  
  const logFile = path.join(logDir, `websocket-system-${new Date().toISOString().split('T')[0]}.log`);
  const errorFile = path.join(logDir, `websocket-system-error-${new Date().toISOString().split('T')[0]}.log`);
  
  console.log(`üìù –õ–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤: ${logFile}`);
  console.log(`‚ùå –û—à–∏–±–∫–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤: ${errorFile}`);
  
  // –°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
  const logStream = fs.createWriteStream(logFile, { flags: 'a' });
  const errorStream = fs.createWriteStream(errorFile, { flags: 'a' });
  
  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
  const child = spawn('node', [scriptPath], {
    detached: true,
    stdio: ['ignore', 'pipe', 'pipe']
  });
  
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥
  child.stdout.pipe(logStream);
  child.stderr.pipe(errorStream);
  
  // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  child.stdout.on('data', (data) => {
    console.log(`[SYSTEM] ${data.toString().trim()}`);
  });
  
  child.stderr.on('data', (data) => {
    console.error(`[ERROR] ${data.toString().trim()}`);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  child.on('close', (code) => {
    console.log(`üõë –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
    logStream.end();
    errorStream.end();
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  child.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
    logStream.end();
    errorStream.end();
    process.exit(1);
  });
  
  // –û—Ç—Å–æ–µ–¥–∏–Ω–∏—Ç—å –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
  child.unref();
  
  console.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (PID: ${child.pid})`);
  console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npm run stop:websocket');
  console.log('üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npm run logs:websocket');
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å PID –≤ —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const pidFile = path.join(__dirname, '../websocket-system.pid');
  fs.writeFileSync(pidFile, child.pid.toString());
  console.log(`üìÑ PID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${pidFile}`);
}

// –ó–∞–ø—É—Å–∫ daemon
startWebSocketDaemon(); 