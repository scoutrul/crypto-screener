/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
 */

const fs = require('fs').promises;
const path = require('path');

async function viewExtendedStatistics() {
  try {
    console.log('üìä –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò\n');

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const filename = path.join(__dirname, '..', 'data', 'trading-statistics.json');
    const data = await fs.readFile(filename, 'utf8');
    const stats = JSON.parse(data);

    console.log(`üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}`);
    console.log(`‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades} üü¢`);
    console.log(`‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades} üî¥`);
    console.log(`‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate}%`);
    console.log(`‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats.totalProfit.toFixed(2)}%`);
    console.log(`‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${stats.averageProfit}%`);

    if (stats.bestTrade) {
      console.log(`\nüèÜ –õ–£–ß–®–ê–Ø –°–î–ï–õ–ö–ê:`);
      console.log(`‚Ä¢ –°–∏–º–≤–æ–ª: ${stats.bestTrade.symbol}`);
      console.log(`‚Ä¢ –¢–∏–ø: ${stats.bestTrade.type}`);
      console.log(`‚Ä¢ –ü—Ä–∏–±—ã–ª—å: +${stats.bestTrade.profitLoss.toFixed(2)}%`);
      console.log(`‚Ä¢ –î–∞—Ç–∞: ${new Date(stats.bestTrade.entryTime).toLocaleString()}`);
    }

    if (stats.worstTrade) {
      console.log(`\nüíÄ –•–£–î–®–ê–Ø –°–î–ï–õ–ö–ê:`);
      console.log(`‚Ä¢ –°–∏–º–≤–æ–ª: ${stats.worstTrade.symbol}`);
      console.log(`‚Ä¢ –¢–∏–ø: ${stats.worstTrade.type}`);
      console.log(`‚Ä¢ –£–±—ã—Ç–æ–∫: ${stats.worstTrade.profitLoss.toFixed(2)}%`);
      console.log(`‚Ä¢ –î–∞—Ç–∞: ${new Date(stats.worstTrade.entryTime).toLocaleString()}`);
    }

    if (stats.longestTrade) {
      console.log(`\n‚è±Ô∏è –°–ê–ú–ê–Ø –î–õ–ò–ù–ù–ê–Ø –°–î–ï–õ–ö–ê:`);
      console.log(`‚Ä¢ –°–∏–º–≤–æ–ª: ${stats.longestTrade.symbol}`);
      console.log(`‚Ä¢ –¢–∏–ø: ${stats.longestTrade.type}`);
      console.log(`‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(stats.longestTrade.duration / 1000 / 60)} –º–∏–Ω—É—Ç`);
      console.log(`‚Ä¢ –î–∞—Ç–∞: ${new Date(stats.longestTrade.entryTime).toLocaleString()}`);
    }

    if (stats.shortestTrade) {
      console.log(`\n‚ö° –°–ê–ú–ê–Ø –ö–û–†–û–¢–ö–ê–Ø –°–î–ï–õ–ö–ê:`);
      console.log(`‚Ä¢ –°–∏–º–≤–æ–ª: ${stats.shortestTrade.symbol}`);
      console.log(`‚Ä¢ –¢–∏–ø: ${stats.shortestTrade.type}`);
      console.log(`‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(stats.shortestTrade.duration / 1000 / 60)} –º–∏–Ω—É—Ç`);
      console.log(`‚Ä¢ –î–∞—Ç–∞: ${new Date(stats.shortestTrade.entryTime).toLocaleString()}`);
    }

    console.log(`\nüìÖ –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:`);
    console.log(`‚Ä¢ –î–Ω–µ–π —Ä–∞–±–æ—Ç—ã: ${stats.totalDaysRunning}`);
    console.log(`‚Ä¢ –°–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å: ${stats.averageTradesPerDay}`);
    console.log(`‚Ä¢ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: ${new Date(stats.systemStartTime).toLocaleString()}`);
    console.log(`‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(stats.lastUpdated).toLocaleString()}`);

    if (stats.tradeHistory.length > 0) {
      console.log(`\nüìã –ü–û–°–õ–ï–î–ù–ò–ï 5 –°–î–ï–õ–û–ö:`);
      const recentTrades = stats.tradeHistory.slice(-5).reverse();
      recentTrades.forEach((trade, index) => {
        const emoji = trade.profitLoss >= 0 ? 'üü¢' : 'üî¥';
        const profitText = trade.profitLoss >= 0 ? `+${trade.profitLoss.toFixed(2)}%` : `${trade.profitLoss.toFixed(2)}%`;
        console.log(`${index + 1}. ${trade.symbol} ${trade.type} ${emoji} ${profitText} (${Math.round(trade.duration / 1000 / 60)} –º–∏–Ω)`);
      });
    }

    console.log(`\n‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);

  } catch (error) {
    if (error.code === 'ENOENT') {
      console.log('üìä –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
viewExtendedStatistics(); 