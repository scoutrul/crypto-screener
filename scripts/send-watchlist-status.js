const fs = require('fs').promises;
const path = require('path');
const { CryptoScreenerApp } = require('../src/app');
const messageQueue = require('./telegram-message-queue');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ watchlist —á–µ—Ä–µ–∑ Telegram
 */
class WatchlistStatusSender {
  constructor() {
    this.app = null;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å pending anomalies
   */
  async loadPendingAnomalies() {
    try {
      const filename = path.join(__dirname, '..', 'data', 'pending-anomalies.json');
      const data = await fs.readFile(filename, 'utf8');
      const parsed = JSON.parse(data);
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–æ–±—ä–µ–∫—Ç —Å meta –∏ anomalies) –∏ —Å—Ç–∞—Ä–æ–π (–º–∞—Å—Å–∏–≤)
      if (Array.isArray(parsed)) {
        // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –º–∞—Å—Å–∏–≤
        return parsed;
      } else if (parsed.anomalies && Array.isArray(parsed.anomalies)) {
        // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –æ–±—ä–µ–∫—Ç —Å anomalies
        return parsed.anomalies;
      } else {
        console.log('üìä –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ pending-anomalies.json');
        return [];
      }
    } catch (error) {
      console.log('üìä Pending anomalies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return [];
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–∏
   */
  calculateAnomalyStats(anomaly) {
    const now = new Date();
    const watchlistTime = new Date(anomaly.watchlistTime);
    const timeInWatchlist = Math.floor((now - watchlistTime) / (1000 * 60)); // –º–∏–Ω—É—Ç—ã
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const maxPrice = anomaly.maxPrice || anomaly.anomalyPrice;
    const minPrice = anomaly.minPrice || anomaly.anomalyPrice;
    const entryLevel = anomaly.entryLevel || anomaly.anomalyPrice;
    const cancelLevel = anomaly.cancelLevel || anomaly.anomalyPrice;
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –º–æ–º–µ–Ω—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–∏
    const priceChange = ((maxPrice - anomaly.anomalyPrice) / anomaly.anomalyPrice) * 100;
    const priceChangeFromMin = ((maxPrice - minPrice) / minPrice) * 100;
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É—Ä–æ–≤–Ω–µ–π
    const currentPrice = maxPrice; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∫–∞–∫ —Ç–µ–∫—É—â—É—é
    const distanceToEntry = ((entryLevel - currentPrice) / currentPrice) * 100;
    const distanceToCancel = ((currentPrice - cancelLevel) / currentPrice) * 100;
    
    return {
      timeInWatchlist,
      priceChange,
      priceChangeFromMin,
      distanceToEntry,
      distanceToCancel,
      currentPrice
    };
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º watchlist
   */
  createWatchlistMessage(anomalies) {
    if (anomalies.length === 0) {
      return `üìã WATCHLIST –°–¢–ê–¢–£–°:\n\nüìä –í watchlist: 0 –∞–Ω–æ–º–∞–ª–∏–π\n\nüí° –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è`;
    }

    let message = `üìã WATCHLIST –°–¢–ê–¢–£–°:\n\nüìä –í watchlist: ${anomalies.length} –∞–Ω–æ–º–∞–ª–∏–π\n\n`;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    const longCount = anomalies.filter(a => a.tradeType === 'Long').length;
    const shortCount = anomalies.filter(a => a.tradeType === 'Short').length;
    message += `üìà Long: ${longCount} | Short: ${shortCount}\n\n`;

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–π –∞–Ω–æ–º–∞–ª–∏–∏
    anomalies.forEach((anomaly, index) => {
      const stats = this.calculateAnomalyStats(anomaly);
      const symbol = anomaly.symbol.replace('/USDT', '');
      const emoji = anomaly.tradeType === 'Long' ? 'üü¢' : 'üî¥';
      
      message += `${emoji} ${symbol} (${anomaly.tradeType})\n`;
      message += `   üìä –û–±—ä–µ–º: ${anomaly.volumeLeverage ? `${anomaly.volumeLeverage}x` : 'N/A'}\n`;
      message += `   üí∞ –ê–Ω–æ–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: $${anomaly.anomalyPrice.toFixed(6)}\n`;
      message += `   üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${stats.currentPrice.toFixed(6)}\n`;
      message += `   ‚è±Ô∏è –í—Ä–µ–º—è –≤ watchlist: ${stats.timeInWatchlist} –º–∏–Ω\n`;
      message += `   üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${stats.priceChange.toFixed(2)}%\n`;
      message += `   üéØ –î–æ –≤—Ö–æ–¥–∞: ${stats.distanceToEntry.toFixed(2)}%\n`;
      message += `   ‚ùå –î–æ –æ—Ç–º–µ–Ω—ã: ${stats.distanceToCancel.toFixed(2)}%\n`;
      message += `   üìä –î–∏–∞–ø–∞–∑–æ–Ω: ${stats.priceChangeFromMin.toFixed(2)}%\n\n`;
    });

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const validLeverages = anomalies.filter(a => a.volumeLeverage).map(a => a.volumeLeverage);
    const avgLeverage = validLeverages.length > 0 
      ? (validLeverages.reduce((sum, v) => sum + v, 0) / validLeverages.length).toFixed(1)
      : 'N/A';
    const avgTimeInWatchlist = (anomalies.reduce((sum, a) => sum + this.calculateAnomalyStats(a).timeInWatchlist, 0) / anomalies.length).toFixed(0);
    
    message += `üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`;
    message += `   üìà –°—Ä–µ–¥–Ω–∏–π leverage: ${avgLeverage}x\n`;
    message += `   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ watchlist: ${avgTimeInWatchlist} –º–∏–Ω\n`;
    message += `   üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n`;

    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
   */
  async sendTelegramMessage(message) {
    try {
      if (!this.app) {
        this.app = new CryptoScreenerApp();
        await this.app.start();
      }

      // –ü–æ–ª—É—á–∏—Ç—å chat ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const chatId = process.env.TELEGRAM_CHAT_ID;
      if (!chatId) {
        console.error('‚ùå TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        return;
      }

             // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
       await new Promise(resolve => setTimeout(resolve, 5000));

      await messageQueue.addMessage(chatId, message);
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å watchlist –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
    }
  }

  /**
   * –†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
   */
  splitMessageForTelegram(message) {
    const maxLength = 4000;
    const parts = [];
    
    if (message.length <= maxLength) {
      return [message];
    }
    
    const lines = message.split('\n');
    let currentPart = '';
    
    for (const line of lines) {
      if ((currentPart + line + '\n').length > maxLength) {
        parts.push(currentPart.trim());
        currentPart = line + '\n';
      } else {
        currentPart += line + '\n';
      }
    }
    
    if (currentPart.trim()) {
      parts.push(currentPart.trim());
    }
    
    return parts;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞
   */
  async start() {
    try {
      console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ watchlist...');
      
      const anomalies = await this.loadPendingAnomalies();
      const message = this.createWatchlistMessage(anomalies);
      
      console.log('üìä –°—Ç–∞—Ç—É—Å watchlist –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω:');
      console.log(message);
      
      // –†–∞–∑–±–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
      const messageParts = this.splitMessageForTelegram(message);
      
      if (messageParts.length > 1) {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${messageParts.length} —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è...`);
        
        for (let i = 0; i < messageParts.length; i++) {
          const part = messageParts[i];
          const partNumber = i + 1;
          const totalParts = messageParts.length;
          
          const partMessage = part.replace(
            'üìã WATCHLIST –°–¢–ê–¢–£–°:',
            `üìã WATCHLIST –°–¢–ê–¢–£–° (–ß–∞—Å—Ç—å ${partNumber}/${totalParts}):`
          );
          
          await this.sendTelegramMessage(partMessage);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          if (i < messageParts.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }
      } else {
        await this.sendTelegramMessage(message);
      }
      
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å watchlist –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const sender = new WatchlistStatusSender();
  sender.start();
}

module.exports = WatchlistStatusSender; 