/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
 */

const fs = require('fs').promises;
const path = require('path');

async function viewMultiLevelStatistics() {
  try {
    const filename = path.join(__dirname, '..', 'data', 'multi-level-statistics.json');
    const data = await fs.readFile(filename, 'utf8');
    const statistics = JSON.parse(data);

    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–û–ô –¢–û–†–ì–û–í–õ–ò\n');

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${statistics.totalTrades}`);
    console.log(`üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: ${statistics.totalLevelsExecuted}`);
    console.log(`üí∞ –û–±—â–∏–π –æ–±—ä—ë–º: $${statistics.totalVolume.toFixed(2)}`);
    console.log(`üíµ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $${statistics.totalProfit.toFixed(2)}`);
    console.log(`üí∏ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: $${statistics.totalCommission.toFixed(2)}`);
    console.log(`üü¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $${statistics.totalNetProfit.toFixed(2)}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–¥–µ–ª–æ–∫
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –°–î–ï–õ–û–ö:');
    const longStats = statistics.tradeTypes.Long;
    const shortStats = statistics.tradeTypes.Short;
    
    console.log(`Long: ${longStats.total} —Å–¥–µ–ª–æ–∫, ${longStats.profitable} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö`);
    console.log(`   üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $${longStats.totalProfit.toFixed(2)}`);
    console.log(`Short: ${shortStats.total} —Å–¥–µ–ª–æ–∫, ${shortStats.profitable} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö`);
    console.log(`   üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $${shortStats.totalProfit.toFixed(2)}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
    console.log('\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –£–†–û–í–ù–Ø–ú:');
    const levels = statistics.levelStatistics;
    
    Object.keys(levels).forEach(levelKey => {
      const level = levels[levelKey];
      const levelNumber = levelKey.replace('level', '');
      const avgProfit = level.executed > 0 ? (level.totalProfit / level.executed).toFixed(2) : '0.00';
      const avgCommission = level.executed > 0 ? (level.totalCommission / level.executed).toFixed(2) : '0.00';
      
      console.log(`–£—Ä–æ–≤–µ–Ω—å ${levelNumber}:`);
      console.log(`   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${level.executed}`);
      console.log(`   üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $${level.totalProfit.toFixed(2)}`);
      console.log(`   üí∏ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: $${level.totalCommission.toFixed(2)}`);
      console.log(`   üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: $${avgProfit}`);
      console.log(`   üìä –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è: $${avgCommission}`);
    });

    // –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìÖ –î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    const dailyStats = statistics.dailyStats;
    
    if (Object.keys(dailyStats).length === 0) {
      console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º');
    } else {
      Object.keys(dailyStats).sort().forEach(day => {
        const dayStats = dailyStats[day];
        const netProfit = dayStats.profit - dayStats.commission;
        const avgProfit = dayStats.levelsExecuted > 0 ? (dayStats.profit / dayStats.levelsExecuted).toFixed(2) : '0.00';
        
        console.log(`${day}:`);
        console.log(`   üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: ${dayStats.levelsExecuted}`);
        console.log(`   üí∞ –û–±—ä—ë–º: $${dayStats.volume.toFixed(2)}`);
        console.log(`   üíµ –ü—Ä–∏–±—ã–ª—å: $${dayStats.profit.toFixed(2)}`);
        console.log(`   üí∏ –ö–æ–º–∏—Å—Å–∏—è: $${dayStats.commission.toFixed(2)}`);
        console.log(`   üü¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $${netProfit.toFixed(2)}`);
        console.log(`   üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –∑–∞ —É—Ä–æ–≤–µ–Ω—å: $${avgProfit}`);
      });
    }

    // –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:');
    
    if (statistics.totalLevelsExecuted > 0) {
      const avgProfitPerLevel = (statistics.totalProfit / statistics.totalLevelsExecuted).toFixed(2);
      const avgCommissionPerLevel = (statistics.totalCommission / statistics.totalLevelsExecuted).toFixed(2);
      const profitToCommissionRatio = (statistics.totalProfit / statistics.totalCommission).toFixed(2);
      
      console.log(`üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –∑–∞ —É—Ä–æ–≤–µ–Ω—å: $${avgProfitPerLevel}`);
      console.log(`üìä –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è –∑–∞ —É—Ä–æ–≤–µ–Ω—å: $${avgCommissionPerLevel}`);
      console.log(`üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å/–∫–æ–º–∏—Å—Å–∏—è: ${profitToCommissionRatio}:1`);
      
      // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —É—Ä–æ–≤–Ω—è–º
      console.log('\nüéØ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –£–†–û–í–ù–Ø–ú:');
      Object.keys(levels).forEach(levelKey => {
        const level = levels[levelKey];
        const levelNumber = levelKey.replace('level', '');
        
        if (level.executed > 0) {
          const avgProfit = (level.totalProfit / level.executed).toFixed(2);
          const avgCommission = (level.totalCommission / level.executed).toFixed(2);
          const ratio = level.totalCommission > 0 ? (level.totalProfit / level.totalCommission).toFixed(2) : '‚àû';
          
          console.log(`–£—Ä–æ–≤–µ–Ω—å ${levelNumber}: ${avgProfit}$ –ø—Ä–∏–±—ã–ª—å, ${avgCommission}$ –∫–æ–º–∏—Å—Å–∏—è, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ ${ratio}:1`);
        }
      });
    }

    console.log('\n' + '='.repeat(60));

  } catch (error) {
    if (error.code === 'ENOENT') {
      console.log('üìä –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
  }
}

if (require.main === module) {
  viewMultiLevelStatistics();
}

module.exports = { viewMultiLevelStatistics }; 