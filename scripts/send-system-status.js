/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –≤ Telegram
 */

const fs = require('fs').promises;
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
const AppConfig = require('../src/infrastructure/config/AppConfig');
const TelegramNotificationRepository = require('../src/infrastructure/repositories/TelegramNotificationRepository');

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
function formatDuration(minutes) {
  if (minutes < 60) {
    return `${minutes} –º–∏–Ω`;
  } else if (minutes < 1440) {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}—á ${mins}–º–∏–Ω`;
  } else {
    const days = Math.floor(minutes / 1440);
    const hours = Math.floor((minutes % 1440) / 60);
    return `${days}–¥ ${hours}—á`;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã
 */
async function createSystemStatusMessage() {
  const now = new Date().toLocaleString('ru-RU');
  let message = `üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò\n\n`;
  message += `üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${now}\n\n`;

  // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
  try {
    const activeTradesFile = path.join(__dirname, '..', 'data', 'active-trades.json');
    const activeTradesData = await fs.readFile(activeTradesFile, 'utf8');
    const activeTrades = JSON.parse(activeTradesData);
    
    message += `üìä –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò (${activeTrades.length}):\n`;
    if (activeTrades.length === 0) {
      message += `   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n\n`;
    } else {
      activeTrades.forEach((trade, index) => {
        const duration = Math.round((Date.now() - new Date(trade.entryTime).getTime()) / 1000 / 60);
        const emoji = trade.type === 'Long' ? 'üü¢' : 'üî¥';
        message += `   ${index + 1}. ${trade.symbol} ${emoji} (${trade.type})\n`;
        message += `      üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}\n`;
        message += `      üõë –°—Ç–æ–ø: $${trade.stopLoss.toFixed(6)}\n`;
        message += `      üéØ –¢–µ–π–∫: $${trade.takeProfit.toFixed(6)}\n`;
        message += `      ‚è±Ô∏è –í—Ä–µ–º—è: ${formatDuration(duration)} –Ω–∞–∑–∞–¥\n\n`;
      });
    }
  } catch (error) {
    message += `üìä –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n`;
  }

  // Pending anomalies
  try {
    const pendingAnomaliesFile = path.join(__dirname, '..', 'data', 'pending-anomalies.json');
    const pendingAnomaliesData = await fs.readFile(pendingAnomaliesFile, 'utf8');
    const pendingAnomalies = JSON.parse(pendingAnomaliesData);
    
    message += `‚è≥ PENDING ANOMALIES (${pendingAnomalies.length}):\n`;
    if (pendingAnomalies.length === 0) {
      message += `   –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π\n\n`;
    } else {
      pendingAnomalies.forEach((anomaly, index) => {
        const timeSinceAnomaly = Math.round((Date.now() - new Date(anomaly.anomalyTime).getTime()) / 1000 / 60);
        const emoji = anomaly.tradeType === 'Long' ? 'üü¢' : 'üî¥';
        message += `   ${index + 1}. ${anomaly.symbol} ${emoji} (${anomaly.tradeType})\n`;
        message += `      üí∞ –¶–µ–Ω–∞: $${anomaly.anomalyPrice.toFixed(6)}\n`;
        message += `      ‚è±Ô∏è –í—Ä–µ–º—è: ${formatDuration(timeSinceAnomaly)} –Ω–∞–∑–∞–¥\n\n`;
      });
    }
  } catch (error) {
    message += `‚è≥ PENDING ANOMALIES: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n`;
  }

  // –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
  try {
    const tradeHistoryFile = path.join(__dirname, '..', 'data', 'trade-history.json');
    const tradeHistoryData = await fs.readFile(tradeHistoryFile, 'utf8');
    const tradeHistory = JSON.parse(tradeHistoryData);
    
    message += `üìà –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö (${tradeHistory.length}):\n`;
    if (tradeHistory.length === 0) {
      message += `   –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞\n\n`;
    } else {
      const winningTrades = tradeHistory.filter(t => t.profitLoss > 0).length;
      const totalProfit = tradeHistory.reduce((sum, t) => sum + t.profitLoss, 0);
      const winRate = (winningTrades / tradeHistory.length * 100).toFixed(1);
      const avgProfit = (totalProfit / tradeHistory.length).toFixed(2);
      
      message += `   üéØ –í–∏–Ω—Ä–µ–π—Ç: ${winRate}% (${winningTrades}/${tradeHistory.length})\n`;
      message += `   üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${totalProfit.toFixed(2)}%\n`;
      message += `   üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avgProfit}%\n\n`;
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
      const recentTrades = tradeHistory.slice(-5).reverse();
      message += `   –ü–û–°–õ–ï–î–ù–ò–ï 5 –°–î–ï–õ–û–ö:\n`;
      recentTrades.forEach((trade, index) => {
        const profitLossText = trade.profitLoss >= 0 ? `+${trade.profitLoss.toFixed(2)}%` : `${trade.profitLoss.toFixed(2)}%`;
        const emoji = trade.profitLoss >= 0 ? 'üü¢' : 'üî¥';
        const duration = Math.round(trade.duration / 1000 / 60);
        message += `   ${index + 1}. ${trade.symbol} ${emoji} ${profitLossText} (${formatDuration(duration)})\n`;
      });
      message += `\n`;
    }
  } catch (error) {
    message += `üìà –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n`;
  }

  // –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  try {
    const tradingStatsFile = path.join(__dirname, '..', 'data', 'trading-statistics.json');
    const tradingStatsData = await fs.readFile(tradingStatsFile, 'utf8');
    const tradingStats = JSON.parse(tradingStatsData);
    
    message += `üìä –¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`;
    message += `   üéØ –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: ${tradingStats.winRate.toFixed(1)}%\n`;
    message += `   üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${tradingStats.totalProfit.toFixed(2)}%\n`;
    message += `   üìà –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: +${tradingStats.bestTrade.toFixed(2)}%\n`;
    message += `   üìâ –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${tradingStats.worstTrade.toFixed(2)}%\n`;
    message += `   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${formatDuration(Math.round(tradingStats.averageDuration / 1000 / 60))}\n\n`;
  } catch (error) {
    message += `üìä –¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n`;
  }

  message += `üîó Crypto Screener v2.0`;
  
  return message;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ Telegram
 */
async function sendSystemStatus() {
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –≤ Telegram...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const config = new AppConfig();
    const notificationRepository = new TelegramNotificationRepository();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram
    const isAvailable = await notificationRepository.isAvailable();
    if (!isAvailable) {
      console.log('‚ö†Ô∏è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å');
      const message = await createSystemStatusMessage();
      console.log(message);
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = await createSystemStatusMessage();
    await notificationRepository.sendTelegramMessage(message);
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    
    // Fallback - –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏
    try {
      const message = await createSystemStatusMessage();
      console.log('\nüìã –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ (–∫–æ–Ω—Å–æ–ª—å):\n');
      console.log(message);
    } catch (fallbackError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', fallbackError.message);
    }
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  const args = process.argv.slice(2);
  const command = args[0] || 'send';

  console.log('üöÄ System Status Sender');
  console.log('========================\n');

  switch (command) {
    case 'send':
      await sendSystemStatus();
      break;
      
    case 'preview':
      console.log('üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n');
      const message = await createSystemStatusMessage();
      console.log(message);
      break;
      
    default:
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('  node scripts/send-system-status.js [–∫–æ–º–∞–Ω–¥–∞]');
      console.log('');
      console.log('–ö–æ–º–∞–Ω–¥—ã:');
      console.log('  send    - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ Telegram');
      console.log('  preview - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏');
      console.log('');
      console.log('–ü—Ä–∏–º–µ—Ä—ã:');
      console.log('  node scripts/send-system-status.js send');
      console.log('  node scripts/send-system-status.js preview');
  }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = {
  sendSystemStatus,
  createSystemStatusMessage
}; 