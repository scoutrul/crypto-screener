/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç (–≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ)
 */
const { CryptoScreenerApp } = require('../src/app');
const FilterCoinsByMarketCapCompactUseCase = require('../src/application/use-cases/FilterCoinsByMarketCapCompactUseCase');
const fs = require('fs').promises;
const path = require('path');

async function saveExtendedCoins() {
  let app;
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = new CryptoScreenerApp();
    await app.start();
    
    // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const coinRepository = global.cryptoScreener.coinRepository;
    const notificationService = global.cryptoScreener.notificationService;
    
    // –°–æ–∑–¥–∞—Ç—å use case –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const filterUseCase = new FilterCoinsByMarketCapCompactUseCase(coinRepository, notificationService);
    
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç...');
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 750 –º–æ–Ω–µ—Ç
    const params = {
      totalLimit: 1500,       // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-1500 –º–æ–Ω–µ—Ç
      minMarketCapBTC: 40,    // 
      currency: 'btc',        // –í BTC –ø–∞—Ä–∞—Ö
      maxResults: 750         // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-750 –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    };

    // –ü–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const allCoins = await coinRepository.getTopCoinsByMarketCap(params.totalLimit, params.currency);
    
    if (!allCoins || allCoins.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö');
    }

    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${allCoins.length} –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);

    // –ò—Å–∫–ª—é—á–∏—Ç—å —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
    const nonStablecoins = allCoins.filter(coin => {
      const symbol = coin.getSymbol()?.toUpperCase() || '';
      const name = coin.getName()?.toUpperCase() || '';
      
      const stablecoinKeywords = [
        'USD', 'EUR', 'GBP', 'JPY', 'CNY', 'KRW', 'CAD', 'AUD', 'CHF', 'SGD',
        'USDT', 'USDC', 'BUSD', 'DAI', 'TUSD', 'FRAX', 'USDP', 'USDD', 'GUSD',
        'USDK', 'USDN', 'USDJ', 'USDK', 'USDN', 'USDJ', 'USDK', 'USDN', 'USDJ'
      ];
      
      return !stablecoinKeywords.some(keyword => 
        symbol.includes(keyword) || name.includes(keyword)
      );
    });

    console.log(`–ò—Å–∫–ª—é—á–µ–Ω–æ ${allCoins.length - nonStablecoins.length} —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤`);

    // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥)
    const filteredCoins = nonStablecoins.filter(coin => {
      try {
        const marketCap24h = coin.getMarketCap24h();
        return marketCap24h && marketCap24h.getValue() >= params.minMarketCapBTC;
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞ 24—á –¥–ª—è ${coin.getSymbol()}:`, error.message);
        return false;
      }
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${filteredCoins.length} –º–æ–Ω–µ—Ç —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∑–∞ 24—á >= ${params.minMarketCapBTC} BTC (–±–µ–∑ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤)`);

    // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let finalCoins = filteredCoins;
    if (params.maxResults && filteredCoins.length > params.maxResults) {
      finalCoins = filteredCoins.slice(0, params.maxResults);
      console.log(`–û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ —Ç–æ–ø-${params.maxResults} –º–æ–Ω–µ—Ç –∏–∑ ${filteredCoins.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö`);
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const coinsData = finalCoins.map(coin => ({
      id: coin.getId(),
      symbol: coin.getSymbol(),
      name: coin.getName(),
      currentPrice: coin.getCurrentPrice()?.getValue() || 0,
      marketCap: coin.getMarketCap()?.getValue() || 0,
      marketCap24h: coin.getMarketCap24h()?.getValue() || 0,
      volume: coin.getVolume()?.getValue() || 0,
      priceChange24h: coin.getPriceChangePercentage24h()?.getValue() || 0,
      lastUpdated: coin.getLastUpdated()
    }));

    // –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dataDir = path.join(__dirname, '..', 'data');
    await fs.mkdir(dataDir, { recursive: true });

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
    const filename = path.join(dataDir, 'filtered-coins.json');
    await fs.writeFile(filename, JSON.stringify({
      timestamp: new Date().toISOString(),
      totalCoins: finalCoins.length,
      params: params,
      coins: coinsData
    }, null, 2));

              console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${finalCoins.length} –º–æ–Ω–µ—Ç –≤ —Ñ–∞–π–ª: ${filename}`);
          console.log(`üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç –¥–æ ${finalCoins.length} (–±—ã–ª–æ 106, —Å—Ç–∞–ª–æ ${finalCoins.length})`);
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    await notificationService.sendNotification(
      '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω',
      `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${finalCoins.length} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–Ω–æ–º–∞–ª–∏–π (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ ${(finalCoins.length / 106).toFixed(1)}x).`,
      'info'
    );

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    if (app) {
      await app.stop();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  saveExtendedCoins().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { saveExtendedCoins }; 