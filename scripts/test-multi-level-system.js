/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
 */

const { VirtualTradingBaseService } = require('../src/domain/services/VirtualTradingBaseService');
const { MultiLevelTradingService } = require('../src/domain/services/MultiLevelTradingService');

async function testMultiLevelSystem() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–û–ô –°–ò–°–¢–ï–ú–´\n');

  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
  const config = {
    multiLevelEnabled: true,
    initialVolume: 1000,
    commissionPercent: 0.0003,
    level2VolumePercent: 0.2,
    level3VolumePercent: 0.4,
    level4VolumePercent: 0.4,
    level2TargetPercent: 0.0006,
    level3TargetPercent: 0.05,
    level4TargetPercent: 0.05
  };

  const baseService = new VirtualTradingBaseService(config);
  const multiLevelService = new MultiLevelTradingService(config);

  console.log('üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´:');
  console.log(JSON.stringify(config, null, 2));
  console.log('');

  // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è Long —Å–¥–µ–ª–∫–∏
  console.log('üîç –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è Long —Å–¥–µ–ª–∫–∏');
  const entryPrice = 1.0000;
  const tradeType = 'Long';
  
  const levels = multiLevelService.createTradeLevels(entryPrice, tradeType);
  console.log(`–°–æ–∑–¥–∞–Ω–æ ${levels.length} —É—Ä–æ–≤–Ω–µ–π:`);
  
  levels.forEach(level => {
    console.log(`  –£—Ä–æ–≤–µ–Ω—å ${level.levelNumber}: $${level.volumeAmount} ‚Üí $${level.targetPrice.toFixed(6)}`);
  });
  console.log('');

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
  console.log('üîç –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π');
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–æ—Å—Ç —Ü–µ–Ω—ã
  const testPrices = [
    1.0000, // –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    1.0006, // –£—Ä–æ–≤–µ–Ω—å 2 (–±–µ–∑—É–±—ã—Ç–æ–∫)
    1.0500, // –£—Ä–æ–≤–µ–Ω—å 3 (5% –ø—Ä–∏–±—ã–ª–∏)
    1.0500  // –£—Ä–æ–≤–µ–Ω—å 4 (5% –ø—Ä–∏–±—ã–ª–∏)
  ];

  const trade = {
    symbol: 'BTC/USDT',
    type: tradeType,
    entryPrice: entryPrice,
    tradeLevels: levels,
    totalCommission: 0,
    netProfit: 0,
    executedLevels: 0
  };

  testPrices.forEach((price, index) => {
    console.log(`\nüí∞ –¶–µ–Ω–∞: $${price.toFixed(6)}`);
    const executedLevels = multiLevelService.checkLevelExecution(trade, price);
    
    if (executedLevels) {
      executedLevels.forEach(level => {
        console.log(`  ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω —É—Ä–æ–≤–µ–Ω—å ${level.levelNumber}: $${level.profitLoss.toFixed(2)} (${level.profitLossPercent.toFixed(2)}%)`);
        console.log(`     üí∏ –ö–æ–º–∏—Å—Å–∏—è: $${level.commission.toFixed(2)}`);
      });
    } else {
      console.log('  ‚è≥ –£—Ä–æ–≤–Ω–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
    }
  });

  // –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
  console.log('\nüîç –¢–ï–°–¢ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º');
  const stats = multiLevelService.getLevelsStatistics(trade);
  console.log(`–í—Å–µ–≥–æ —É—Ä–æ–≤–Ω–µ–π: ${stats.totalLevels}`);
  console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.executedLevels}`);
  console.log(`–û–±—â–∏–π –æ–±—ä—ë–º: $${stats.totalVolume}`);
  console.log(`–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $${stats.totalProfit.toFixed(2)}`);
  console.log(`–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: $${stats.totalCommission.toFixed(2)}`);
  console.log(`–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $${stats.netProfit.toFixed(2)}`);

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  console.log('\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
  const progress = multiLevelService.getLevelsProgress(trade);
  console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.progress}% (${progress.executedLevels}/${progress.totalLevels})`);

  // –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
  console.log('\nüîç –¢–ï–°–¢ 5: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ');
  const progressMessage = multiLevelService.createLevelsProgressMessage(trade);
  console.log(progressMessage);

  // –¢–µ—Å—Ç 6: Short —Å–¥–µ–ª–∫–∞
  console.log('\nüîç –¢–ï–°–¢ 6: Short —Å–¥–µ–ª–∫–∞');
  const shortEntryPrice = 1.0000;
  const shortLevels = multiLevelService.createTradeLevels(shortEntryPrice, 'Short');
  
  console.log('–£—Ä–æ–≤–Ω–∏ –¥–ª—è Short —Å–¥–µ–ª–∫–∏:');
  shortLevels.forEach(level => {
    console.log(`  –£—Ä–æ–≤–µ–Ω—å ${level.levelNumber}: $${level.volumeAmount} ‚Üí $${level.targetPrice.toFixed(6)}`);
  });

  // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
  console.log('\nüîç –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏');
  const isCompleted = multiLevelService.isTradeCompleted(trade);
  console.log(`–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${isCompleted ? '–î–∞' : '–ù–µ—Ç'}`);

  console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testMultiLevelSystem().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    process.exit(1);
  });
}

module.exports = { testMultiLevelSystem }; 