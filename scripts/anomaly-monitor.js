/**
 * –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
 */
const ccxt = require('ccxt');
const fs = require('fs').promises;
const path = require('path');
const { CryptoScreenerApp } = require('../src/app');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  timeframe: '15m',
  volumeThreshold: 3, // –û–±—ä–µ–º –±–æ–ª—å—à–µ –≤ 3 —Ä–∞–∑–∞
  priceThreshold: 0.005, // 0.5% –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (—Å–Ω–∏–∂–µ–Ω–æ —Å 1% –¥–ª—è –±–æ–ª—å—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
  monitoringInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  historicalWindow: 2 * 60 * 60 * 1000, // 2 —á–∞—Å–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  exchanges: ['binance', 'bybit'], // –ë–∏—Ä–∂–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
  maxDepositPercent: 0.02, // 2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
  stopLossPercent: 0.01, // 1% —Å—Ç–æ–ø-–ª–æ—Å—Å
  takeProfitPercent: 0.03, // 3% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
  breakEvenPercent: 0.20 // 20% –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
};

class AnomalyMonitor {
  constructor() {
    this.exchange = new ccxt.binance({ enableRateLimit: true });
    this.sentAlerts = new Set();
    this.filteredCoins = [];
    this.app = null;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
   */
  async loadFilteredCoins() {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å Binance-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
      let filename = path.join(__dirname, '..', 'data', 'binance-coins.json');
      let data;
      
      try {
        data = await fs.readFile(filename, 'utf8');
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç, —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –Ω–∞ Binance');
      } catch (error) {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
        filename = path.join(__dirname, '..', 'data', 'filtered-coins.json');
        data = await fs.readFile(filename, 'utf8');
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è –Ω–∞ Binance)');
      }
      
      const coinsData = JSON.parse(data);
      
      this.filteredCoins = coinsData.coins.map(coin => ({
        ...coin,
        symbol: `${coin.symbol}/USDT` // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É –¥–ª—è CCXT
      }));
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.filteredCoins.length} –º–æ–Ω–µ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  async fetchCandles(symbol, since, limit = 100, retries = 3) {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        return await this.exchange.fetchOHLCV(symbol, CONFIG.timeframe, since, limit);
      } catch (error) {
        if (error.message.includes('does not have market symbol')) {
          console.log(`‚ö†Ô∏è ${symbol} –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ Binance, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          return [];
        } else if (error.message.includes('timeout') || error.message.includes('fetch failed')) {
          if (attempt < retries) {
            console.log(`‚è≥ –¢–∞–π–º–∞—É—Ç –¥–ª—è ${symbol}, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫...`);
            await new Promise(resolve => setTimeout(resolve, 2000));
            continue;
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è ${symbol} –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫:`, error.message);
            return [];
          }
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}:`, error.message);
          return [];
        }
      }
    }
    return [];
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
   */
  calculateAveragePrice(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalPrice = candles.reduce((sum, candle) => {
      return sum + (candle[2] + candle[3]) / 2; // (high + low) / 2
    }, 0);
    
    return totalPrice / candles.length;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
   */
  calculateAverageVolume(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalVolume = candles.reduce((sum, candle) => sum + candle[5], 0);
    return totalVolume / candles.length;
  }

  /**
   * –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –æ–±—ä–µ–º–∞
   */
  detectVolumeAnomaly(currentVolume, historicalVolume) {
    return currentVolume > historicalVolume * CONFIG.volumeThreshold;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–¥–µ–ª–∫–∏ (Long/Short)
   */
  determineTradeType(anomalyPrice, historicalPrice) {
    const priceDiff = (anomalyPrice - historicalPrice) / historicalPrice;
    
    // –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log(`   üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –∞–Ω–æ–º–∞–ª—å–Ω–∞—è=${anomalyPrice.toFixed(6)}, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è=${historicalPrice.toFixed(6)}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ=${(priceDiff * 100).toFixed(2)}%`);
    
    if (priceDiff > CONFIG.priceThreshold) {
      console.log(`   üìâ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ Short: ${(priceDiff * 100).toFixed(2)}% > ${(CONFIG.priceThreshold * 100).toFixed(1)}% (–æ–∂–∏–¥–∞–µ–º –ø–∞–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–æ—Å—Ç–∞)`);
      return 'Short';
    } else if (priceDiff < -CONFIG.priceThreshold) {
      console.log(`   üìà –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ Long: ${(priceDiff * 100).toFixed(2)}% < -${(CONFIG.priceThreshold * 100).toFixed(1)}% (–æ–∂–∏–¥–∞–µ–º —Ä–æ—Å—Ç –ø–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è)`);
      return 'Long';
    }
    
    console.log(`   ‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ${(priceDiff * 100).toFixed(2)}% –º–µ–∂–¥—É -${(CONFIG.priceThreshold * 100).toFixed(1)}% –∏ ${(CONFIG.priceThreshold * 100).toFixed(1)}%`);
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
   */
  checkEntryPoint(currentPrice, previousPrice, tradeType) {
    const priceDiff = (currentPrice - previousPrice) / previousPrice;
    
    if (tradeType === 'Long' && priceDiff > CONFIG.priceThreshold) {
      return true;
    } else if (tradeType === 'Short' && priceDiff < -CONFIG.priceThreshold) {
      return true;
    }
    
    return false;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
   */
  createTradeMessage(symbol, tradeType, currentPrice) {
    const ticker = symbol.replace('/USDT', '');
    const emoji = tradeType === 'Long' ? 'üü¢' : 'üî¥';
    const stopLoss = tradeType === 'Long' 
      ? currentPrice * (1 - CONFIG.stopLossPercent)
      : currentPrice * (1 + CONFIG.stopLossPercent);
    
    const takeProfit = tradeType === 'Long'
      ? currentPrice * (1 + CONFIG.takeProfitPercent)
      : currentPrice * (1 - CONFIG.takeProfitPercent);

    return `${ticker} ‚Üí ${tradeType} ${emoji}

–ë–∏—Ä–∂–∏: Binance, Bybit, OKX, BingX
–í—Ö–æ–¥: $${currentPrice.toFixed(6)}
–°—Ç–æ–ø: $${stopLoss.toFixed(6)}
–¢–µ–π–∫: $${takeProfit.toFixed(6)}
–û–±—ä–µ–º: –Ω–µ –±–æ–ª–µ–µ 2.0% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
–û—Ç—Ä–∞–±–æ—Ç–∫–∞: –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤

‚úîÔ∏è –ü—Ä–∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ 20%, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ ${tradeType === 'Long' ? '—á—É—Ç—å –≤—ã—à–µ' : '—á—É—Ç—å –Ω–∏–∂–µ'} —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
‚úîÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É –≤ –ø—Ä–∏–±—ã–ª—å —Ä–∞–Ω—å—à–µ —Ç–µ–π–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞`;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
   */
  createUndefinedDirectionMessage(symbol, currentPrice, anomalyVolume, avgHistoricalVolume, priceDiff, waitingForEntry = false) {
    const volumeRatio = (anomalyVolume / avgHistoricalVolume).toFixed(1);
    const priceChangePercent = (priceDiff * 100).toFixed(2);
    
    let status = waitingForEntry ? '‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –¢–û–ß–ö–ò –í–•–û–î–ê' : '‚ùì –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –û–ü–†–ï–î–ï–õ–ï–ù–û';
    let description = waitingForEntry 
      ? '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –Ω–æ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      : '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è';

    return `üö® <b>–ê–ù–û–ú–ê–õ–ò–Ø –û–ë–™–ï–ú–ê - ${status}</b>

üìä <b>TICKER:</b> ${symbol.replace('/USDT', '')}
üè¢ <b>–ë–∏—Ä–∂–∏:</b> ${CONFIG.exchanges.join(' / ')}
üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> $${currentPrice.toFixed(6)}

üìà <b>–ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–∏:</b>
‚Ä¢ –û–±—ä–µ–º –∞–Ω–æ–º–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${anomalyVolume.toLocaleString()}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º: ${avgHistoricalVolume.toLocaleString()}
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: <b>${volumeRatio}x</b>
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: <b>${priceChangePercent}%</b>

‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> ${description}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã
‚Ä¢ –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤–æ–∑–º–æ–∂–Ω–æ–º—É —Å–∏–≥–Ω–∞–ª—É Long/Short
‚Ä¢ –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendNotification(message) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      await notificationRepository.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
   */
  async checkAnomalies(coin) {
    try {
      const symbol = coin.symbol;
      const now = Date.now();
      const since = now - CONFIG.historicalWindow;
      
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${symbol}...`);
      
      // –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏
      const candles = await this.fetchCandles(symbol, since);
      
      if (candles.length < 8) {
        console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}`);
        return;
      }

      // –†–∞–∑–¥–µ–ª–∏—Ç—å —Å–≤–µ—á–∏ –Ω–∞ –ø–µ—Ä–∏–æ–¥—ã
      const currentCandle = candles[candles.length - 1];
      const previousCandle = candles[candles.length - 2];
      const anomalyCandle = candles[candles.length - 3];
      const historicalCandles = candles.slice(0, -3);

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —Å–∏–≥–Ω–∞–ª –¥–ª—è —ç—Ç–æ–π —Å–≤–µ—á–∏
      const alertKey = `${symbol}_${anomalyCandle[0]}`;
      if (this.sentAlerts.has(alertKey)) {
        console.log(`‚è≠Ô∏è –°–∏–≥–Ω–∞–ª –¥–ª—è ${symbol} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
        return;
      }

      // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—ä–µ–º—ã
      const currentVolume = currentCandle[5];
      const anomalyVolume = anomalyCandle[5];
      const avgHistoricalVolume = this.calculateAverageVolume(historicalCandles);

      // –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –æ–±—ä–µ–º–∞
      if (!this.detectVolumeAnomaly(anomalyVolume, avgHistoricalVolume)) {
        console.log(`üìä –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è ${symbol}`);
        return;
      }

      console.log(`üö® –ê–Ω–æ–º–∞–ª–∏—è –æ–±—ä–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–ª—è ${symbol}!`);

      // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—ã
      const currentPrice = this.calculateAveragePrice([currentCandle]);
      const anomalyPrice = this.calculateAveragePrice([anomalyCandle]);
      const avgHistoricalPrice = this.calculateAveragePrice(historicalCandles);

      // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–¥–µ–ª–∫–∏
      const tradeType = this.determineTradeType(anomalyPrice, avgHistoricalPrice);
      
      // –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const priceDiff = (anomalyPrice - avgHistoricalPrice) / avgHistoricalPrice;
      console.log(`üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã –¥–ª—è ${symbol}:`);
      console.log(`   - –¶–µ–Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${anomalyPrice.toFixed(6)}`);
      console.log(`   - –°—Ä–µ–¥–Ω—è—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞: ${avgHistoricalPrice.toFixed(6)}`);
      console.log(`   - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${(priceDiff * 100).toFixed(2)}%`);
      console.log(`   - –ü–æ—Ä–æ–≥: ${(CONFIG.priceThreshold * 100).toFixed(1)}%`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
      const previousPrice = this.calculateAveragePrice([previousCandle]);
      const entryPoint = this.checkEntryPoint(currentPrice, previousPrice, tradeType);

      if (!tradeType) {
        console.log(`‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –¥–ª—è ${symbol} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ ${(priceDiff * 100).toFixed(2)}% < –ø–æ—Ä–æ–≥ ${(CONFIG.priceThreshold * 100).toFixed(1)}%)`);
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        const message = this.createUndefinedDirectionMessage(symbol, currentPrice, anomalyVolume, avgHistoricalVolume, priceDiff);
        await this.sendNotification(message);
        return;
      }

      console.log(`üìà –¢–∏–ø —Å–¥–µ–ª–∫–∏: ${tradeType}`);

      if (!entryPoint) {
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è ${symbol}`);
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –Ω–æ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
        const message = this.createUndefinedDirectionMessage(symbol, currentPrice, anomalyVolume, avgHistoricalVolume, priceDiff, true);
        await this.sendNotification(message);
        return;
      }

      console.log(`‚úÖ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${symbol}!`);

      // –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = this.createTradeMessage(symbol, tradeType, currentPrice);
      await this.sendNotification(message);

      // –ü–æ–º–µ—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
      this.sentAlerts.add(alertKey);

      console.log(`üéØ –°–∏–≥–Ω–∞–ª ${tradeType} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ${symbol}`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${coin.symbol}:`, error.message);
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  async runMonitoring() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–Ω–æ–º–∞–ª–∏–π...');
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
    if (!await this.loadFilteredCoins()) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É
    for (const coin of this.filteredCoins) {
      await this.checkAnomalies(coin);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  async start() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      this.app = new CryptoScreenerApp();
      await this.app.start();
      
      console.log('üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–Ω–æ–º–∞–ª–∏–π –∑–∞–ø—É—â–µ–Ω');
      console.log(`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${CONFIG.monitoringInterval / 1000 / 60} –º–∏–Ω—É—Ç`);
      console.log(`üìä –¢–∞–π–º—Ñ—Ä–µ–π–º: ${CONFIG.timeframe}`);
      console.log(`üîç –ú–æ–Ω–µ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${this.filteredCoins.length}`);

      // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      await this.runMonitoring();

      // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
      setInterval(async () => {
        await this.runMonitoring();
      }, CONFIG.monitoringInterval);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  async stop() {
    if (this.app) {
      await this.app.stop();
    }
    console.log('üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const monitor = new AnomalyMonitor();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    await monitor.stop();
    process.exit(0);
  });

  process.on('SIGTERM', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    await monitor.stop();
    process.exit(0);
  });

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  monitor.start().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { AnomalyMonitor }; 