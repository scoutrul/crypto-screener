const fs = require('fs').promises;
const path = require('path');
const ccxt = require('ccxt');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
 */
class InactivePairsCleaner {
  constructor() {
    this.exchange = new ccxt.binance({
      defaultType: 'spot',
      enableRateLimit: true
    });
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
   */
  async loadFilteredCoins() {
    try {
      const filename = path.join(__dirname, '..', 'data', 'filtered-coins.json');
      const data = await fs.readFile(filename, 'utf8');
      const coinsData = JSON.parse(data);
      
      if (coinsData.coins) {
        return coinsData.coins;
      } else {
        return coinsData; // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ meta
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç:', error.message);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –Ω–∞ Binance
   */
  async checkPairActivity(symbol) {
    try {
      // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä
      const ticker = await this.exchange.fetchTicker(symbol);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
      if (ticker && ticker.last && ticker.volume) {
        return true;
      }
      
      return false;
    } catch (error) {
      if (error.message.includes('does not have market symbol')) {
        return false;
      }
      // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ (—Ç–∞–π–º–∞—É—Ç—ã –∏ —Ç.–¥.) —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º–∏
      return true;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
   */
  async cleanInactivePairs() {
    console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç...');
    
    const coins = await this.loadFilteredCoins();
    if (coins.length === 0) {
      console.log('‚ùå –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø—É—Å—Ç');
      return;
    }

    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${coins.length} –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ä –Ω–∞ Binance...');

    const activeCoins = [];
    const inactiveCoins = [];
    let checked = 0;

    for (const coin of coins) {
      checked++;
      const symbol = `${coin.symbol}/USDT`;
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –º–æ–Ω–µ—Ç
      if (checked % 10 === 0) {
        console.log(`‚è≥ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${checked}/${coins.length} –º–æ–Ω–µ—Ç...`);
      }

      const isActive = await this.checkPairActivity(symbol);
      
      if (isActive) {
        activeCoins.push(coin);
      } else {
        inactiveCoins.push(coin);
        console.log(`‚ùå ${symbol} - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞`);
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò:');
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: ${activeCoins.length}`);
    console.log(`‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: ${inactiveCoins.length}`);
    console.log(`üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${((activeCoins.length / coins.length) * 100).toFixed(1)}%`);

    if (inactiveCoins.length > 0) {
      console.log('\n‚ùå –£–î–ê–õ–ï–ù–ù–´–ï –ü–ê–†–´:');
      inactiveCoins.forEach(coin => {
        console.log(`   - ${coin.symbol}/USDT`);
      });
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—á–∏—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if (activeCoins.length > 0) {
      await this.saveCleanedCoins(activeCoins);
      console.log(`\n‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${activeCoins.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä)`);
    } else {
      console.log('\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—á–∏—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
   */
  async saveCleanedCoins(activeCoins) {
    try {
      const filename = path.join(__dirname, '..', 'data', 'filtered-coins.json');
      
      // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è meta
      const existingData = await fs.readFile(filename, 'utf8');
      const existingCoinsData = JSON.parse(existingData);
      
      const result = {
        meta: existingCoinsData.meta || {
          source: 'CoinGecko top 1000',
          filter: 'Binance only, exclude stablecoins',
          cleanedAt: new Date().toISOString()
        },
        coins: activeCoins
      };

      // –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–∏—Å—Ç–∫–µ –≤ meta
      if (result.meta) {
        result.meta.cleanedAt = new Date().toISOString();
        result.meta.originalCount = existingCoinsData.coins ? existingCoinsData.coins.length : existingCoinsData.length;
        result.meta.activeCount = activeCoins.length;
      }

      await fs.writeFile(filename, JSON.stringify(result, null, 2));
      
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${filename}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É
   */
  async start() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä...');
      await this.cleanInactivePairs();
      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const cleaner = new InactivePairsCleaner();
  cleaner.start();
}

module.exports = InactivePairsCleaner; 