/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
 */

const fs = require('fs').promises;
const path = require('path');

async function viewSystemStatus() {
  try {
    console.log('üîç –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò\n');

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    try {
      const activeTradesFile = path.join(__dirname, '..', 'data', 'active-trades.json');
      const activeTradesData = await fs.readFile(activeTradesFile, 'utf8');
      const activeTrades = JSON.parse(activeTradesData);
      
      console.log(`üìä –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò (${activeTrades.length}):`);
      if (activeTrades.length === 0) {
        console.log('   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
      } else {
        activeTrades.forEach((trade, index) => {
          const duration = Math.round((Date.now() - new Date(trade.entryTime).getTime()) / 1000 / 60);
          console.log(`   ${index + 1}. ${trade.symbol} (${trade.type})`);
          console.log(`      –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)} | –í—Ä–µ–º—è: ${duration} –º–∏–Ω –Ω–∞–∑–∞–¥`);
          console.log(`      –°—Ç–æ–ø: $${trade.stopLoss.toFixed(6)} | –¢–µ–π–∫: $${trade.takeProfit.toFixed(6)}`);
          console.log('');
        });
      }
    } catch (error) {
      console.log('üìä –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å pending anomalies
    try {
      const pendingAnomaliesFile = path.join(__dirname, '..', 'data', 'pending-anomalies.json');
      const pendingAnomaliesData = await fs.readFile(pendingAnomaliesFile, 'utf8');
      const pendingAnomalies = JSON.parse(pendingAnomaliesData);
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–æ–±—ä–µ–∫—Ç —Å meta –∏ anomalies) –∏ —Å—Ç–∞—Ä–æ–π (–º–∞—Å—Å–∏–≤)
      let anomalies = [];
      if (Array.isArray(pendingAnomalies)) {
        // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –º–∞—Å—Å–∏–≤
        anomalies = pendingAnomalies;
      } else if (pendingAnomalies.anomalies && Array.isArray(pendingAnomalies.anomalies)) {
        // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –æ–±—ä–µ–∫—Ç —Å anomalies
        anomalies = pendingAnomalies.anomalies;
      }
      
      console.log(`‚è≥ PENDING ANOMALIES (${anomalies.length}):`);
      if (anomalies.length === 0) {
        console.log('   –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π');
      } else {
        anomalies.forEach((anomaly, index) => {
          const timeSinceAnomaly = Math.round((Date.now() - new Date(anomaly.anomalyTime).getTime()) / 1000 / 60);
          console.log(`   ${index + 1}. ${anomaly.symbol} (${anomaly.tradeType})`);
          console.log(`      –í—Ä–µ–º—è –∞–Ω–æ–º–∞–ª–∏–∏: ${timeSinceAnomaly} –º–∏–Ω –Ω–∞–∑–∞–¥`);
          console.log(`      –¶–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏: $${anomaly.anomalyPrice.toFixed(6)}`);
          console.log('');
        });
      }
    } catch (error) {
      console.log('‚è≥ PENDING ANOMALIES: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
    try {
      const tradeHistoryFile = path.join(__dirname, '..', 'data', 'trade-history.json');
      const tradeHistoryData = await fs.readFile(tradeHistoryFile, 'utf8');
      const tradeHistory = JSON.parse(tradeHistoryData);
      
      console.log(`üìà –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö (${tradeHistory.length}):`);
      if (tradeHistory.length === 0) {
        console.log('   –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞');
      } else {
        const winningTrades = tradeHistory.filter(t => t.profitLoss > 0).length;
        const totalProfit = tradeHistory.reduce((sum, t) => sum + t.profitLoss, 0);
        const winRate = (winningTrades / tradeHistory.length * 100).toFixed(1);
        
        console.log(`   –í–∏–Ω—Ä–µ–π—Ç: ${winRate}% (${winningTrades}/${tradeHistory.length})`);
        console.log(`   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${totalProfit.toFixed(2)}%`);
        console.log(`   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${(totalProfit / tradeHistory.length).toFixed(2)}%`);
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
        const recentTrades = tradeHistory.slice(-5).reverse();
        console.log('\n   –ü–û–°–õ–ï–î–ù–ò–ï 5 –°–î–ï–õ–û–ö:');
        recentTrades.forEach((trade, index) => {
          const profitLossText = trade.profitLoss >= 0 ? `+${trade.profitLoss.toFixed(2)}%` : `${trade.profitLoss.toFixed(2)}%`;
          const emoji = trade.profitLoss >= 0 ? 'üü¢' : 'üî¥';
          const duration = Math.round(trade.duration / 1000 / 60);
          console.log(`   ${index + 1}. ${trade.symbol} (${trade.type}) ${emoji} ${profitLossText} - ${duration} –º–∏–Ω`);
        });
      }
    } catch (error) {
      console.log('üìà –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    console.log('\n‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
  }
}

if (require.main === module) {
  viewSystemStatus().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { viewSystemStatus }; 