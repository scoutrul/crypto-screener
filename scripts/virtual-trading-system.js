/**
 * –°–∏—Å—Ç–µ–º–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–∞ $1000
 * - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 * - –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–µ–π–∫—É/—Å—Ç–æ–ø—É
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–Ω—Ä–µ–π—Ç–∞
 */

const ccxt = require('ccxt');
const fs = require('fs').promises;
const path = require('path');
const { CryptoScreenerApp } = require('../src/app');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  timeframe: '15m',
  volumeThreshold: 3, // –û–±—ä–µ–º –≤ 3 —Ä–∞–∑ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
  priceThreshold: 0.005, // 0.5% –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  monitoringInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  priceTrackingInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
  historicalWindow: 8, // 8 —Å–≤–µ—á–µ–π (2 —á–∞—Å–∞)
  exchanges: ['Binance'],
  virtualDeposit: 1000, // $1000 –Ω–∞ —Å–¥–µ–ª–∫—É
  stopLossPercent: 0.01, // 1%
  takeProfitPercent: 0.03, // 3%
  breakEvenPercent: 0.20, // 20% –¥–ª—è –±–µ–∑—É–±—ã—Ç–∫–∞
  anomalyCooldown: 4, // 4 TF (1 —á–∞—Å) –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
  entryConfirmationTFs: 2 // 2 TF –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
};

class VirtualTradingSystem {
  constructor() {
    this.exchange = new ccxt.binance({ enableRateLimit: true });
    this.filteredCoins = [];
    this.activeTrades = new Map(); // symbol -> trade object
    this.watchlist = new Set(); // —Å–∏–º–≤–æ–ª—ã –≤ watchlist
    this.anomalyCooldowns = new Map(); // symbol -> timestamp
    this.pendingAnomalies = new Map(); // symbol -> anomaly object
    this.tradeHistory = []; // –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
    this.tradingStatistics = null; // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
    this.app = null;
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (WebSocket-–≥–æ—Ç–æ–≤—ã–µ)
    this.anomalyCheckInterval = null;      // –ü–æ—Ç–æ–∫ 1: 5 –º–∏–Ω—É—Ç
    this.pendingCheckInterval = null;      // –ü–æ—Ç–æ–∫ 2: 1 –º–∏–Ω—É—Ç–∞  
    this.activeTradesInterval = null;      // –ü–æ—Ç–æ–∫ 3: 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
   */
  async loadFilteredCoins() {
    try {
      let filename = path.join(__dirname, '..', 'data', 'binance-coins.json');
      let data;
      try {
        data = await fs.readFile(filename, 'utf8');
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç, —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –Ω–∞ Binance');
      } catch (error) {
        filename = path.join(__dirname, '..', 'data', 'filtered-coins.json');
        data = await fs.readFile(filename, 'utf8');
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç');
      }
      
      const coinsData = JSON.parse(data);
      this.filteredCoins = coinsData.coins;
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.filteredCoins.length} –º–æ–Ω–µ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç:', error.message);
      return false;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
   */
  async loadTradeHistory() {
    try {
      const filename = path.join(__dirname, '..', 'data', 'trade-history.json');
      const data = await fs.readFile(filename, 'utf8');
      this.tradeHistory = JSON.parse(data);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.tradeHistory.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫`);
    } catch (error) {
      console.log('üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
      this.tradeHistory = [];
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
   */
  async loadTradingStatistics() {
    try {
      const filename = path.join(__dirname, '..', 'data', 'trading-statistics.json');
      const data = await fs.readFile(filename, 'utf8');
      this.tradingStatistics = JSON.parse(data);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (${this.tradingStatistics.totalTrades} —Å–¥–µ–ª–æ–∫)`);
    } catch (error) {
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
      this.tradingStatistics = {
        lastUpdated: new Date().toISOString(),
        totalTrades: 0,
        winningTrades: 0,
        losingTrades: 0,
        winRate: 0,
        totalProfit: 0,
        averageProfit: 0,
        bestTrade: null,
        worstTrade: null,
        longestTrade: null,
        shortestTrade: null,
        monthlyStats: {},
        dailyStats: {},
        tradeHistory: [],
        systemStartTime: new Date().toISOString(),
        totalDaysRunning: 0,
        averageTradesPerDay: 0
      };
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
   */
  async saveTradingStatistics() {
    try {
      const dataDir = path.join(__dirname, '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });
      const filename = path.join(dataDir, 'trading-statistics.json');
      
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      this.updateTradingStatistics();
      
      await fs.writeFile(filename, JSON.stringify(this.tradingStatistics, null, 2));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏:', error.message);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
   */
  async saveTradeHistory() {
    try {
      const dataDir = path.join(__dirname, '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });
      const filename = path.join(dataDir, 'trade-history.json');
      await fs.writeFile(filename, JSON.stringify(this.tradeHistory, null, 2));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫:', error.message);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å pending anomalies
   */
  async savePendingAnomalies() {
    try {
      const dataDir = path.join(__dirname, '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });
      const filename = path.join(dataDir, 'pending-anomalies.json');
      const anomaliesData = Array.from(this.pendingAnomalies.entries()).map(([symbol, anomaly]) => ({
        symbol,
        ...anomaly
      }));
      await fs.writeFile(filename, JSON.stringify(anomaliesData, null, 2));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è pending anomalies:', error.message);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å pending anomalies
   */
  async loadPendingAnomalies() {
    try {
      const filename = path.join(__dirname, '..', 'data', 'pending-anomalies.json');
      const data = await fs.readFile(filename, 'utf8');
      const anomaliesData = JSON.parse(data);
      this.pendingAnomalies.clear();
      anomaliesData.forEach(anomaly => {
        this.pendingAnomalies.set(anomaly.symbol, {
          tradeType: anomaly.tradeType,
          anomalyTime: anomaly.anomalyTime,
          anomalyCandleIndex: anomaly.anomalyCandleIndex,
          anomalyPrice: anomaly.anomalyPrice,
          historicalPrice: anomaly.historicalPrice,
          currentVolume: anomaly.currentVolume || null // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É currentVolume
        });
      });
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.pendingAnomalies.size} pending anomalies`);
    } catch (error) {
      console.log('üìä Pending anomalies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ');
      this.pendingAnomalies = new Map();
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
   */
  async loadActiveTrades() {
    try {
      const filename = path.join(__dirname, '..', 'data', 'active-trades.json');
      const data = await fs.readFile(filename, 'utf8');
      const tradesData = JSON.parse(data);
      this.activeTrades.clear();
      tradesData.forEach(trade => {
        this.activeTrades.set(trade.symbol, trade);
        this.watchlist.add(trade.symbol);
      });
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.activeTrades.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫`);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö
      if (this.activeTrades.size > 0) {
        await this.sendExistingTradesNotification();
      }
    } catch (error) {
      console.log('üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ');
      this.activeTrades = new Map();
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
   */
  async saveActiveTrades() {
    try {
      const dataDir = path.join(__dirname, '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });
      const filename = path.join(dataDir, 'active-trades.json');
      const tradesData = Array.from(this.activeTrades.values());
      await fs.writeFile(filename, JSON.stringify(tradesData, null, 2));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:', error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ —Å Binance —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   */
  async fetchCandles(symbol, since, limit = 100, retries = 3) {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        return await this.exchange.fetchOHLCV(symbol, CONFIG.timeframe, since, limit);
      } catch (error) {
        if (error.message.includes('does not have market symbol')) {
          console.log(`‚ö†Ô∏è ${symbol} –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ Binance, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          return [];
        } else if (error.message.includes('timeout') || error.message.includes('fetch failed')) {
          if (attempt < retries) {
            console.log(`‚è≥ –¢–∞–π–º–∞—É—Ç –¥–ª—è ${symbol}, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫...`);
            await new Promise(resolve => setTimeout(resolve, 2000));
            continue;
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è ${symbol} –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫:`, error.message);
            return [];
          }
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}:`, error.message);
          return [];
        }
      }
    }
    return [];
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
   */
  calculateAveragePrice(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalPrice = candles.reduce((sum, candle) => {
      return sum + (candle[1] + candle[4]) / 2; // (open + close) / 2
    }, 0);
    
    return totalPrice / candles.length;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
   */
  calculateAverageVolume(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalVolume = candles.reduce((sum, candle) => sum + candle[5], 0);
    return totalVolume / candles.length;
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –æ–±—ä–µ–º–∞
   */
  detectVolumeAnomaly(currentVolume, historicalVolume) {
    return currentVolume > historicalVolume * CONFIG.volumeThreshold;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cooldown –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π
   */
  isAnomalyOnCooldown(symbol) {
    const cooldownTime = this.anomalyCooldowns.get(symbol);
    if (!cooldownTime) return false;
    
    const now = Date.now();
    const cooldownDuration = CONFIG.anomalyCooldown * 15 * 60 * 1000; // 4 TF * 15 –º–∏–Ω—É—Ç
    return (now - cooldownTime) < cooldownDuration;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cooldown –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π
   */
  setAnomalyCooldown(symbol) {
    this.anomalyCooldowns.set(symbol, Date.now());
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
   */
  determineTradeType(anomalyPrice, historicalPrice) {
    const priceDiff = (anomalyPrice - historicalPrice) / historicalPrice;
    
    if (priceDiff > CONFIG.priceThreshold) {
      return 'Short';
    } else if (priceDiff < -CONFIG.priceThreshold) {
      return 'Long';
    }
    
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (2 TF)
   */
  async checkEntryConfirmation(symbol, tradeType, anomalyCandleIndex) {
    try {
      // –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const since = Date.now() - (CONFIG.historicalWindow * 15 * 60 * 1000);
      const requiredCandles = CONFIG.historicalWindow + CONFIG.entryConfirmationTFs;
      const candles = await this.fetchCandles(symbol, since, Math.max(requiredCandles, 20), 3);
      
      if (candles.length < requiredCandles) {
        console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ${symbol} (–ø–æ–ª—É—á–µ–Ω–æ ${candles.length}/${requiredCandles})`);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 TF –ø–æ—Å–ª–µ –∞–Ω–æ–º–∞–ª–∏–∏
      const confirmationCandles = candles.slice(anomalyCandleIndex + 1, anomalyCandleIndex + 1 + CONFIG.entryConfirmationTFs);
      
      if (confirmationCandles.length < CONFIG.entryConfirmationTFs) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
      const firstPrice = this.calculateAveragePrice([confirmationCandles[0]]);
      const lastPrice = this.calculateAveragePrice([confirmationCandles[confirmationCandles.length - 1]]);
      const priceDiff = (lastPrice - firstPrice) / firstPrice;

      if (tradeType === 'Long' && priceDiff > CONFIG.priceThreshold) {
        return true; // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –¥–ª—è Long
      } else if (tradeType === 'Short' && priceDiff < -CONFIG.priceThreshold) {
        return true; // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è –¥–ª—è Short
      }

      return false;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è ${symbol}:`, error.message);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É
   */
  createVirtualTrade(symbol, tradeType, entryPrice, anomalyId = null, currentVolume = null) {
    const stopLoss = tradeType === 'Long' 
      ? entryPrice * (1 - CONFIG.stopLossPercent)
      : entryPrice * (1 + CONFIG.stopLossPercent);
    
    const takeProfit = tradeType === 'Long'
      ? entryPrice * (1 + CONFIG.takeProfitPercent)
      : entryPrice * (1 - CONFIG.takeProfitPercent);

    const trade = {
      id: `${symbol}_${Date.now()}`,
      anomalyId: anomalyId || `${symbol.replace('/USDT', '')}_${Date.now()}`,
      symbol: symbol,
      type: tradeType,
      entryPrice: entryPrice,
      stopLoss: stopLoss,
      takeProfit: takeProfit,
      entryTime: new Date().toISOString(),
      status: 'open',
      virtualAmount: CONFIG.virtualDeposit,
      lastPrice: entryPrice,
      lastUpdateTime: new Date().toISOString(),
      currentVolume: currentVolume // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º —Å–≤–µ—á–∏
    };

    this.activeTrades.set(symbol, trade);
    this.watchlist.add(symbol);
    
    console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ ${tradeType} –¥–ª—è ${symbol} –ø–æ —Ü–µ–Ω–µ $${entryPrice.toFixed(6)}`);
    return trade;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å pending anomalies –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
   */
  async checkPendingAnomalies() {
    const symbolsToRemove = [];
    
    for (const [symbol, anomaly] of this.pendingAnomalies) {
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º pending anomaly –¥–ª—è ${symbol}...`);
        
        // –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–∏ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 2 —Å–≤–µ—á–∏
        const anomalyTime = new Date(anomaly.anomalyTime);
        const timeSinceAnomaly = Date.now() - anomalyTime.getTime();
        const minutesSinceAnomaly = Math.floor(timeSinceAnomaly / (15 * 60 * 1000));
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç watchlist (4 TF = 1 —á–∞—Å)
        const watchlistTime = new Date(anomaly.watchlistTime || anomaly.anomalyTime);
        const timeInWatchlist = Date.now() - watchlistTime.getTime();
        const minutesInWatchlist = Math.floor(timeInWatchlist / (15 * 60 * 1000));
        
        if (minutesInWatchlist >= 4) { // 4 TF = 1 —á–∞—Å
          console.log(`‚è∞ ${symbol} –≤ watchlist —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (${minutesInWatchlist} TF = ${Math.floor(minutesInWatchlist / 4)} —á–∞—Å–æ–≤), —É–¥–∞–ª—è–µ–º –∏–∑ watchlist`);
          symbolsToRemove.push(symbol);
          continue;
        }
        
        // –ù–∞–º –Ω—É–∂–Ω–æ: 8 —Å–≤–µ—á–µ–π (historical) + —Å–≤–µ—á–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–∏ + 2 —Å–≤–µ—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const totalCandlesNeeded = CONFIG.historicalWindow + minutesSinceAnomaly + CONFIG.entryConfirmationTFs;
        
        console.log(`   üìä –í—Ä–µ–º—è —Å –∞–Ω–æ–º–∞–ª–∏–∏: ${minutesSinceAnomaly} –º–∏–Ω—É—Ç`);
        console.log(`   üìä –ù—É–∂–Ω–æ —Å–≤–µ—á–µ–π: ${totalCandlesNeeded} (8 –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö + ${minutesSinceAnomaly} —Å –∞–Ω–æ–º–∞–ª–∏–∏ + 2 –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)`);
        
        const since = anomalyTime.getTime() - (CONFIG.historicalWindow * 15 * 60 * 1000);
        const candles = await this.fetchCandles(symbol, since, Math.max(totalCandlesNeeded, 30), 3);
        
        if (candles.length < totalCandlesNeeded) {
          console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol} (–ø–æ–ª—É—á–µ–Ω–æ ${candles.length}/${totalCandlesNeeded})`);
          // –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —É –Ω–∞—Å –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          if (candles.length >= CONFIG.historicalWindow + CONFIG.entryConfirmationTFs) {
            console.log(`   üîç –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...`);
          } else {
            continue;
          }
        }

        // –ù–∞–π—Ç–∏ —Å–≤–µ—á–∏ –ø–æ—Å–ª–µ –∞–Ω–æ–º–∞–ª–∏–∏
        const anomalyCandleTime = anomalyTime.getTime();
        let anomalyCandleIndex = -1;
        
        for (let i = 0; i < candles.length; i++) {
          if (candles[i][0] >= anomalyCandleTime) {
            anomalyCandleIndex = i;
            break;
          }
        }
        
        if (anomalyCandleIndex === -1) {
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–∞—è —Å–≤–µ—á–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é
          console.log(`‚ö†Ô∏è –¢–æ—á–Ω–∞—è —Å–≤–µ—á–∞ –∞–Ω–æ–º–∞–ª–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${symbol}, –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é...`);
          
          // –ù–∞–π—Ç–∏ —Å–≤–µ—á—É, –∫–æ—Ç–æ—Ä–∞—è –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–æ–º–∞–ª–∏–∏
          let closestIndex = 0;
          let closestDiff = Math.abs(candles[0][0] - anomalyCandleTime);
          
          for (let i = 1; i < candles.length; i++) {
            const diff = Math.abs(candles[i][0] - anomalyCandleTime);
            if (diff < closestDiff) {
              closestDiff = diff;
              closestIndex = i;
            }
          }
          
          // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç—É —Å–≤–µ—á—É
          if (closestDiff <= 15 * 60 * 1000) {
            anomalyCandleIndex = closestIndex;
            console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –±–ª–∏–∂–∞–π—à–∞—è —Å–≤–µ—á–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ ${anomalyCandleIndex}`);
          } else {
            console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å–≤–µ—á–∞ –¥–ª—è ${symbol}`);
            symbolsToRemove.push(symbol);
            continue;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –ø–æ—Å–ª–µ –∞–Ω–æ–º–∞–ª–∏–∏
        const candlesAfterAnomaly = candles.length - anomalyCandleIndex - 1;
        
        console.log(`   üìä –°–≤–µ—á–µ–π –ø–æ—Å–ª–µ –∞–Ω–æ–º–∞–ª–∏–∏: ${candlesAfterAnomaly} (–Ω—É–∂–Ω–æ ${CONFIG.entryConfirmationTFs})`);
        
        if (candlesAfterAnomaly < CONFIG.entryConfirmationTFs) {
          console.log(`‚è≥ –û–∂–∏–¥–∞–µ–º –µ—â–µ ${CONFIG.entryConfirmationTFs - candlesAfterAnomaly} —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}`);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
        const confirmationCandles = candles.slice(anomalyCandleIndex + 1, anomalyCandleIndex + 1 + CONFIG.entryConfirmationTFs);
        const firstPrice = this.calculateAveragePrice([confirmationCandles[0]]);
        const lastPrice = this.calculateAveragePrice([confirmationCandles[confirmationCandles.length - 1]]);
        const priceDiff = (lastPrice - firstPrice) / firstPrice;

        let entryConfirmed = false;
        
        if (anomaly.tradeType === 'Long' && priceDiff > CONFIG.priceThreshold) {
          entryConfirmed = true;
        } else if (anomaly.tradeType === 'Short' && priceDiff < -CONFIG.priceThreshold) {
          entryConfirmed = true;
        }

        if (entryConfirmed) {
          console.log(`‚úÖ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è ${symbol}!`);
          
          // –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É
          const currentPrice = this.calculateAveragePrice([candles[candles.length - 1]]);
          const currentVolume = candles[candles.length - 1][5]; // –û–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
          const trade = this.createVirtualTrade(symbol, anomaly.tradeType, currentPrice, anomaly.anomalyId, currentVolume);
          
          // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cooldown
          this.setAnomalyCooldown(symbol);
          
          // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          await this.sendNewTradeNotification(trade);
          
          // –£–¥–∞–ª–∏—Ç—å –∏–∑ watchlist (–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ trade list)
          symbolsToRemove.push(symbol);
          console.log(`‚úÖ ${symbol} –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ watchlist –≤ trade list`);
        } else {
          console.log(`‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–ª—è ${symbol} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${(priceDiff * 100).toFixed(2)}%)`);
          
          // // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
          // await this.sendWatchlistUpdateNotification(symbol, anomaly.tradeType, priceDiff);
          
          // –ù–ï —É–¥–∞–ª—è–µ–º –∏–∑ pending - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
          console.log(`üìã ${symbol} –æ—Å—Ç–∞–µ—Ç—Å—è –≤ watchlist –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending anomaly –¥–ª—è ${symbol}:`, error.message);
        symbolsToRemove.push(symbol);
      }
    }

    // –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
    symbolsToRemove.forEach(symbol => {
      this.pendingAnomalies.delete(symbol);
    });

    if (symbolsToRemove.length > 0) {
      await this.savePendingAnomalies();
    }
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
   */
  async trackActiveTrades() {
    if (this.activeTrades.size === 0) {
      return; // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    }

    console.log(`üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º ${this.activeTrades.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫...`);
    
    for (const [symbol, trade] of this.activeTrades) {
      try {
        const candles = await this.fetchCandles(symbol, Date.now() - 15 * 60 * 1000, 1, 3);
        if (candles.length === 0) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ`);
          continue;
        }

        const currentPrice = this.calculateAveragePrice(candles);
        const currentVolume = candles[0][5]; // –û–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
        
        // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É, –≤—Ä–µ–º—è –∏ –æ–±—ä–µ–º
        trade.lastPrice = currentPrice;
        trade.lastUpdateTime = new Date().toISOString();
        trade.currentVolume = currentVolume; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º

        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π P&L
        let currentProfitLoss = 0;
        if (trade.type === 'Long') {
          currentProfitLoss = ((currentPrice - trade.entryPrice) / trade.entryPrice) * 100;
        } else { // Short
          currentProfitLoss = ((trade.entryPrice - currentPrice) / trade.entryPrice) * 100;
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        let shouldClose = false;
        let closeReason = '';
        let profitLoss = 0;

        if (trade.type === 'Long') {
          if (currentPrice >= trade.takeProfit) {
            shouldClose = true;
            closeReason = 'take_profit';
            profitLoss = currentProfitLoss;
          } else if (currentPrice <= trade.stopLoss) {
            shouldClose = true;
            closeReason = 'stop_loss';
            profitLoss = currentProfitLoss;
          }
        } else { // Short
          if (currentPrice <= trade.takeProfit) {
            shouldClose = true;
            closeReason = 'take_profit';
            profitLoss = currentProfitLoss;
          } else if (currentPrice >= trade.stopLoss) {
            shouldClose = true;
            closeReason = 'stop_loss';
            profitLoss = currentProfitLoss;
          }
        }

        if (shouldClose) {
          console.log(`üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É ${symbol} (${trade.type}): ${profitLoss.toFixed(2)}% - ${closeReason}`);
          await this.closeTrade(trade, currentPrice, closeReason, profitLoss);
        } else {
          console.log(`üìà ${symbol} (${trade.type}): ${currentProfitLoss.toFixed(2)}% | –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)} | –¢–µ–∫—É—â–∞—è: $${currentPrice.toFixed(6)}`);
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ${symbol}:`, error.message);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (this.activeTrades.size > 0) {
      await this.saveActiveTrades();
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É
   */
  async closeTrade(trade, exitPrice, reason, profitLoss) {
    trade.exitPrice = exitPrice;
    trade.exitTime = new Date().toISOString();
    trade.status = 'closed';
    trade.closeReason = reason;
    trade.profitLoss = profitLoss;
    trade.duration = new Date(trade.exitTime) - new Date(trade.entryTime);

    // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.tradeHistory.push(trade);
    
    // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏ watchlist
    this.activeTrades.delete(trade.symbol);
    this.watchlist.delete(trade.symbol);
    console.log(`üóëÔ∏è ${trade.symbol} —É–¥–∞–ª–µ–Ω –∏–∑ trade list –∏ watchlist`);

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await this.saveTradeHistory();
    await this.saveTradingStatistics();

    console.log(`üîí –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞ ${trade.type} –¥–ª—è ${trade.symbol}: ${profitLoss.toFixed(2)}% (${reason})`);
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.sendTradeNotification(trade);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
   */
  async sendTradeNotification(trade) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createTradeNotificationMessage(trade);
      await notificationRepository.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
   */
  createTradeNotificationMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const profitLossText = trade.profitLoss >= 0 ? `+${trade.profitLoss.toFixed(2)}%` : `${trade.profitLoss.toFixed(2)}%`;
    const emoji = trade.profitLoss >= 0 ? 'üü¢' : 'üî¥';
    const reasonText = trade.closeReason === 'take_profit' ? '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç' : '–°—Ç–æ–ø-–ª–æ—Å—Å';
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.getCurrentStatistics();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
    const closeTime = new Date(trade.exitTime).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    
    return `${symbol} ‚Üí ${trade.type} ${emoji} –ó–ê–ö–†–´–¢–ê
üÜî ID: ${trade.anomalyId || trade.id || 'N/A'}
üïê –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: ${closeTime}

üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
üí∞ –í—ã—Ö–æ–¥: $${trade.exitPrice.toFixed(6)}
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${profitLossText}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(trade.duration / 1000 / 60)} –º–∏–Ω—É—Ç
üéØ –ü—Ä–∏—á–∏–Ω–∞: ${reasonText}

üìà –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades} üü¢
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades} üî¥
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate}%
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats.totalProfit}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getCurrentStatistics() {
    if (!this.tradingStatistics) {
      return {
        totalTrades: 0,
        winningTrades: 0,
        losingTrades: 0,
        winRate: 0,
        totalProfit: 0
      };
    }
    
    return {
      totalTrades: this.tradingStatistics.totalTrades,
      winningTrades: this.tradingStatistics.winningTrades,
      losingTrades: this.tradingStatistics.losingTrades,
      winRate: this.tradingStatistics.winRate,
      totalProfit: this.tradingStatistics.totalProfit.toFixed(2)
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
   */
  updateTradingStatistics() {
    if (!this.tradingStatistics) return;

    const totalTrades = this.tradeHistory.length;
    const winningTrades = this.tradeHistory.filter(t => t.profitLoss > 0).length;
    const losingTrades = this.tradeHistory.filter(t => t.profitLoss < 0).length;
    const winRate = totalTrades > 0 ? (winningTrades / totalTrades * 100).toFixed(1) : 0;
    const totalProfit = this.tradeHistory.reduce((sum, t) => sum + t.profitLoss, 0);
    const averageProfit = totalTrades > 0 ? (totalProfit / totalTrades).toFixed(2) : 0;

    // –ù–∞–π—Ç–∏ –ª—É—á—à—É—é –∏ —Ö—É–¥—à—É—é —Å–¥–µ–ª–∫–∏
    const bestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((best, current) => 
        current.profitLoss > best.profitLoss ? current : best
      ) : null;

    const worstTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((worst, current) => 
        current.profitLoss < worst.profitLoss ? current : worst
      ) : null;

    // –ù–∞–π—Ç–∏ —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –∏ –∫–æ—Ä–æ—Ç–∫—É—é —Å–¥–µ–ª–∫–∏
    const longestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((longest, current) => 
        current.duration > longest.duration ? current : longest
      ) : null;

    const shortestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((shortest, current) => 
        current.duration < shortest.duration ? current : shortest
      ) : null;

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    const systemStartTime = new Date(this.tradingStatistics.systemStartTime);
    const now = new Date();
    const totalDaysRunning = Math.ceil((now - systemStartTime) / (1000 * 60 * 60 * 24));
    const averageTradesPerDay = totalDaysRunning > 0 ? (totalTrades / totalDaysRunning).toFixed(1) : 0;

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.tradingStatistics = {
      ...this.tradingStatistics,
      lastUpdated: new Date().toISOString(),
      totalTrades,
      winningTrades,
      losingTrades,
      winRate: parseFloat(winRate),
      totalProfit,
      averageProfit: parseFloat(averageProfit),
      bestTrade: bestTrade ? {
        symbol: bestTrade.symbol,
        type: bestTrade.type,
        profitLoss: bestTrade.profitLoss,
        entryTime: bestTrade.entryTime
      } : null,
      worstTrade: worstTrade ? {
        symbol: worstTrade.symbol,
        type: worstTrade.type,
        profitLoss: worstTrade.profitLoss,
        entryTime: worstTrade.entryTime
      } : null,
      longestTrade: longestTrade ? {
        symbol: longestTrade.symbol,
        type: longestTrade.type,
        duration: longestTrade.duration,
        entryTime: longestTrade.entryTime
      } : null,
      shortestTrade: shortestTrade ? {
        symbol: shortestTrade.symbol,
        type: shortestTrade.type,
        duration: shortestTrade.duration,
        entryTime: shortestTrade.entryTime
      } : null,
      tradeHistory: this.tradeHistory.map(trade => ({
        id: trade.id,
        symbol: trade.symbol,
        type: trade.type,
        entryPrice: trade.entryPrice,
        exitPrice: trade.exitPrice,
        profitLoss: trade.profitLoss,
        entryTime: trade.entryTime,
        exitTime: trade.exitTime,
        closeReason: trade.closeReason,
        duration: trade.duration
      })),
      totalDaysRunning,
      averageTradesPerDay: parseFloat(averageTradesPerDay)
    };
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  showStatistics() {
    if (!this.tradingStatistics) {
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
      return;
    }

    const stats = this.tradingStatistics;
    
    console.log('\nüìä –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò:');
    console.log(`üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}`);
    console.log(`üü¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades}`);
    console.log(`üî¥ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades}`);
    console.log(`üìä –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate}%`);
    console.log(`üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats.totalProfit.toFixed(2)}%`);
    console.log(`üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${stats.averageProfit}%`);
    
    if (stats.bestTrade) {
      console.log(`üèÜ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: ${stats.bestTrade.symbol} ${stats.bestTrade.type} +${stats.bestTrade.profitLoss.toFixed(2)}%`);
    }
    if (stats.worstTrade) {
      console.log(`üíÄ –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${stats.worstTrade.symbol} ${stats.worstTrade.type} ${stats.worstTrade.profitLoss.toFixed(2)}%`);
    }
    if (stats.longestTrade) {
      console.log(`‚è±Ô∏è –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è: ${stats.longestTrade.symbol} ${Math.round(stats.longestTrade.duration / 1000 / 60)} –º–∏–Ω—É—Ç`);
    }
    if (stats.shortestTrade) {
      console.log(`‚ö° –°–∞–º–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è: ${stats.shortestTrade.symbol} ${Math.round(stats.shortestTrade.duration / 1000 / 60)} –º–∏–Ω—É—Ç`);
    }
    
    console.log(`üìÖ –î–Ω–µ–π —Ä–∞–±–æ—Ç—ã: ${stats.totalDaysRunning}`);
    console.log(`üìä –°–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å: ${stats.averageTradesPerDay}`);
    console.log(`üëÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}`);
    console.log(`üìã –í watchlist: ${this.watchlist.size}`);
    console.log(`üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(stats.lastUpdated).toLocaleString()}`);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
   */
  async checkAnomalies(coin) {
    const symbol = `${coin.symbol}/USDT`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
    if (this.isAnomalyOnCooldown(symbol)) {
      console.log(`üö´ ${symbol} –Ω–∞ cooldown, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞
    if (this.activeTrades.has(symbol)) {
      console.log(`üí∞ ${symbol} —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ pending anomaly –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
    if (this.pendingAnomalies.has(symbol)) {
      console.log(`‚è≥ ${symbol} —É–∂–µ –≤ pending, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ`);
      return;
    }

    try {
      const since = Date.now() - (CONFIG.historicalWindow * 15 * 60 * 1000);
      const candles = await this.fetchCandles(symbol, since, Math.max(CONFIG.historicalWindow, 20), 3);
      
      if (candles.length < CONFIG.historicalWindow) {
        console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol} (–ø–æ–ª—É—á–µ–Ω–æ ${candles.length}/${CONFIG.historicalWindow})`);
        return;
      }

      const anomalyCandle = candles[candles.length - 2];
      const historicalCandles = candles.slice(0, -2);

      const anomalyVolume = anomalyCandle[5];
      const avgHistoricalVolume = this.calculateAverageVolume(historicalCandles);
      const anomalyPrice = this.calculateAveragePrice([anomalyCandle]);
      const avgHistoricalPrice = this.calculateAveragePrice(historicalCandles);

      // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –æ–±—ä–µ–º–∞
      if (!this.detectVolumeAnomaly(anomalyVolume, avgHistoricalVolume)) {
        return;
      }

      console.log(`üö® –ê–Ω–æ–º–∞–ª–∏—è –æ–±—ä–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–ª—è ${symbol}!`);

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
      const tradeType = this.determineTradeType(anomalyPrice, avgHistoricalPrice);
      
      if (!tradeType) {
        console.log(`‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –¥–ª—è ${symbol}`);
        this.setAnomalyCooldown(symbol);
        return;
      }

      console.log(`üìà –¢–∏–ø —Å–¥–µ–ª–∫–∏: ${tradeType}`);

      // –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞–Ω–æ–º–∞–ª–∏–∏
      const anomalyId = `${symbol.replace('/USDT', '')}_${Date.now()}`;
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –≤ pending –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const anomalyTime = new Date(anomalyCandle[0]);
      
      this.pendingAnomalies.set(symbol, {
        anomalyId,
        tradeType: tradeType,
        anomalyTime: anomalyTime.toISOString(),
        watchlistTime: new Date().toISOString(), // –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ watchlist
        anomalyCandleIndex: candles.length - 2,
        anomalyPrice: anomalyPrice,
        historicalPrice: avgHistoricalPrice,
        currentVolume: anomalyVolume // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º —Å–≤–µ—á–∏
      });
      
      console.log(`üìù –ê–Ω–æ–º–∞–ª–∏—è ${symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ pending (${tradeType})`);
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ watchlist –æ—Ç–∫–ª—é—á–µ–Ω—ã
      // await this.sendWatchlistAddedNotification(symbol, tradeType, anomalyId);
      
      await this.savePendingAnomalies();

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${symbol}:`, error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
   */
  async sendNewTradeNotification(trade) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createNewTradeMessage(trade);
      await notificationRepository.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
   */
  createNewTradeMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const emoji = trade.type === 'Long' ? 'üü¢' : 'üî¥';
    const stopLoss = trade.stopLoss;
    const takeProfit = trade.takeProfit;

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.getCurrentStatistics();

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
    const tradeTime = new Date(trade.entryTime).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    return `üéØ –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê: ${symbol} ‚Üí ${trade.type} ${emoji}
üÜî ID: ${trade.anomalyId || trade.id || 'N/A'}
üïê –í—Ä–µ–º—è: ${tradeTime}

üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
üõë –°—Ç–æ–ø: $${stopLoss.toFixed(6)}
üéØ –¢–µ–π–∫: $${takeProfit.toFixed(6)}
üíµ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $${trade.virtualAmount}

üìà –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades} üü¢
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades} üî¥
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –û–±—ä–µ–º: –Ω–µ –±–æ–ª–µ–µ 2.0% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
‚Ä¢ –ü—Ä–∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ 20% - —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ ${trade.type === 'Long' ? '—á—É—Ç—å –≤—ã—à–µ' : '—á—É—Ç—å –Ω–∏–∂–µ'} –≤—Ö–æ–¥–∞
‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ä–∞–Ω—å—à–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ watchlist
   */
  async sendWatchlistUpdateNotification(symbol, tradeType, priceDiff) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createWatchlistUpdateMessage(symbol, tradeType, priceDiff);
      await notificationRepository.sendTelegramMessage(message);
      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ watchlist –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${symbol}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ watchlist –¥–ª—è ${symbol}:`, error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ watchlist
   */
  createWatchlistUpdateMessage(symbol, tradeType, priceDiff) {
    const symbolName = symbol.replace('/USDT', '');
    const priceChangeText = priceDiff >= 0 ? `+${(priceDiff * 100).toFixed(2)}%` : `${(priceDiff * 100).toFixed(2)}%`;
    const emoji = tradeType === 'Long' ? 'üü¢' : 'üî¥';
    
    return `‚è≥ ${symbolName} ‚Üí ${tradeType} ${emoji} - –û–ñ–ò–î–ê–ù–ò–ï

üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${priceChangeText}
üéØ –ù—É–∂–Ω–æ: ${tradeType === 'Long' ? '>+0.5%' : '<-0.5%'}
‚è∞ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ–º –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è

üí° –ú–æ–Ω–µ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ watchlist –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ watchlist
   */
  async sendWatchlistAddedNotification(symbol, tradeType, anomalyId = null) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createWatchlistAddedMessage(symbol, tradeType, anomalyId);
      await notificationRepository.sendTelegramMessage(message);
      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ watchlist –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${symbol}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ watchlist –¥–ª—è ${symbol}:`, error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
   */
  async sendExistingTradesNotification() {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createExistingTradesMessage();
      await notificationRepository.sendTelegramMessage(message);
      console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö
   */
  createExistingTradesMessage() {
    const trades = Array.from(this.activeTrades.values());
    const longTrades = trades.filter(t => t.type === 'Long');
    const shortTrades = trades.filter(t => t.type === 'Short');
    
    let message = `üìä –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–î–ï–õ–ö–ò (${trades.length})\n\n`;
    
    if (longTrades.length > 0) {
      message += `üü¢ LONG (${longTrades.length}):\n`;
      longTrades.forEach(trade => {
        const symbol = trade.symbol.replace('/USDT', '');
        const entryTime = new Date(trade.entryTime).toLocaleString('ru-RU');
        const lastUpdateTime = trade.lastUpdateTime ? new Date(trade.lastUpdateTime).toLocaleString('ru-RU') : '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å';
        
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        const lastPrice = trade.lastPrice || trade.entryPrice;
        const priceChange = ((lastPrice - trade.entryPrice) / trade.entryPrice) * 100;
        const changeEmoji = priceChange >= 0 ? 'üü¢' : 'üî¥';
        const changeSign = priceChange >= 0 ? '+' : '';
        
        message += `‚Ä¢ ${symbol} ${changeEmoji}\n`;
        message += `  üïê –í—Ö–æ–¥: ${entryTime}\n`;
        message += `  üí∞ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: $${trade.entryPrice.toFixed(6)}\n`;
        message += `  üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${lastPrice.toFixed(6)}\n`;
        message += `  üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeSign}${priceChange.toFixed(2)}%\n`;
        message += `  ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdateTime}\n\n`;
      });
    }
    
    if (shortTrades.length > 0) {
      message += `üî¥ SHORT (${shortTrades.length}):\n`;
      shortTrades.forEach(trade => {
        const symbol = trade.symbol.replace('/USDT', '');
        const entryTime = new Date(trade.entryTime).toLocaleString('ru-RU');
        const lastUpdateTime = trade.lastUpdateTime ? new Date(trade.lastUpdateTime).toLocaleString('ru-RU') : '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å';
        
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–¥–ª—è Short –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è)
        const lastPrice = trade.lastPrice || trade.entryPrice;
        const priceChange = ((trade.entryPrice - lastPrice) / trade.entryPrice) * 100;
        const changeEmoji = priceChange >= 0 ? 'üü¢' : 'üî¥';
        const changeSign = priceChange >= 0 ? '+' : '';
        
        message += `‚Ä¢ ${symbol} ${changeEmoji}\n`;
        message += `  üïê –í—Ö–æ–¥: ${entryTime}\n`;
        message += `  üí∞ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: $${trade.entryPrice.toFixed(6)}\n`;
        message += `  üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${lastPrice.toFixed(6)}\n`;
        message += `  üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeSign}${priceChange.toFixed(2)}%\n`;
        message += `  ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdateTime}\n\n`;
      });
    }
    
    message += `üí° –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —ç—Ç–∏ —Å–¥–µ–ª–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥`;
    
    return message;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ watchlist
   */
  createWatchlistAddedMessage(symbol, tradeType, anomalyId = null) {
    const symbolName = symbol.replace('/USDT', '');
    const emoji = tradeType === 'Long' ? 'üü¢' : 'üî¥';
    const idText = anomalyId ? `\nüÜî ID: ${anomalyId}` : '';
    
    return `üìã ${symbolName} ‚Üí ${tradeType} ${emoji} - –î–û–ë–ê–í–õ–ï–ù –í WATCHLIST${idText}

üö® –ê–Ω–æ–º–∞–ª–∏—è –æ–±—ä–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${tradeType}
‚è∞ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (2 —Å–≤–µ—á–∏)

üí° –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç`;
  }

  /**
   * –ü–æ—Ç–æ–∫ 1: –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç (5 –º–∏–Ω—É—Ç)
   * WebSocket-–≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥
   */
  async runAnomalyCheck() {
    console.log('üîç [–ü–û–¢–û–ö 1] –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç...');
    
    for (const coin of this.filteredCoins) {
      await this.checkAnomalies(coin);
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log('‚úÖ [–ü–û–¢–û–ö 1] –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –ü–æ—Ç–æ–∫ 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ watchlist (30 —Å–µ–∫—É–Ω–¥)
   * WebSocket-–≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥
   */
  async runPendingCheck() {
    if (this.pendingAnomalies.size === 0) {
      return; // –ù–µ—Ç –º–æ–Ω–µ—Ç –≤ watchlist
    }
    
    console.log(`‚è≥ [–ü–û–¢–û–ö 2] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${this.pendingAnomalies.size} –º–æ–Ω–µ—Ç –≤ watchlist...`);
    await this.checkPendingAnomalies();
    console.log('‚úÖ [–ü–û–¢–û–ö 2] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ watchlist –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –ü–æ—Ç–æ–∫ 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ trade list (30 —Å–µ–∫—É–Ω–¥)
   * WebSocket-–≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥
   */
  async runActiveTradesCheck() {
    if (this.activeTrades.size === 0) {
      return; // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    }
    
    console.log(`üìä [–ü–û–¢–û–ö 3] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${this.activeTrades.size} —Å–¥–µ–ª–æ–∫ –≤ trade list...`);
    await this.trackActiveTrades();
    console.log('‚úÖ [–ü–û–¢–û–ö 3] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ trade list –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  async runMonitoring() {
    await this.runAnomalyCheck();
    await this.runPendingCheck();
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
   */
  async start() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      this.app = new CryptoScreenerApp();
      await this.app.start();
      
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...');
      
      // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      const loaded = await this.loadFilteredCoins();
      if (!loaded) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç');
      }

      await this.loadTradeHistory();
      await this.loadTradingStatistics();
      await this.loadPendingAnomalies();
      await this.loadActiveTrades();

      // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
      await this.runAnomalyCheck();
      await this.runPendingCheck();
      await this.runActiveTradesCheck();

      // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è 3 –ø–æ—Ç–æ–∫–æ–≤
      this.anomalyCheckInterval = setInterval(async () => {
        await this.runAnomalyCheck();
      }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

      this.pendingCheckInterval = setInterval(async () => {
        await this.runPendingCheck();
      }, 30 * 1000); // 30 —Å–µ–∫—É–Ω–¥

      this.activeTradesInterval = setInterval(async () => {
        await this.runActiveTradesCheck();
      }, 30 * 1000); // 30 —Å–µ–∫—É–Ω–¥

      console.log('‚è∞ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞:');
      console.log('   üîç –ü–æ—Ç–æ–∫ 1 (–∞–Ω–æ–º–∞–ª–∏–∏): –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
      console.log('   ‚è≥ –ü–æ—Ç–æ–∫ 2 (watchlist): –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥');
      console.log('   üìä –ü–æ—Ç–æ–∫ 3 (–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏): –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥');

      // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
      setInterval(() => {
        this.showStatistics();
      }, 30 * 60 * 1000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error.message);
      await this.stop();
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
   */
  async stop() {
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–æ—Ç–æ–∫–∏
    if (this.anomalyCheckInterval) {
      clearInterval(this.anomalyCheckInterval);
      this.anomalyCheckInterval = null;
    }
    
    if (this.pendingCheckInterval) {
      clearInterval(this.pendingCheckInterval);
      this.pendingCheckInterval = null;
    }
    
    if (this.activeTradesInterval) {
      clearInterval(this.activeTradesInterval);
      this.activeTradesInterval = null;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    await this.saveTradeHistory();
    await this.savePendingAnomalies();
    await this.saveActiveTrades();
    
    if (this.app) {
      await this.app.stop();
      this.app = null;
    }
    
    console.log('üõë –°–∏—Å—Ç–µ–º–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await system.stop();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await system.stop();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
const system = new VirtualTradingSystem();

if (require.main === module) {
  system.start().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { VirtualTradingSystem }; 