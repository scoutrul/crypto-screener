/**
 * –°–∏—Å—Ç–µ–º–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–∞ $1000
 * - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 * - –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–µ–π–∫—É/—Å—Ç–æ–ø—É
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–Ω—Ä–µ–π—Ç–∞
 */

const ccxt = require('ccxt');
const fs = require('fs').promises;
const path = require('path');
const { CryptoScreenerApp } = require('../src/app');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  timeframe: '15m',
  volumeThreshold: 6, // –û–±—ä–µ–º –≤ 6 —Ä–∞–∑ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
  priceThreshold: 0.005, // 0.5% –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  monitoringInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  priceTrackingInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
  historicalWindow: 8, // 8 —Å–≤–µ—á–µ–π (2 —á–∞—Å–∞)
  exchanges: ['Binance'],
  virtualDeposit: 1000, // $1000 –Ω–∞ —Å–¥–µ–ª–∫—É
  stopLossPercent: 0.01, // 1%
  takeProfitPercent: 0.03, // 3%
  breakEvenPercent: 0.20, // 20% –¥–ª—è –±–µ–∑—É–±—ã—Ç–∫–∞
  anomalyCooldown: 4, // 4 TF (1 —á–∞—Å) –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
  entryConfirmationTFs: 2 // 2 TF –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
};

class VirtualTradingSystem {
  constructor() {
    this.exchange = new ccxt.binance({ enableRateLimit: true });
    this.filteredCoins = [];
    this.activeTrades = new Map(); // symbol -> trade object
    this.watchlist = new Set(); // —Å–∏–º–≤–æ–ª—ã –≤ watchlist
    this.anomalyCooldowns = new Map(); // symbol -> timestamp
    this.tradeHistory = []; // –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
    this.app = null;
    this.monitoringInterval = null;
    this.priceTrackingInterval = null;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
   */
  async loadFilteredCoins() {
    try {
      let filename = path.join(__dirname, '..', 'data', 'binance-coins.json');
      let data;
      try {
        data = await fs.readFile(filename, 'utf8');
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç, —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –Ω–∞ Binance');
      } catch (error) {
        filename = path.join(__dirname, '..', 'data', 'filtered-coins.json');
        data = await fs.readFile(filename, 'utf8');
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç');
      }
      
      const coinsData = JSON.parse(data);
      this.filteredCoins = coinsData.coins;
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.filteredCoins.length} –º–æ–Ω–µ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç:', error.message);
      return false;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
   */
  async loadTradeHistory() {
    try {
      const filename = path.join(__dirname, '..', 'data', 'trade-history.json');
      const data = await fs.readFile(filename, 'utf8');
      this.tradeHistory = JSON.parse(data);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.tradeHistory.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫`);
    } catch (error) {
      console.log('üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
      this.tradeHistory = [];
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
   */
  async saveTradeHistory() {
    try {
      const dataDir = path.join(__dirname, '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });
      const filename = path.join(dataDir, 'trade-history.json');
      await fs.writeFile(filename, JSON.stringify(this.tradeHistory, null, 2));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫:', error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ —Å Binance —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   */
  async fetchCandles(symbol, since, limit = 100, retries = 3) {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        return await this.exchange.fetchOHLCV(symbol, CONFIG.timeframe, since, limit);
      } catch (error) {
        if (error.message.includes('does not have market symbol')) {
          console.log(`‚ö†Ô∏è ${symbol} –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ Binance, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          return [];
        } else if (error.message.includes('timeout') || error.message.includes('fetch failed')) {
          if (attempt < retries) {
            console.log(`‚è≥ –¢–∞–π–º–∞—É—Ç –¥–ª—è ${symbol}, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫...`);
            await new Promise(resolve => setTimeout(resolve, 2000));
            continue;
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è ${symbol} –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫:`, error.message);
            return [];
          }
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}:`, error.message);
          return [];
        }
      }
    }
    return [];
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
   */
  calculateAveragePrice(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalPrice = candles.reduce((sum, candle) => {
      return sum + (candle[1] + candle[4]) / 2; // (open + close) / 2
    }, 0);
    
    return totalPrice / candles.length;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
   */
  calculateAverageVolume(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalVolume = candles.reduce((sum, candle) => sum + candle[5], 0);
    return totalVolume / candles.length;
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –æ–±—ä–µ–º–∞
   */
  detectVolumeAnomaly(currentVolume, historicalVolume) {
    return currentVolume > historicalVolume * CONFIG.volumeThreshold;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cooldown –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π
   */
  isAnomalyOnCooldown(symbol) {
    const cooldownTime = this.anomalyCooldowns.get(symbol);
    if (!cooldownTime) return false;
    
    const now = Date.now();
    const cooldownDuration = CONFIG.anomalyCooldown * 15 * 60 * 1000; // 4 TF * 15 –º–∏–Ω—É—Ç
    return (now - cooldownTime) < cooldownDuration;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cooldown –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π
   */
  setAnomalyCooldown(symbol) {
    this.anomalyCooldowns.set(symbol, Date.now());
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
   */
  determineTradeType(anomalyPrice, historicalPrice) {
    const priceDiff = (anomalyPrice - historicalPrice) / historicalPrice;
    
    if (priceDiff > CONFIG.priceThreshold) {
      return 'Short';
    } else if (priceDiff < -CONFIG.priceThreshold) {
      return 'Long';
    }
    
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (2 TF)
   */
  async checkEntryConfirmation(symbol, tradeType, anomalyCandleIndex) {
    try {
      // –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const since = Date.now() - (CONFIG.historicalWindow * 15 * 60 * 1000);
      const candles = await this.fetchCandles(symbol, since, CONFIG.historicalWindow + CONFIG.entryConfirmationTFs, 3);
      
      if (candles.length < CONFIG.historicalWindow + CONFIG.entryConfirmationTFs) {
        console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ${symbol} (–ø–æ–ª—É—á–µ–Ω–æ ${candles.length}/${CONFIG.historicalWindow + CONFIG.entryConfirmationTFs})`);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 TF –ø–æ—Å–ª–µ –∞–Ω–æ–º–∞–ª–∏–∏
      const confirmationCandles = candles.slice(anomalyCandleIndex + 1, anomalyCandleIndex + 1 + CONFIG.entryConfirmationTFs);
      
      if (confirmationCandles.length < CONFIG.entryConfirmationTFs) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
      const firstPrice = this.calculateAveragePrice([confirmationCandles[0]]);
      const lastPrice = this.calculateAveragePrice([confirmationCandles[confirmationCandles.length - 1]]);
      const priceDiff = (lastPrice - firstPrice) / firstPrice;

      if (tradeType === 'Long' && priceDiff > CONFIG.priceThreshold) {
        return true; // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –¥–ª—è Long
      } else if (tradeType === 'Short' && priceDiff < -CONFIG.priceThreshold) {
        return true; // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è –¥–ª—è Short
      }

      return false;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è ${symbol}:`, error.message);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É
   */
  createVirtualTrade(symbol, tradeType, entryPrice) {
    const stopLoss = tradeType === 'Long' 
      ? entryPrice * (1 - CONFIG.stopLossPercent)
      : entryPrice * (1 + CONFIG.stopLossPercent);
    
    const takeProfit = tradeType === 'Long'
      ? entryPrice * (1 + CONFIG.takeProfitPercent)
      : entryPrice * (1 - CONFIG.takeProfitPercent);

    const trade = {
      id: `${symbol}_${Date.now()}`,
      symbol: symbol,
      type: tradeType,
      entryPrice: entryPrice,
      stopLoss: stopLoss,
      takeProfit: takeProfit,
      entryTime: new Date().toISOString(),
      status: 'open',
      virtualAmount: CONFIG.virtualDeposit,
      priceHistory: [{
        time: new Date().toISOString(),
        price: entryPrice
      }]
    };

    this.activeTrades.set(symbol, trade);
    this.watchlist.add(symbol);
    
    console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ ${tradeType} –¥–ª—è ${symbol} –ø–æ —Ü–µ–Ω–µ $${entryPrice.toFixed(6)}`);
    return trade;
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
   */
  async trackActiveTrades() {
    for (const [symbol, trade] of this.activeTrades) {
      try {
        const candles = await this.fetchCandles(symbol, Date.now() - 15 * 60 * 1000, 1, 3);
        if (candles.length === 0) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ`);
          continue;
        }

        const currentPrice = this.calculateAveragePrice(candles);
        
        // –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        trade.priceHistory.push({
          time: new Date().toISOString(),
          price: currentPrice
        });

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        let shouldClose = false;
        let closeReason = '';
        let profitLoss = 0;

        if (trade.type === 'Long') {
          if (currentPrice >= trade.takeProfit) {
            shouldClose = true;
            closeReason = 'take_profit';
            profitLoss = ((currentPrice - trade.entryPrice) / trade.entryPrice) * 100;
          } else if (currentPrice <= trade.stopLoss) {
            shouldClose = true;
            closeReason = 'stop_loss';
            profitLoss = ((currentPrice - trade.entryPrice) / trade.entryPrice) * 100;
          }
        } else { // Short
          if (currentPrice <= trade.takeProfit) {
            shouldClose = true;
            closeReason = 'take_profit';
            profitLoss = ((trade.entryPrice - currentPrice) / trade.entryPrice) * 100;
          } else if (currentPrice >= trade.stopLoss) {
            shouldClose = true;
            closeReason = 'stop_loss';
            profitLoss = ((trade.entryPrice - currentPrice) / trade.entryPrice) * 100;
          }
        }

        if (shouldClose) {
          await this.closeTrade(trade, currentPrice, closeReason, profitLoss);
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ${symbol}:`, error.message);
      }
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É
   */
  async closeTrade(trade, exitPrice, reason, profitLoss) {
    trade.exitPrice = exitPrice;
    trade.exitTime = new Date().toISOString();
    trade.status = 'closed';
    trade.closeReason = reason;
    trade.profitLoss = profitLoss;
    trade.duration = new Date(trade.exitTime) - new Date(trade.entryTime);

    // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.tradeHistory.push(trade);
    
    // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    this.activeTrades.delete(trade.symbol);
    this.watchlist.delete(trade.symbol);

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
    await this.saveTradeHistory();

    console.log(`üîí –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞ ${trade.type} –¥–ª—è ${trade.symbol}: ${profitLoss.toFixed(2)}% (${reason})`);
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.sendTradeNotification(trade);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
   */
  async sendTradeNotification(trade) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createTradeNotificationMessage(trade);
      await notificationRepository.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
   */
  createTradeNotificationMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const profitLossText = trade.profitLoss >= 0 ? `+${trade.profitLoss.toFixed(2)}%` : `${trade.profitLoss.toFixed(2)}%`;
    const emoji = trade.profitLoss >= 0 ? 'üü¢' : 'üî¥';
    
    return `${symbol} ‚Üí ${trade.type} ${emoji} –ó–ê–ö–†–´–¢–ê

–í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
–í—ã—Ö–æ–¥: $${trade.exitPrice.toFixed(6)}
–†–µ–∑—É–ª—å—Ç–∞—Ç: ${profitLossText}

–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(trade.duration / 1000 / 60)} –º–∏–Ω—É—Ç
–ü—Ä–∏—á–∏–Ω–∞: ${trade.closeReason === 'take_profit' ? '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç' : '–°—Ç–æ–ø-–ª–æ—Å—Å'}`;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  showStatistics() {
    const totalTrades = this.tradeHistory.length;
    const winningTrades = this.tradeHistory.filter(t => t.profitLoss > 0).length;
    const losingTrades = this.tradeHistory.filter(t => t.profitLoss < 0).length;
    const winRate = totalTrades > 0 ? (winningTrades / totalTrades * 100).toFixed(1) : 0;
    
    const totalProfit = this.tradeHistory.reduce((sum, t) => sum + t.profitLoss, 0);
    const avgProfit = totalTrades > 0 ? (totalProfit / totalTrades).toFixed(2) : 0;

    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò:');
    console.log(`üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${totalTrades}`);
    console.log(`üü¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${winningTrades}`);
    console.log(`üî¥ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${losingTrades}`);
    console.log(`üìä –í–∏–Ω—Ä–µ–π—Ç: ${winRate}%`);
    console.log(`üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${totalProfit.toFixed(2)}%`);
    console.log(`üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avgProfit}%`);
    console.log(`üëÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}`);
    console.log(`üìã –í watchlist: ${this.watchlist.size}`);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
   */
  async checkAnomalies(coin) {
    const symbol = `${coin.symbol}/USDT`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
    if (this.isAnomalyOnCooldown(symbol)) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞
    if (this.activeTrades.has(symbol)) {
      return;
    }

    try {
      const since = Date.now() - (CONFIG.historicalWindow * 15 * 60 * 1000);
      const candles = await this.fetchCandles(symbol, since, CONFIG.historicalWindow, 3);
      
      if (candles.length < CONFIG.historicalWindow) {
        console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol} (–ø–æ–ª—É—á–µ–Ω–æ ${candles.length}/${CONFIG.historicalWindow})`);
        return;
      }

      const anomalyCandle = candles[candles.length - 2];
      const historicalCandles = candles.slice(0, -2);

      const anomalyVolume = anomalyCandle[5];
      const avgHistoricalVolume = this.calculateAverageVolume(historicalCandles);
      const anomalyPrice = this.calculateAveragePrice([anomalyCandle]);
      const avgHistoricalPrice = this.calculateAveragePrice(historicalCandles);

      // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –æ–±—ä–µ–º–∞
      if (!this.detectVolumeAnomaly(anomalyVolume, avgHistoricalVolume)) {
        return;
      }

      console.log(`üö® –ê–Ω–æ–º–∞–ª–∏—è –æ–±—ä–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–ª—è ${symbol}!`);

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
      const tradeType = this.determineTradeType(anomalyPrice, avgHistoricalPrice);
      
      if (!tradeType) {
        console.log(`‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –¥–ª—è ${symbol}`);
        this.setAnomalyCooldown(symbol);
        return;
      }

      console.log(`üìà –¢–∏–ø —Å–¥–µ–ª–∫–∏: ${tradeType}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
      const entryConfirmed = await this.checkEntryConfirmation(symbol, tradeType, candles.length - 2);

      if (!entryConfirmed) {
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è ${symbol}`);
        return;
      }

      console.log(`‚úÖ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è ${symbol}!`);

      // –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É
      const currentPrice = this.calculateAveragePrice([candles[candles.length - 1]]);
      const trade = this.createVirtualTrade(symbol, tradeType, currentPrice);

      // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cooldown
      this.setAnomalyCooldown(symbol);

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
      await this.sendNewTradeNotification(trade);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${symbol}:`, error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
   */
  async sendNewTradeNotification(trade) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createNewTradeMessage(trade);
      await notificationRepository.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
   */
  createNewTradeMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const emoji = trade.type === 'Long' ? 'üü¢' : 'üî¥';
    const stopLoss = trade.stopLoss;
    const takeProfit = trade.takeProfit;

    return `${symbol} ‚Üí ${trade.type} ${emoji}

–ë–∏—Ä–∂–∏: Binance, Bybit, OKX, BingX
–í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
–°—Ç–æ–ø: $${stopLoss.toFixed(6)}
–¢–µ–π–∫: $${takeProfit.toFixed(6)}
–û–±—ä–µ–º: –Ω–µ –±–æ–ª–µ–µ 2.0% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
–û—Ç—Ä–∞–±–æ—Ç–∫–∞: –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤

‚úîÔ∏è –ü—Ä–∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ 20%, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ ${trade.type === 'Long' ? '—á—É—Ç—å –≤—ã—à–µ' : '—á—É—Ç—å –Ω–∏–∂–µ'} —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
‚úîÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É –≤ –ø—Ä–∏–±—ã–ª—å —Ä–∞–Ω—å—à–µ —Ç–µ–π–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞`;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  async runMonitoring() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–Ω–æ–º–∞–ª–∏–π...');
    
    for (const coin of this.filteredCoins) {
      await this.checkAnomalies(coin);
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
   */
  async start() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      this.app = new CryptoScreenerApp();
      await this.app.start();
      
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...');
      
      // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      const loaded = await this.loadFilteredCoins();
      if (!loaded) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç');
      }

      await this.loadTradeHistory();

      // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      await this.runMonitoring();

      // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
      this.monitoringInterval = setInterval(async () => {
        await this.runMonitoring();
      }, CONFIG.monitoringInterval);

      this.priceTrackingInterval = setInterval(async () => {
        await this.trackActiveTrades();
      }, CONFIG.priceTrackingInterval);

      console.log(`‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${CONFIG.monitoringInterval / 1000 / 60} –º–∏–Ω—É—Ç`);
      console.log(`üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ ${CONFIG.priceTrackingInterval / 1000 / 60} –º–∏–Ω—É—Ç`);

      // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
      setInterval(() => {
        this.showStatistics();
      }, 30 * 60 * 1000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error.message);
      await this.stop();
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
   */
  async stop() {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }
    
    if (this.priceTrackingInterval) {
      clearInterval(this.priceTrackingInterval);
      this.priceTrackingInterval = null;
    }
    
    if (this.app) {
      await this.app.stop();
      this.app = null;
    }
    
    console.log('üõë –°–∏—Å—Ç–µ–º–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await system.stop();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await system.stop();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
const system = new VirtualTradingSystem();

if (require.main === module) {
  system.start().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { VirtualTradingSystem }; 