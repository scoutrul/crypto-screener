/**
 * –°–∏—Å—Ç–µ–º–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å REST API
 * –ù–∞—Å–ª–µ–¥—É–µ—Ç –æ–±—â—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏–∑ VirtualTradingBaseService
 */

const ccxt = require('ccxt');
const { CryptoScreenerApp } = require('../src/app');
const { VirtualTradingBaseService } = require('../src/domain/services/VirtualTradingBaseService');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è REST API —Å–∏—Å—Ç–µ–º—ã (–Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
const CONFIG = {
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ—Ç–æ–∫–æ–≤
  activeTradesInterval: 30 * 1000,      // 30 —Å–µ–∫—É–Ω–¥ - Trade List (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  pendingCheckInterval: 30 * 1000,      // 30 —Å–µ–∫—É–Ω–¥ - Watchlist (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  anomalyCheckInterval: 5 * 60 * 1000,  // 5 –º–∏–Ω—É—Ç - Anomalies (–Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è REST API —Å–∏—Å—Ç–µ–º—ã
  monitoringInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  priceTrackingInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
  exchanges: ['Binance']
};

class VirtualTradingSystem extends VirtualTradingBaseService {
  constructor() {
    // –í—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    super(CONFIG);
    
    // REST API —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
    this.exchange = new ccxt.binance({ 
      enableRateLimit: true,
      options: {
        defaultType: 'spot' // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ spot API
      }
    });
    this.app = null;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
    this.taskQueue = [];
    this.isProcessing = false;
    this.lastActiveTradesCheck = 0;
    this.lastPendingCheck = 0;
    this.lastAnomalyCheck = 0;
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (REST API)
    this.anomalyCheckInterval = null;      // –ü–æ—Ç–æ–∫ 1: 5 –º–∏–Ω—É—Ç
    this.pendingCheckInterval = null;      // –ü–æ—Ç–æ–∫ 2: 30 —Å–µ–∫—É–Ω–¥  
    this.activeTradesInterval = null;      // –ü–æ—Ç–æ–∫ 3: 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
   */
  async initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ (REST API)...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    this.app = new CryptoScreenerApp();
    await this.app.start();
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
    const loaded = await this.loadFilteredCoins();
    if (!loaded) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç');
    }

    await this.loadTradeHistory();
    await this.loadTradingStatistics();
    await this.loadPendingAnomalies();
    await this.loadActiveTrades();

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (this.app && this.app.container) {
      this.setNotificationService(this.app.container.getNotificationService());
    }
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å
   */
  addTaskToQueue(task, priority) {
    this.taskQueue.push({ task, priority, timestamp: Date.now() });
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (1 - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    this.taskQueue.sort((a, b) => a.priority - b.priority);
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
    if (!this.isProcessing) {
      this.processQueue();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å
   */
  async processQueue() {
    if (this.isProcessing) {
      return;
    }
    
    this.isProcessing = true;
    
    while (this.taskQueue.length > 0) {
      const { task, priority } = this.taskQueue.shift();
      
      try {
        console.log(`üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ${priority} (${this.taskQueue.length} –≤ –æ—á–µ—Ä–µ–¥–∏)`);
        await task();
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ${priority}:`, error.message);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 0));
    }
    
    // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–µ–º –µ—ë –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 3 (–∞–Ω–æ–º–∞–ª–∏–∏)
    if (this.taskQueue.length === 0) {
      console.log('üì¶ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 3 (–∞–Ω–æ–º–∞–ª–∏–∏)...');
      this.addTaskToQueue(async () => {
        console.log('üîç [–ü–û–¢–û–ö 3] –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏...');
        await this.runAnomalyCheck();
      }, 3);
    } else {
      console.log(`üìä –û—á–µ—Ä–µ–¥—å —Å–æ–¥–µ—Ä–∂–∏—Ç ${this.taskQueue.length} –∑–∞–¥–∞—á`);
    }
    
    this.isProcessing = false;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ —Å Binance —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (REST API —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
   */
  async fetchCandles(symbol, since, limit = 100, retries = 3) {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        return await this.exchange.fetchOHLCV(symbol, this.config.timeframe, since, limit);
      } catch (error) {
        if (error.message.includes('does not have market symbol')) {
          console.log(`‚ö†Ô∏è ${symbol} –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ Binance, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          return [];
        } else if (error.message.includes('timeout') || error.message.includes('fetch failed')) {
          if (attempt < retries) {
            console.log(`‚è≥ –¢–∞–π–º–∞—É—Ç –¥–ª—è ${symbol}, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫...`);
            await new Promise(resolve => setTimeout(resolve, 2000));
            continue;
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è ${symbol} –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫:`, error.message);
            return [];
          }
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}:`, error.message);
          return [];
        }
      }
    }
    return [];
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
   */
  calculateAveragePrice(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalPrice = candles.reduce((sum, candle) => {
      return sum + (candle[1] + candle[4]) / 2; // (open + close) / 2
    }, 0);
    
    return totalPrice / candles.length;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
   */
  calculateAverageVolume(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalVolume = candles.reduce((sum, candle) => sum + candle[5], 0);
    return totalVolume / candles.length;
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –æ–±—ä–µ–º–∞
   */
  detectVolumeAnomaly(currentVolume, historicalVolume) {
    return currentVolume > historicalVolume * CONFIG.volumeThreshold;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cooldown –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π
   */
  isAnomalyOnCooldown(symbol) {
    const cooldownTime = this.anomalyCooldowns.get(symbol);
    if (!cooldownTime) return false;
    
    const now = Date.now();
    const cooldownDuration = CONFIG.anomalyCooldown * 15 * 60 * 1000; // 4 TF * 15 –º–∏–Ω—É—Ç
    return (now - cooldownTime) < cooldownDuration;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cooldown –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π
   */
  setAnomalyCooldown(symbol) {
    this.anomalyCooldowns.set(symbol, Date.now());
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
   */
  determineTradeType(anomalyPrice, historicalPrice) {
    const priceDiff = (anomalyPrice - historicalPrice) / historicalPrice;
    
    if (priceDiff > CONFIG.priceThreshold) {
      return 'Short';
    } else if (priceDiff < -CONFIG.priceThreshold) {
      return 'Long';
    }
    
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ (REST API —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π)
   */
  async checkEntryConfirmation(symbol, tradeType, anomalyCandleIndex) {
    try {
      const since = Date.now() - (this.config.entryConfirmationTFs * 15 * 60 * 1000);
      const candles = await this.fetchCandles(symbol, since, this.config.entryConfirmationTFs + 1, 3);
      
      if (candles.length < this.config.entryConfirmationTFs) {
        console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞ ${symbol}`);
        return;
      }

      const currentPrice = this.calculateAveragePrice(candles.slice(-1));
      const anomaly = this.pendingAnomalies.get(symbol);
      
      if (!anomaly) {
        console.log(`‚ö†Ô∏è ${symbol} - –ê–Ω–æ–º–∞–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ pending`);
        return;
      }
      
      console.log(`üîç [CONFIRMATION] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞ –¥–ª—è ${symbol}:`);
      console.log(`   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${currentPrice}`);
      console.log(`   üìä –ê–Ω–æ–º–∞–ª–∏—è: ${tradeType} –ø–æ $${anomaly.anomalyPrice}`);
      
      // –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞)
      if (!anomaly.isConsolidated) {
        console.log(`üîç [CONSOLIDATION] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è ${symbol}...`);
        
        // –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–æ–º–∞–ª—å–Ω—É—é —Å–≤–µ—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        const anomalyCandle = candles[anomalyCandleIndex] || candles[candles.length - 2];
        
        if (!this.checkConsolidation(anomalyCandle)) {
          console.log(`‚ùå ${symbol} - –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å, —É–¥–∞–ª—è–µ–º –∏–∑ watchlist`);
          this.pendingAnomalies.delete(symbol);
          await this.savePendingAnomalies();
          return;
        }
        
        // –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç–∞–ø
        console.log(`‚úÖ ${symbol} - –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å`);
        anomaly.isConsolidated = true;
        anomaly.closePrice = currentPrice;
        
        // –≠—Ç–∞–ø 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∞–ø–∞ –∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        const { entryLevel, cancelLevel } = this.calculateEntryLevels(currentPrice, tradeType);
        anomaly.entryLevel = entryLevel;
        anomaly.cancelLevel = cancelLevel;
        
        console.log(`üìä ${symbol} - –£—Ä–æ–≤–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: –≤—Ö–æ–¥ $${entryLevel}, –æ—Ç–º–µ–Ω–∞ $${cancelLevel}`);
        await this.savePendingAnomalies();
        return;
      }
      
      // –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
      const result = this.checkEntryConditions(currentPrice, anomaly.entryLevel, anomaly.cancelLevel, tradeType);
      
      if (result === 'entry') {
        console.log(`‚úÖ ${symbol} - –£—Å–ª–æ–≤–∏–µ –≤—Ö–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`);
        
        // –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
        const currentVolume = candles[candles.length - 1][5]; // –û–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
        const trade = this.createVirtualTrade(
          symbol, 
          tradeType, 
          currentPrice, 
          anomaly.anomalyId, 
          currentVolume,
          anomaly.entryLevel,
          anomaly.cancelLevel
        );
        
        // –£–¥–∞–ª–∏—Ç—å –∏–∑ watchlist
        this.pendingAnomalies.delete(symbol);
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
        await this.sendNewTradeNotification(trade);
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
        await this.saveActiveTrades();
        await this.savePendingAnomalies();
        
      } else if (result === 'cancel') {
        console.log(`‚ùå ${symbol} - –£—Å–ª–æ–≤–∏–µ –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —É–¥–∞–ª—è–µ–º –∏–∑ watchlist`);
        this.pendingAnomalies.delete(symbol);
        await this.savePendingAnomalies();
        
      } else {
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç
        if (this.checkEntryTimeout(anomaly)) {
          console.log(`‚è∞ ${symbol} - –¢–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞, —É–¥–∞–ª—è–µ–º –∏–∑ watchlist`);
          this.pendingAnomalies.delete(symbol);
          await this.savePendingAnomalies();
        } else {
          console.log(`‚è≥ ${symbol} - –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π...`);
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞ –¥–ª—è ${symbol}:`, error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É
   */
  createVirtualTrade(symbol, tradeType, entryPrice, anomalyId = null, currentVolume = null) {
    const stopLoss = tradeType === 'Long' 
      ? entryPrice * (1 - CONFIG.stopLossPercent)
      : entryPrice * (1 + CONFIG.stopLossPercent);
    
    const takeProfit = tradeType === 'Long'
      ? entryPrice * (1 + CONFIG.takeProfitPercent)
      : entryPrice * (1 - CONFIG.takeProfitPercent);

    const trade = {
      id: `${symbol}_${Date.now()}`,
      anomalyId: anomalyId || `${symbol.replace('/USDT', '')}_${Date.now()}`,
      symbol: symbol,
      type: tradeType,
      entryPrice: entryPrice,
      stopLoss: stopLoss,
      takeProfit: takeProfit,
      entryTime: new Date().toISOString(),
      status: 'open',
      virtualAmount: CONFIG.virtualDeposit,
      lastPrice: entryPrice,
      lastUpdateTime: new Date().toISOString(),
      currentVolume: currentVolume // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º —Å–≤–µ—á–∏
    };

    this.activeTrades.set(symbol, trade);
    this.watchlist.add(symbol);
    
    console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ ${tradeType} –¥–ª—è ${symbol} –ø–æ —Ü–µ–Ω–µ $${entryPrice.toFixed(6)}`);
    return trade;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å pending anomalies (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
   */
  async checkPendingAnomalies() {
    if (this.pendingAnomalies.size === 0) {
      return; // –ù–µ—Ç –º–æ–Ω–µ—Ç –≤ watchlist
    }
    
    console.log(`‚è≥ [–ü–û–¢–û–ö 2] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${this.pendingAnomalies.size} –º–æ–Ω–µ—Ç –≤ watchlist (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π)...`);
    
    const batchSize = 5; // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è watchlist
    const delayBetweenBatches = 500; // –ú–µ–Ω—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    const anomalies = Array.from(this.pendingAnomalies.entries());
    
    // –†–∞–∑–±–∏—Ç—å –Ω–∞ –±–∞—Ç—á–∏
    for (let i = 0; i < anomalies.length; i += batchSize) {
      const batch = anomalies.slice(i, i + batchSize);
      
      console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ watchlist –±–∞—Ç—á–∞ ${Math.floor(i / batchSize) + 1}/${Math.ceil(anomalies.length / batchSize)} (${batch.length} –º–æ–Ω–µ—Ç)`);
      
      // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –±–∞—Ç—á–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const promises = batch.map(async ([symbol, anomaly]) => {
        try {
          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞
          await this.checkEntryConfirmation(symbol, anomaly.tradeType, anomaly.anomalyCandleIndex);
          
          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç watchlist
          this.checkWatchlistTimeout(symbol, anomaly);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${symbol}:`, error.message);
        }
      });
      
      // –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–∞—Ç—á–µ
      await Promise.all(promises);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (i + batchSize < anomalies.length) {
        await new Promise(resolve => setTimeout(resolve, delayBetweenBatches));
      }
    }
    
    console.log('‚úÖ [–ü–û–¢–û–ö 2] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ watchlist –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç watchlist (REST API —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
   */
  checkWatchlistTimeout(symbol, anomaly) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
    if (this.checkEntryTimeout(anomaly)) {
      console.log(`‚è∞ ${symbol} - –¢–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞ (6 TF), —É–¥–∞–ª—è–µ–º –∏–∑ watchlist`);
      
      // –£–¥–∞–ª–∏—Ç—å –∏–∑ watchlist
      this.pendingAnomalies.delete(symbol);
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      this.savePendingAnomalies();
    }
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
   */
  async trackActiveTrades() {
    if (this.activeTrades.size === 0) {
      return; // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    }
    
    console.log(`üìä [–ü–û–¢–û–ö 3] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${this.activeTrades.size} —Å–¥–µ–ª–æ–∫ –≤ trade list (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π)...`);
    
    const batchSize = 3; // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    const delayBetweenBatches = 300; // –ú–µ–Ω—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    const trades = Array.from(this.activeTrades.entries());
    
    // –†–∞–∑–±–∏—Ç—å –Ω–∞ –±–∞—Ç—á–∏
    for (let i = 0; i < trades.length; i += batchSize) {
      const batch = trades.slice(i, i + batchSize);
      
      console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ trade list –±–∞—Ç—á–∞ ${Math.floor(i / batchSize) + 1}/${Math.ceil(trades.length / batchSize)} (${batch.length} —Å–¥–µ–ª–æ–∫)`);
      
      // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –±–∞—Ç—á–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const promises = batch.map(async ([symbol, trade]) => {
        try {
          const since = Date.now() - (2 * 15 * 60 * 1000); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–≤–µ—á–∏
          const candles = await this.fetchCandles(symbol, since, 2, 3);
          
          if (candles.length === 0) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol}`);
            return;
          }
          
          const currentPrice = this.calculateAveragePrice(candles);
          const currentVolume = candles[candles.length - 1][5]; // –û–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
          
          // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É, –≤—Ä–µ–º—è –∏ –æ–±—ä–µ–º
          trade.lastPrice = currentPrice;
          trade.lastUpdateTime = new Date().toISOString();
          trade.currentVolume = currentVolume; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º
          
          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
          this.checkTradeExitConditions(trade, currentPrice);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ${symbol}:`, error.message);
        }
      });
      
      // –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–∞—Ç—á–µ
      await Promise.all(promises);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (i + batchSize < trades.length) {
        await new Promise(resolve => setTimeout(resolve, delayBetweenBatches));
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    await this.saveActiveTrades();
    
    console.log('‚úÖ [–ü–û–¢–û–ö 3] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ trade list –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏ (REST API —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
   */
  checkTradeExitConditions(trade, currentPrice) {
    const { symbol, type, entryPrice, stopLoss, takeProfit } = trade;
    
    let shouldClose = false;
    let reason = '';
    let profitLoss = 0;
    
    // –õ–æ–≥–∏–∫–∞ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    if (type === 'Long') {
      if (currentPrice >= takeProfit) {
        shouldClose = true;
        reason = 'take_profit';
        profitLoss = ((currentPrice - entryPrice) / entryPrice) * 100;
      } else if (currentPrice <= stopLoss) {
        shouldClose = true;
        reason = 'stop_loss';
        profitLoss = ((currentPrice - entryPrice) / entryPrice) * 100;
      }
    } else { // Short
      if (currentPrice <= takeProfit) {
        shouldClose = true;
        reason = 'take_profit';
        profitLoss = ((entryPrice - currentPrice) / entryPrice) * 100;
      } else if (currentPrice >= stopLoss) {
        shouldClose = true;
        reason = 'stop_loss';
        profitLoss = ((entryPrice - currentPrice) / entryPrice) * 100;
      }
    }
    
    if (shouldClose) {
      console.log(`üî¥ ${symbol} - –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏: ${reason} (${profitLoss.toFixed(2)}%)`);
      this.closeTrade(trade, currentPrice, reason, profitLoss);
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É
   */
  async closeTrade(trade, exitPrice, reason, profitLoss) {
    trade.exitPrice = exitPrice;
    trade.exitTime = new Date().toISOString();
    trade.status = 'closed';
    trade.closeReason = reason;
    trade.profitLoss = profitLoss;
    trade.duration = new Date(trade.exitTime) - new Date(trade.entryTime);

    // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.tradeHistory.push(trade);
    
    // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏ watchlist
    this.activeTrades.delete(trade.symbol);
    this.watchlist.delete(trade.symbol);
    console.log(`üóëÔ∏è ${trade.symbol} —É–¥–∞–ª–µ–Ω –∏–∑ trade list –∏ watchlist`);

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await this.saveTradeHistory();
    await this.saveTradingStatistics();

    console.log(`üîí –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞ ${trade.type} –¥–ª—è ${trade.symbol}: ${profitLoss.toFixed(2)}% (${reason})`);
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.sendTradeNotification(trade);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
   */
  async sendTradeNotification(trade) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createTradeNotificationMessage(trade);
      await notificationRepository.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
   */
  createTradeNotificationMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const profitLossText = trade.profitLoss >= 0 ? `+${trade.profitLoss.toFixed(2)}%` : `${trade.profitLoss.toFixed(2)}%`;
    const emoji = trade.profitLoss >= 0 ? 'üü¢' : 'üî¥';
    const reasonText = trade.closeReason === 'take_profit' ? '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç' : '–°—Ç–æ–ø-–ª–æ—Å—Å';
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.getCurrentStatistics();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
    const closeTime = new Date(trade.exitTime).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    
    return `${symbol} ‚Üí ${trade.type} ${emoji} –ó–ê–ö–†–´–¢–ê
üÜî ID: ${trade.anomalyId || trade.id || 'N/A'}
üïê –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: ${closeTime}

üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
üí∞ –í—ã—Ö–æ–¥: $${trade.exitPrice.toFixed(6)}
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${profitLossText}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(trade.duration / 1000 / 60)} –º–∏–Ω—É—Ç
üéØ –ü—Ä–∏—á–∏–Ω–∞: ${reasonText}

üìà –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades} üü¢
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades} üî¥
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate}%
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats.totalProfit}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getCurrentStatistics() {
    if (!this.tradingStatistics) {
      return {
        totalTrades: 0,
        winningTrades: 0,
        losingTrades: 0,
        winRate: 0,
        totalProfit: 0
      };
    }
    
    return {
      totalTrades: this.tradingStatistics.totalTrades,
      winningTrades: this.tradingStatistics.winningTrades,
      losingTrades: this.tradingStatistics.losingTrades,
      winRate: this.tradingStatistics.winRate,
      totalProfit: this.tradingStatistics.totalProfit.toFixed(2)
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
   */
  updateTradingStatistics() {
    if (!this.tradingStatistics) return;

    const totalTrades = this.tradeHistory.length;
    const winningTrades = this.tradeHistory.filter(t => t.profitLoss > 0).length;
    const losingTrades = this.tradeHistory.filter(t => t.profitLoss < 0).length;
    const winRate = totalTrades > 0 ? (winningTrades / totalTrades * 100).toFixed(1) : 0;
    const totalProfit = this.tradeHistory.reduce((sum, t) => sum + t.profitLoss, 0);
    const averageProfit = totalTrades > 0 ? (totalProfit / totalTrades).toFixed(2) : 0;

    // –ù–∞–π—Ç–∏ –ª—É—á—à—É—é –∏ —Ö—É–¥—à—É—é —Å–¥–µ–ª–∫–∏
    const bestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((best, current) => 
        current.profitLoss > best.profitLoss ? current : best
      ) : null;

    const worstTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((worst, current) => 
        current.profitLoss < worst.profitLoss ? current : worst
      ) : null;

    // –ù–∞–π—Ç–∏ —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –∏ –∫–æ—Ä–æ—Ç–∫—É—é —Å–¥–µ–ª–∫–∏
    const longestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((longest, current) => 
        current.duration > longest.duration ? current : longest
      ) : null;

    const shortestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((shortest, current) => 
        current.duration < shortest.duration ? current : shortest
      ) : null;

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    const systemStartTime = new Date(this.tradingStatistics.systemStartTime);
    const now = new Date();
    const totalDaysRunning = Math.ceil((now - systemStartTime) / (1000 * 60 * 60 * 24));
    const averageTradesPerDay = totalDaysRunning > 0 ? (totalTrades / totalDaysRunning).toFixed(1) : 0;

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.tradingStatistics = {
      ...this.tradingStatistics,
      lastUpdated: new Date().toISOString(),
      totalTrades,
      winningTrades,
      losingTrades,
      winRate: parseFloat(winRate),
      totalProfit,
      averageProfit: parseFloat(averageProfit),
      bestTrade: bestTrade ? {
        symbol: bestTrade.symbol,
        type: bestTrade.type,
        profitLoss: bestTrade.profitLoss,
        entryTime: bestTrade.entryTime
      } : null,
      worstTrade: worstTrade ? {
        symbol: worstTrade.symbol,
        type: worstTrade.type,
        profitLoss: worstTrade.profitLoss,
        entryTime: worstTrade.entryTime
      } : null,
      longestTrade: longestTrade ? {
        symbol: longestTrade.symbol,
        type: longestTrade.type,
        duration: longestTrade.duration,
        entryTime: longestTrade.entryTime
      } : null,
      shortestTrade: shortestTrade ? {
        symbol: shortestTrade.symbol,
        type: shortestTrade.type,
        duration: shortestTrade.duration,
        entryTime: shortestTrade.entryTime
      } : null,
      tradeHistory: this.tradeHistory.map(trade => ({
        id: trade.id,
        symbol: trade.symbol,
        type: trade.type,
        entryPrice: trade.entryPrice,
        exitPrice: trade.exitPrice,
        profitLoss: trade.profitLoss,
        entryTime: trade.entryTime,
        exitTime: trade.exitTime,
        closeReason: trade.closeReason,
        duration: trade.duration
      })),
      totalDaysRunning,
      averageTradesPerDay: parseFloat(averageTradesPerDay)
    };
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
   */
  showStatistics() {
    // –í—ã–∑–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥
    super.showStatistics();
    
    // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
    console.log('\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ô –û–ß–ï–†–ï–î–ò:');
    console.log(`üì¶ –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: ${this.taskQueue.length}`);
    console.log(`‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: ${this.isProcessing ? '–î–∞' : '–ù–µ—Ç'}`);
    
    const now = Date.now();
    const activeTradesAgo = this.lastActiveTradesCheck ? Math.round((now - this.lastActiveTradesCheck) / 1000) : '–ù–∏–∫–æ–≥–¥–∞';
    const pendingAgo = this.lastPendingCheck ? Math.round((now - this.lastPendingCheck) / 1000) : '–ù–∏–∫–æ–≥–¥–∞';
    const anomalyAgo = this.lastAnomalyCheck ? Math.round((now - this.lastAnomalyCheck) / 1000) : '–ù–∏–∫–æ–≥–¥–∞';
    
    console.log(`ü•á –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${activeTradesAgo} —Å–µ–∫ –Ω–∞–∑–∞–¥`);
    console.log(`ü•à Watchlist: ${pendingAgo} —Å–µ–∫ –Ω–∞–∑–∞–¥`);
    console.log(`ü•â –ê–Ω–æ–º–∞–ª–∏–∏: ${anomalyAgo} —Å–µ–∫ –Ω–∞–∑–∞–¥`);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
   */
  async checkAnomalies(coin) {
    const symbol = `${coin.symbol}/USDT`;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ runAnomalyCheck, –ø–æ—ç—Ç–æ–º—É —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É

    try {
      const since = Date.now() - (this.config.historicalWindow * 15 * 60 * 1000);
      const candles = await this.fetchCandles(symbol, since, Math.max(this.config.historicalWindow, 20), 3);
      
      if (candles.length < this.config.historicalWindow) {
        console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol} (–ø–æ–ª—É—á–µ–Ω–æ ${candles.length}/${this.config.historicalWindow})`);
        return;
      }

      const anomalyCandle = candles[candles.length - 2];
      const historicalCandles = candles.slice(0, -2);

      const anomalyVolume = anomalyCandle[5];
      const avgHistoricalVolume = this.calculateAverageVolume(historicalCandles);
      const anomalyPrice = this.calculateAveragePrice([anomalyCandle]);
      const avgHistoricalPrice = this.calculateAveragePrice(historicalCandles);

      // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –æ–±—ä–µ–º–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
      if (!this.detectVolumeAnomaly(anomalyVolume, avgHistoricalVolume)) {
        return;
      }

      console.log(`üö® –ê–Ω–æ–º–∞–ª–∏—è –æ–±—ä–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–ª—è ${symbol}!`);

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
      const tradeType = this.determineTradeType(anomalyPrice, avgHistoricalPrice);
      
      if (!tradeType) {
        console.log(`‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –¥–ª—è ${symbol}`);
        this.setAnomalyCooldown(symbol);
        return;
      }

      console.log(`üìà –¢–∏–ø —Å–¥–µ–ª–∫–∏: ${tradeType}`);

      // –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞–Ω–æ–º–∞–ª–∏–∏
      const anomalyId = `${symbol.replace('/USDT', '')}_${Date.now()}`;
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –≤ pending –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const anomalyTime = new Date(anomalyCandle[0]);
      
      this.pendingAnomalies.set(symbol, {
        anomalyId,
        tradeType: tradeType,
        anomalyTime: anomalyTime.toISOString(),
        watchlistTime: new Date().toISOString(), // –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ watchlist
        anomalyCandleIndex: candles.length - 2,
        anomalyPrice: anomalyPrice,
        historicalPrice: avgHistoricalPrice,
        currentVolume: anomalyVolume // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º —Å–≤–µ—á–∏
      });
      
      console.log(`üìù –ê–Ω–æ–º–∞–ª–∏—è ${symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ pending (${tradeType})`);
      
      await this.savePendingAnomalies();

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${symbol}:`, error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
   */
  async sendNewTradeNotification(trade) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createNewTradeMessage(trade);
      await notificationRepository.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
   */
  createNewTradeMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const emoji = trade.type === 'Long' ? 'üü¢' : 'üî¥';
    const stopLoss = trade.stopLoss;
    const takeProfit = trade.takeProfit;

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.getCurrentStatistics();

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
    const tradeTime = new Date(trade.entryTime).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    return `üéØ –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê: ${symbol} ‚Üí ${trade.type} ${emoji}
üÜî ID: ${trade.anomalyId || trade.id || 'N/A'}
üïê –í—Ä–µ–º—è: ${tradeTime}

üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
üõë –°—Ç–æ–ø: $${stopLoss.toFixed(6)}
üéØ –¢–µ–π–∫: $${takeProfit.toFixed(6)}
üíµ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $${trade.virtualAmount}

üìà –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades} üü¢
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades} üî¥
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –û–±—ä–µ–º: –Ω–µ –±–æ–ª–µ–µ 2.0% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
‚Ä¢ –ü—Ä–∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ 20% - —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ ${trade.type === 'Long' ? '—á—É—Ç—å –≤—ã—à–µ' : '—á—É—Ç—å –Ω–∏–∂–µ'} –≤—Ö–æ–¥–∞
‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ä–∞–Ω—å—à–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ watchlist
   */
  async sendWatchlistUpdateNotification(symbol, tradeType, priceDiff) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createWatchlistUpdateMessage(symbol, tradeType, priceDiff);
      await notificationRepository.sendTelegramMessage(message);
      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ watchlist –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${symbol}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ watchlist –¥–ª—è ${symbol}:`, error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ watchlist
   */
  createWatchlistUpdateMessage(symbol, tradeType, priceDiff) {
    const symbolName = symbol.replace('/USDT', '');
    const priceChangeText = priceDiff >= 0 ? `+${(priceDiff * 100).toFixed(2)}%` : `${(priceDiff * 100).toFixed(2)}%`;
    const emoji = tradeType === 'Long' ? 'üü¢' : 'üî¥';
    
    return `‚è≥ ${symbolName} ‚Üí ${tradeType} ${emoji} - –û–ñ–ò–î–ê–ù–ò–ï

üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${priceChangeText}
üéØ –ù—É–∂–Ω–æ: ${tradeType === 'Long' ? '>+0.5%' : '<-0.5%'}
‚è∞ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ–º –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è

üí° –ú–æ–Ω–µ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ watchlist –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ watchlist
   */
  async sendWatchlistAddedNotification(symbol, tradeType, anomalyId = null) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createWatchlistAddedMessage(symbol, tradeType, anomalyId);
      await notificationRepository.sendTelegramMessage(message);
      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ watchlist –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${symbol}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ watchlist –¥–ª—è ${symbol}:`, error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
   */
  async sendExistingTradesNotification() {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createExistingTradesMessage();
      await notificationRepository.sendTelegramMessage(message);
      console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö
   */
  createExistingTradesMessage() {
    const trades = Array.from(this.activeTrades.values());
    const longTrades = trades.filter(t => t.type === 'Long');
    const shortTrades = trades.filter(t => t.type === 'Short');
    
    let message = `üìä –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–î–ï–õ–ö–ò (${trades.length})\n\n`;
    
    if (longTrades.length > 0) {
      message += `üü¢ LONG (${longTrades.length}):\n`;
      longTrades.forEach(trade => {
        const symbol = trade.symbol.replace('/USDT', '');
        const entryTime = new Date(trade.entryTime).toLocaleString('ru-RU');
        const lastUpdateTime = trade.lastUpdateTime ? new Date(trade.lastUpdateTime).toLocaleString('ru-RU') : '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å';
        
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        const lastPrice = trade.lastPrice || trade.entryPrice;
        const priceChange = ((lastPrice - trade.entryPrice) / trade.entryPrice) * 100;
        const changeEmoji = priceChange >= 0 ? 'üü¢' : 'üî¥';
        const changeSign = priceChange >= 0 ? '+' : '';
        
        message += `‚Ä¢ ${symbol} ${changeEmoji}\n`;
        message += `  üïê –í—Ö–æ–¥: ${entryTime}\n`;
        message += `  üí∞ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: $${trade.entryPrice.toFixed(6)}\n`;
        message += `  üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${lastPrice.toFixed(6)}\n`;
        message += `  üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeSign}${priceChange.toFixed(2)}%\n`;
        message += `  ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdateTime}\n\n`;
      });
    }
    
    if (shortTrades.length > 0) {
      message += `üî¥ SHORT (${shortTrades.length}):\n`;
      shortTrades.forEach(trade => {
        const symbol = trade.symbol.replace('/USDT', '');
        const entryTime = new Date(trade.entryTime).toLocaleString('ru-RU');
        const lastUpdateTime = trade.lastUpdateTime ? new Date(trade.lastUpdateTime).toLocaleString('ru-RU') : '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å';
        
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–¥–ª—è Short –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è)
        const lastPrice = trade.lastPrice || trade.entryPrice;
        const priceChange = ((trade.entryPrice - lastPrice) / trade.entryPrice) * 100;
        const changeEmoji = priceChange >= 0 ? 'üü¢' : 'üî¥';
        const changeSign = priceChange >= 0 ? '+' : '';
        
        message += `‚Ä¢ ${symbol} ${changeEmoji}\n`;
        message += `  üïê –í—Ö–æ–¥: ${entryTime}\n`;
        message += `  üí∞ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: $${trade.entryPrice.toFixed(6)}\n`;
        message += `  üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${lastPrice.toFixed(6)}\n`;
        message += `  üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeSign}${priceChange.toFixed(2)}%\n`;
        message += `  ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdateTime}\n\n`;
      });
    }
    
    message += `üí° –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —ç—Ç–∏ —Å–¥–µ–ª–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥`;
    
    return message;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ watchlist
   */
  createWatchlistAddedMessage(symbol, tradeType, anomalyId = null) {
    const symbolName = symbol.replace('/USDT', '');
    const emoji = tradeType === 'Long' ? 'üü¢' : 'üî¥';
    const idText = anomalyId ? `\nüÜî ID: ${anomalyId}` : '';
    
    return `üìã ${symbolName} ‚Üí ${tradeType} ${emoji} - –î–û–ë–ê–í–õ–ï–ù –í WATCHLIST${idText}

üö® –ê–Ω–æ–º–∞–ª–∏—è –æ–±—ä–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${tradeType}
‚è∞ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (2 —Å–≤–µ—á–∏)

üí° –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç`;
  }

  /**
   * –ü–æ—Ç–æ–∫ 1: –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç (5 –º–∏–Ω—É—Ç) - REST API
   * –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3 - –Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
   */
  async runAnomalyCheck() {
    this.addTaskToQueue(async () => {
      console.log('üîç [–ü–û–¢–û–ö 1] –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π)...');
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö –∏–ª–∏ pending
      const availableCoins = this.filteredCoins.filter(coin => {
        const symbol = `${coin.symbol}/USDT`;
        const isInActiveTrade = this.activeTrades.has(symbol);
        const isInPending = this.pendingAnomalies.has(symbol);
        const isOnCooldown = this.isAnomalyOnCooldown(symbol);
        
        if (isInActiveTrade) {
          console.log(`üí∞ ${symbol} —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          return false;
        }
        if (isInPending) {
          console.log(`‚è≥ ${symbol} —É–∂–µ –≤ pending, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          return false;
        }
        if (isOnCooldown) {
          console.log(`üö´ ${symbol} –Ω–∞ cooldown, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          return false;
        }
        
        return true;
      });
      
      console.log(`üìä –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${availableCoins.length}/${this.filteredCoins.length} –º–æ–Ω–µ—Ç`);
      
      if (availableCoins.length === 0) {
        console.log('‚úÖ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
        this.lastAnomalyCheck = Date.now();
        return;
      }
      
      const batchSize = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const delayBetweenBatches = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (1 —Å–µ–∫—É–Ω–¥–∞)
      
      // –†–∞–∑–±–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ –±–∞—Ç—á–∏
      for (let i = 0; i < availableCoins.length; i += batchSize) {
        const batch = availableCoins.slice(i, i + batchSize);
        
        console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${Math.floor(i / batchSize) + 1}/${Math.ceil(availableCoins.length / batchSize)} (${batch.length} –º–æ–Ω–µ—Ç)`);
        
        // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –±–∞—Ç—á–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const promises = batch.map(async (coin) => {
          try {
            await this.checkAnomalies(coin);
          } catch (error) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${coin.symbol}:`, error.message);
          }
        });
        
        // –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–∞—Ç—á–µ
        await Promise.all(promises);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
        if (i + batchSize < availableCoins.length) {
          await new Promise(resolve => setTimeout(resolve, delayBetweenBatches));
        }
      }
      
      console.log('‚úÖ [–ü–û–¢–û–ö 1] –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
      this.lastAnomalyCheck = Date.now();
    }, 3);
  }

  /**
   * –ü–æ—Ç–æ–∫ 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ watchlist (30 —Å–µ–∫—É–Ω–¥) - REST API
   * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 - —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
   */
  async runPendingCheck() {
    this.addTaskToQueue(async () => {
      await this.checkPendingAnomalies();
      this.lastPendingCheck = Date.now();
    }, 2);
  }

  /**
   * –ü–æ—Ç–æ–∫ 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ trade list (30 —Å–µ–∫—É–Ω–¥) - REST API
   * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
   */
  async runActiveTradesCheck() {
    this.addTaskToQueue(async () => {
      await this.trackActiveTrades();
      this.lastActiveTradesCheck = Date.now();
    }, 1);
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
   */
  async start() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
      await this.initialize();
      
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ (REST API) —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é...');
      
      // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
      await this.runActiveTradesCheck(); // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 - —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
      await this.runPendingCheck();      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 - –ø–æ—Ç–æ–º watchlist
      await this.runAnomalyCheck();      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3 - –ø–æ—Ç–æ–º –æ–±—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

      // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 3 –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      console.log('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 3...');
      this.addTaskToQueue(async () => {
        console.log('üîç [–ü–û–¢–û–ö 3] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π...');
        await this.runAnomalyCheck();
      }, 3);

      // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è 3 –ø–æ—Ç–æ–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é
      this.activeTradesInterval = setInterval(async () => {
        await this.runActiveTradesCheck();
      }, this.config.activeTradesInterval); // Trade List - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

      this.pendingCheckInterval = setInterval(async () => {
        await this.runPendingCheck();
      }, this.config.pendingCheckInterval); // Watchlist - —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

      this.anomalyCheckInterval = setInterval(async () => {
        await this.runAnomalyCheck();
      }, this.config.anomalyCheckInterval); // Anomalies - –Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

      console.log('‚è∞ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞:');
      console.log(`   ü•á –ü–æ—Ç–æ–∫ 3 (–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏): –∫–∞–∂–¥—ã–µ ${this.config.activeTradesInterval / 1000} —Å–µ–∫ - –ü–†–ò–û–†–ò–¢–ï–¢ 1`);
      console.log(`   ü•à –ü–æ—Ç–æ–∫ 2 (watchlist): –∫–∞–∂–¥—ã–µ ${this.config.pendingCheckInterval / 1000} —Å–µ–∫ - –ü–†–ò–û–†–ò–¢–ï–¢ 2`);
      console.log(`   ü•â –ü–æ—Ç–æ–∫ 1 (–∞–Ω–æ–º–∞–ª–∏–∏): –∫–∞–∂–¥—ã–µ ${this.config.anomalyCheckInterval / 1000 / 60} –º–∏–Ω - –ü–†–ò–û–†–ò–¢–ï–¢ 3`);
      console.log('   üì§ –°—Ç–∞—Ç—É—Å –≤ Telegram: –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞');

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
      setTimeout(async () => {
        try {
          const { sendSystemStatus } = require('./send-system-status.js');
          await sendSystemStatus();
        } catch (error) {
          console.log('‚ÑπÔ∏è –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', error.message);
        }
      }, 60 * 1000); // 1 –º–∏–Ω—É—Ç–∞

      // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
      setInterval(() => {
        this.showStatistics();
      }, 30 * 60 * 1000);

      // –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –≤ Telegram –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
      setInterval(async () => {
        try {
          const { sendSystemStatus } = require('./send-system-status.js');
          await sendSystemStatus();
        } catch (error) {
          console.log('‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', error.message);
        }
      }, 2 * 60 * 60 * 1000); // 2 —á–∞—Å–∞

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error.message);
      await this.stop();
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
   */
  async stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
    
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–æ—Ç–æ–∫–∏
    if (this.anomalyCheckInterval) {
      clearInterval(this.anomalyCheckInterval);
      this.anomalyCheckInterval = null;
    }
    
    if (this.pendingCheckInterval) {
      clearInterval(this.pendingCheckInterval);
      this.pendingCheckInterval = null;
    }
    
    if (this.activeTradesInterval) {
      clearInterval(this.activeTradesInterval);
      this.activeTradesInterval = null;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
    await this.saveTradeHistory();
    await this.savePendingAnomalies();
    await this.saveActiveTrades();
    
    if (this.app) {
      await this.app.stop();
      this.app = null;
    }
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await system.stop();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await system.stop();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
const system = new VirtualTradingSystem();

if (require.main === module) {
  system.start().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { VirtualTradingSystem }; 