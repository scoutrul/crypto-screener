/**
 * –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 * –ù–∞—Å–ª–µ–¥—É–µ—Ç –æ–±—â—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏–∑ VirtualTradingBaseService
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã —Å WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 */

const ccxt = require('ccxt');
const { CryptoScreenerApp } = require('../src/app');
const { BinanceWebSocketProvider } = require('../src/infrastructure/adapters/BinanceWebSocketProvider.js');
const { VirtualTradingBaseService } = require('../src/domain/services/VirtualTradingBaseService');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Full WebSocket —Å–∏—Å—Ç–µ–º—ã (–Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
const CONFIG = {
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ—Ç–æ–∫–æ–≤
  activeTradesInterval: 30 * 1000,      // 30 —Å–µ–∫—É–Ω–¥ - Trade List (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  pendingCheckInterval: 30 * 1000,      // 30 —Å–µ–∫—É–Ω–¥ - Watchlist (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  anomalyCheckInterval: 5 * 60 * 1000,  // 5 –º–∏–Ω—É—Ç - Anomalies (–Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Full WebSocket —Å–∏—Å—Ç–µ–º—ã
  monitoringInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  priceTrackingInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
  exchanges: ['Binance'],
  
  // WebSocket –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  useWebSocket: true,
  websocketIntervals: {
    watchlist: '1m', // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è watchlist
    tradeList: '1m'  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è trade list
  }
};

class VirtualTradingSystemFull extends VirtualTradingBaseService {
  constructor() {
    // –í—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    super(CONFIG);
    
    // Full WebSocket —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
    this.exchange = new ccxt.binance({ 
      enableRateLimit: true,
      options: {
        defaultType: 'spot' // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ spot API
      }
    });
    this.app = null;
    
    // WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    this.wsProvider = null;
    this.wsConnected = false;
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è REST API (–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫)
    this.anomalyCheckInterval = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
   */
  async initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
    this.app = new CryptoScreenerApp();
    await this.app.start();
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
    const loaded = await this.loadFilteredCoins();
    if (!loaded) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç');
    }

    await this.loadTradeHistory();
    await this.loadTradingStatistics();
    await this.loadPendingAnomalies();
    await this.loadActiveTrades();

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (this.app) {
      this.setNotificationService(this.app.getNotificationService());
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)
    if (CONFIG.useWebSocket) {
      await this.initializeWebSocket();
    }
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (Full WebSocket —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
   */
  async initializeWebSocket() {
    console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...');
    
    this.wsProvider = new BinanceWebSocketProvider();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.wsProvider.onConnect(async () => {
      console.log('üéâ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!');
      this.wsConnected = true;
      await this.subscribeToWatchlistStreams();
      await this.subscribeToTradeListStreams();
    });
    
    this.wsProvider.onDisconnect((code, reason) => {
      console.log(`üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: ${code} - ${reason}`);
      this.wsConnected = false;
    });
    
    this.wsProvider.onError((error) => {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
    });
    
    // –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket
    await this.wsProvider.connect();
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–æ–∫–∏ –¥–ª—è watchlist (Full WebSocket —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
   */
  async subscribeToWatchlistStreams() {
    if (!this.wsConnected) {
      console.log('‚ö†Ô∏è [WS] WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ watchlist');
      return;
    }
    
    if (this.pendingAnomalies.size === 0) {
      console.log('üìã [WS] –ù–µ—Ç pending anomalies –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ watchlist');
      return;
    }
    
    const streams = [];
    
    this.pendingAnomalies.forEach((anomaly, symbol) => {
      console.log(`üì° [WS] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ watchlist –¥–ª—è ${symbol}`);
      streams.push({
        symbol: symbol.replace('/USDT', ''),
        interval: this.config.websocketIntervals.watchlist,
        callback: (symbol, candle) => this.handleWatchlistKline(symbol, candle)
      });
    });
    
    if (streams.length > 0) {
      console.log(`üì° [WS] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${streams.length} –ø–æ—Ç–æ–∫–æ–≤ watchlist:`, streams.map(s => s.symbol));
      await this.wsProvider.subscribeToMultipleStreams(streams);
      console.log(`üì° [WS] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${streams.length} –ø–æ—Ç–æ–∫–æ–≤ watchlist –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–æ–∫–∏ –¥–ª—è trade list (Full WebSocket —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
   */
  async subscribeToTradeListStreams() {
    if (!this.wsConnected) {
      console.log('‚ö†Ô∏è [WS] WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ trade list');
      return;
    }
    
    if (this.activeTrades.size === 0) {
      console.log('üí∞ [WS] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ trade list');
      return;
    }
    
    const streams = [];
    
    this.activeTrades.forEach((trade, symbol) => {
      console.log(`üì° [WS] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ trade list –¥–ª—è ${symbol}`);
      streams.push({
        symbol: symbol.replace('/USDT', ''),
        interval: this.config.websocketIntervals.tradeList,
        callback: (symbol, candle) => this.handleTradeListKline(symbol, candle)
      });
    });
    
    if (streams.length > 0) {
      console.log(`üì° [WS] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${streams.length} –ø–æ—Ç–æ–∫–æ–≤ trade list:`, streams.map(s => s.symbol));
      await this.wsProvider.subscribeToMultipleStreams(streams);
      console.log(`üì° [WS] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${streams.length} –ø–æ—Ç–æ–∫–æ–≤ trade list –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–µ—á–∏ –¥–ª—è watchlist (Full WebSocket —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
   */
  handleWatchlistKline(symbol, candle) {
    const fullSymbol = `${symbol}/USDT`;
    const anomaly = this.pendingAnomalies.get(fullSymbol);
    
    if (!anomaly) {
      console.log(`‚ö†Ô∏è [WATCHLIST] ${fullSymbol} - –ê–Ω–æ–º–∞–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ pending anomalies`);
      return;
    }
    
    console.log(`üìä [WATCHLIST] ${fullSymbol} - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã: $${candle.close}`);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∞–Ω–æ–º–∞–ª–∏–∏
    anomaly.lastUpdateTime = new Date().toISOString();
    anomaly.lastPrice = candle.close;
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
    this.checkEntryConfirmationWebSocket(fullSymbol, anomaly, candle);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç watchlist (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
    this.checkWatchlistTimeout(fullSymbol, anomaly);
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    this.savePendingAnomalies();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–µ—á–∏ –¥–ª—è trade list (Full WebSocket —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
   */
  async handleTradeListKline(symbol, candle) {
    const fullSymbol = `${symbol}/USDT`;
    const trade = this.activeTrades.get(fullSymbol);
    
    if (!trade) {
      console.log(`‚ö†Ô∏è [TRADE LIST] ${fullSymbol} - –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ active trades`);
      return;
    }
    
    console.log(`üìä [TRADE LIST] ${fullSymbol} - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã: $${candle.close}`);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
    const oldPrice = trade.lastPrice;
    trade.lastPrice = candle.close;
    trade.lastUpdateTime = new Date().toISOString();
    
    console.log(`   üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: $${oldPrice} ‚Üí $${candle.close}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
    this.checkTradeExitConditionsWebSocket(trade, candle.close);
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await this.saveActiveTrades();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –¥–ª—è WebSocket (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å —ç—Ç–∞–ø–∞–º–∏)
   */
  async checkEntryConfirmationWebSocket(symbol, anomaly, currentCandle) {
    const currentPrice = currentCandle.close;
    
    console.log(`üîç [CONFIRMATION] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞ –¥–ª—è ${symbol}:`);
    console.log(`   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${currentPrice}`);
    console.log(`   üìä –ê–Ω–æ–º–∞–ª–∏—è: ${anomaly.tradeType} –ø–æ $${anomaly.anomalyPrice}`);
    
    console.log(`üîç [CONFIRMATION] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞ –¥–ª—è ${symbol}:`);
    console.log(`   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${currentPrice}`);
    console.log(`   üìä –¶–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏: $${anomalyPrice}`);
    console.log(`   üìà –¢–∏–ø —Å–¥–µ–ª–∫–∏: ${tradeType}`);
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (–ª–æ–≥–∏–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
    const priceChange = ((currentPrice - anomalyPrice) / anomalyPrice) * 100;
    const expectedDirection = tradeType === 'Long' ? 1 : -1;
    
    console.log(`   üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${priceChange.toFixed(2)}%`);
    console.log(`   üéØ –û–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${expectedDirection > 0 ? '–≤–≤–µ—Ä—Ö' : '–≤–Ω–∏–∑'}`);
    console.log(`   üìè –ü–æ—Ä–æ–≥: ${CONFIG.priceThreshold * 100}%`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è (–ª–æ–≥–∏–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
    if (Math.abs(priceChange) >= this.config.priceThreshold * 100 && 
        Math.sign(priceChange) === expectedDirection) {
      
      console.log(`‚úÖ ${symbol} - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞! –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${priceChange.toFixed(2)}%`);
      
      // –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
      const currentVolume = currentCandle[5]; // –û–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
      const trade = this.createVirtualTrade(symbol, tradeType, currentPrice, anomaly.anomalyId, currentVolume);
      
      // –£–¥–∞–ª–∏—Ç—å –∏–∑ watchlist
      this.pendingAnomalies.delete(symbol);
      
      // –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç WebSocket –ø–æ—Ç–æ–∫–∞
      if (this.wsProvider) {
        this.wsProvider.unsubscribeFromKline(symbol.replace('/USDT', ''));
      }
      
      // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–æ–∫ –¥–ª—è trade list
      if (this.wsProvider && this.wsConnected) {
        this.wsProvider.subscribeToKline(
          symbol.replace('/USDT', ''),
          this.config.websocketIntervals.tradeList,
          (symbol, candle) => this.handleTradeListKline(symbol, candle)
        );
      }
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
      await this.sendNewTradeNotification(trade);
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
      await this.saveActiveTrades();
      await this.savePendingAnomalies();
      
    } else {
      console.log(`‚è≥ ${symbol} - –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${priceChange.toFixed(2)}%`);
      console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç watchlist (Full WebSocket —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
   */
  checkWatchlistTimeout(symbol, anomaly) {
    const watchlistTime = new Date(anomaly.watchlistTime || anomaly.anomalyTime);
    const timeInWatchlist = Date.now() - watchlistTime.getTime();
    const minutesInWatchlist = Math.floor(timeInWatchlist / (15 * 60 * 1000));
    
    if (minutesInWatchlist >= this.config.anomalyCooldown) {
      console.log(`‚è∞ ${symbol} –≤ watchlist —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (${minutesInWatchlist} TF), —É–¥–∞–ª—è–µ–º`);
      
      // –£–¥–∞–ª–∏—Ç—å –∏–∑ watchlist
      this.pendingAnomalies.delete(symbol);
      
      // –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç WebSocket –ø–æ—Ç–æ–∫–∞
      if (this.wsProvider) {
        this.wsProvider.unsubscribeFromKline(symbol.replace('/USDT', ''));
      }
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      this.savePendingAnomalies();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏ –¥–ª—è WebSocket (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  checkTradeExitConditionsWebSocket(trade, currentPrice) {
    const { symbol, type, entryPrice, stopLoss, takeProfit } = trade;
    
    let shouldClose = false;
    let reason = '';
    let profitLoss = 0;
    
    // –õ–æ–≥–∏–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
    if (type === 'Long') {
      if (currentPrice >= takeProfit) {
        shouldClose = true;
        reason = 'take_profit';
        profitLoss = ((currentPrice - entryPrice) / entryPrice) * 100;
      } else if (currentPrice <= stopLoss) {
        shouldClose = true;
        reason = 'stop_loss';
        profitLoss = ((currentPrice - entryPrice) / entryPrice) * 100;
      }
    } else { // Short
      if (currentPrice <= takeProfit) {
        shouldClose = true;
        reason = 'take_profit';
        profitLoss = ((entryPrice - currentPrice) / entryPrice) * 100;
      } else if (currentPrice >= stopLoss) {
        shouldClose = true;
        reason = 'stop_loss';
        profitLoss = ((entryPrice - currentPrice) / entryPrice) * 100;
      }
    }
    
    if (shouldClose) {
      console.log(`üî¥ ${symbol} - –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏: ${reason} (${profitLoss.toFixed(2)}%)`);
      this.closeTrade(trade, currentPrice, reason, profitLoss);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ —Å Binance —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (Full WebSocket —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞)
   */
  async fetchCandles(symbol, since, limit = 100, retries = 3) {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        return await this.exchange.fetchOHLCV(symbol, this.config.timeframe, since, limit);
      } catch (error) {
        if (error.message.includes('does not have market symbol')) {
          return [];
        } else if (error.message.includes('timeout') || error.message.includes('fetch failed')) {
          if (attempt < retries) {
            console.log(`‚è≥ –¢–∞–π–º–∞—É—Ç –¥–ª—è ${symbol}, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫...`);
            await new Promise(resolve => setTimeout(resolve, 2000));
            continue;
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è ${symbol} –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫:`, error.message);
            return [];
          }
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}:`, error.message);
          return [];
        }
      }
    }
    return [];
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  calculateAveragePrice(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalPrice = candles.reduce((sum, candle) => {
      return sum + (candle[1] + candle[4]) / 2; // (open + close) / 2
    }, 0);
    
    return totalPrice / candles.length;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  calculateAverageVolume(candles) {
    if (!candles || candles.length === 0) return 0;
    
    const totalVolume = candles.reduce((sum, candle) => sum + candle[5], 0);
    return totalVolume / candles.length;
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –æ–±—ä–µ–º–∞ (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  detectVolumeAnomaly(currentVolume, historicalVolume) {
    return currentVolume > historicalVolume * this.config.volumeThreshold;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cooldown –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  isAnomalyOnCooldown(symbol) {
    const cooldownTime = this.anomalyCooldowns.get(symbol);
    if (!cooldownTime) return false;
    
    const now = Date.now();
    const cooldownDuration = this.config.anomalyCooldown * 15 * 60 * 1000; // 4 TF * 15 –º–∏–Ω—É—Ç
    return (now - cooldownTime) < cooldownDuration;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cooldown –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  setAnomalyCooldown(symbol) {
    this.anomalyCooldowns.set(symbol, Date.now());
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  determineTradeType(anomalyPrice, historicalPrice) {
    const priceDiff = (anomalyPrice - historicalPrice) / historicalPrice;
    
    if (priceDiff > this.config.priceThreshold) {
      return 'Short';
    } else if (priceDiff < -this.config.priceThreshold) {
      return 'Long';
    }
    
    return null;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  createVirtualTrade(symbol, tradeType, entryPrice, anomalyId = null, currentVolume = null) {
    const stopLoss = tradeType === 'Long' 
      ? entryPrice * (1 - this.config.stopLossPercent)
      : entryPrice * (1 + this.config.stopLossPercent);
    
    const takeProfit = tradeType === 'Long'
      ? entryPrice * (1 + this.config.takeProfitPercent)
      : entryPrice * (1 - this.config.takeProfitPercent);

    const trade = {
      id: `${symbol}_${Date.now()}`,
      anomalyId: anomalyId || `${symbol.replace('/USDT', '')}_${Date.now()}`,
      symbol: symbol,
      type: tradeType,
      entryPrice: entryPrice,
      stopLoss: stopLoss,
      takeProfit: takeProfit,
      entryTime: new Date().toISOString(),
      status: 'open',
      lastPrice: entryPrice,
      lastUpdateTime: new Date().toISOString(),
      currentVolume: currentVolume // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º —Å–≤–µ—á–∏
    };

    this.activeTrades.set(symbol, trade);
    this.watchlist.add(symbol);
    
    console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ ${tradeType} –¥–ª—è ${symbol} –ø–æ —Ü–µ–Ω–µ $${entryPrice.toFixed(6)}`);
    return trade;
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  async closeTrade(trade, exitPrice, reason, profitLoss) {
    trade.exitPrice = exitPrice;
    trade.exitTime = new Date().toISOString();
    trade.status = 'closed';
    trade.closeReason = reason;
    trade.profitLoss = profitLoss;
    trade.duration = new Date(trade.exitTime) - new Date(trade.entryTime);

    // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.tradeHistory.push(trade);
    
    // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏ watchlist
    this.activeTrades.delete(trade.symbol);
    this.watchlist.delete(trade.symbol);
    console.log(`üóëÔ∏è ${trade.symbol} —É–¥–∞–ª–µ–Ω –∏–∑ trade list –∏ watchlist`);

    // –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç WebSocket –ø–æ—Ç–æ–∫–∞
    if (this.wsProvider) {
      this.wsProvider.unsubscribeFromKline(trade.symbol.replace('/USDT', ''));
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await this.saveTradeHistory();
    await this.saveTradingStatistics();

    console.log(`üîí –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞ ${trade.type} –¥–ª—è ${trade.symbol}: ${profitLoss.toFixed(2)}% (${reason})`);
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.sendTradeNotification(trade);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  async sendTradeNotification(trade) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createTradeNotificationMessage(trade);
      await notificationRepository.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  createTradeNotificationMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const profitLossText = trade.profitLoss >= 0 ? `+${trade.profitLoss.toFixed(2)}%` : `${trade.profitLoss.toFixed(2)}%`;
    const emoji = trade.profitLoss >= 0 ? 'üü¢' : 'üî¥';
    const reasonText = trade.closeReason === 'take_profit' ? '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç' : '–°—Ç–æ–ø-–ª–æ—Å—Å';
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.getCurrentStatistics();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
    const closeTime = new Date(trade.exitTime).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    
    return `${symbol} ‚Üí ${trade.type} ${emoji} –ó–ê–ö–†–´–¢–ê
üÜî ID: ${trade.anomalyId || trade.id || 'N/A'}
üïê –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: ${closeTime}

üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
üí∞ –í—ã—Ö–æ–¥: $${trade.exitPrice.toFixed(6)}
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${profitLossText}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(trade.duration / 1000 / 60)} –º–∏–Ω—É—Ç
üéØ –ü—Ä–∏—á–∏–Ω–∞: ${reasonText}

üìà –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades} üü¢
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades} üî¥
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate}%
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats.totalProfit}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  getCurrentStatistics() {
    if (!this.tradingStatistics) {
      return {
        totalTrades: 0,
        winningTrades: 0,
        losingTrades: 0,
        winRate: 0,
        totalProfit: 0
      };
    }
    
    return {
      totalTrades: this.tradingStatistics.totalTrades,
      winningTrades: this.tradingStatistics.winningTrades,
      losingTrades: this.tradingStatistics.losingTrades,
      winRate: this.tradingStatistics.winRate,
      totalProfit: this.tradingStatistics.totalProfit.toFixed(2)
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏ (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  updateTradingStatistics() {
    if (!this.tradingStatistics) return;

    const totalTrades = this.tradeHistory.length;
    const winningTrades = this.tradeHistory.filter(t => t.profitLoss > 0).length;
    const losingTrades = this.tradeHistory.filter(t => t.profitLoss < 0).length;
    const winRate = totalTrades > 0 ? (winningTrades / totalTrades * 100).toFixed(1) : 0;
    const totalProfit = this.tradeHistory.reduce((sum, t) => sum + t.profitLoss, 0);
    const averageProfit = totalTrades > 0 ? (totalProfit / totalTrades).toFixed(2) : 0;

    // –ù–∞–π—Ç–∏ –ª—É—á—à—É—é –∏ —Ö—É–¥—à—É—é —Å–¥–µ–ª–∫–∏
    const bestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((best, current) => 
        current.profitLoss > best.profitLoss ? current : best
      ) : null;

    const worstTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((worst, current) => 
        current.profitLoss < worst.profitLoss ? current : worst
      ) : null;

    // –ù–∞–π—Ç–∏ —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –∏ –∫–æ—Ä–æ—Ç–∫—É—é —Å–¥–µ–ª–∫–∏
    const longestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((longest, current) => 
        current.duration > longest.duration ? current : longest
      ) : null;

    const shortestTrade = this.tradeHistory.length > 0 ? 
      this.tradeHistory.reduce((shortest, current) => 
        current.duration < shortest.duration ? current : shortest
      ) : null;

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    const systemStartTime = new Date(this.tradingStatistics.systemStartTime);
    const now = new Date();
    const totalDaysRunning = Math.ceil((now - systemStartTime) / (1000 * 60 * 60 * 24));
    const averageTradesPerDay = totalDaysRunning > 0 ? (totalTrades / totalDaysRunning).toFixed(1) : 0;

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.tradingStatistics = {
      ...this.tradingStatistics,
      lastUpdated: new Date().toISOString(),
      totalTrades,
      winningTrades,
      losingTrades,
      winRate: parseFloat(winRate),
      totalProfit,
      averageProfit: parseFloat(averageProfit),
      bestTrade: bestTrade ? {
        symbol: bestTrade.symbol,
        type: bestTrade.type,
        profitLoss: bestTrade.profitLoss,
        entryTime: bestTrade.entryTime
      } : null,
      worstTrade: worstTrade ? {
        symbol: worstTrade.symbol,
        type: worstTrade.type,
        profitLoss: worstTrade.profitLoss,
        entryTime: worstTrade.entryTime
      } : null,
      longestTrade: longestTrade ? {
        symbol: longestTrade.symbol,
        type: longestTrade.type,
        duration: longestTrade.duration,
        entryTime: longestTrade.entryTime
      } : null,
      shortestTrade: shortestTrade ? {
        symbol: shortestTrade.symbol,
        type: shortestTrade.type,
        duration: shortestTrade.duration,
        entryTime: shortestTrade.entryTime
      } : null,
      tradeHistory: this.tradeHistory.map(trade => ({
        id: trade.id,
        symbol: trade.symbol,
        type: trade.type,
        entryPrice: trade.entryPrice,
        exitPrice: trade.exitPrice,
        profitLoss: trade.profitLoss,
        entryTime: trade.entryTime,
        exitTime: trade.exitTime,
        closeReason: trade.closeReason,
        duration: trade.duration
      })),
      totalDaysRunning,
      averageTradesPerDay: parseFloat(averageTradesPerDay)
    };
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞)
   */
  showStatistics() {
    // –í—ã–∑–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥
    super.showStatistics();
    
    // –î–æ–±–∞–≤–∏—Ç—å WebSocket —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (this.wsProvider) {
      const wsStatus = this.wsProvider.getConnectionStatus();
      console.log(`üîå WebSocket: ${wsStatus.isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}`);
      console.log(`üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${wsStatus.activeSubscriptions}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
   */
  async checkAnomalies(coin) {
    const symbol = `${coin.symbol}/USDT`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
    if (this.isAnomalyOnCooldown(symbol)) {
      console.log(`üö´ ${symbol} –Ω–∞ cooldown, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞
    if (this.activeTrades.has(symbol)) {
      console.log(`üí∞ ${symbol} —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ pending anomaly –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
    if (this.pendingAnomalies.has(symbol)) {
      console.log(`‚è≥ ${symbol} —É–∂–µ –≤ pending, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ`);
      return;
    }

    try {
      const since = Date.now() - (this.config.historicalWindow * 15 * 60 * 1000);
      const candles = await this.fetchCandles(symbol, since, Math.max(this.config.historicalWindow, 20), 3);
      
      if (candles.length < this.config.historicalWindow) {
        return;
      }

      const anomalyCandle = candles[candles.length - 2];
      const historicalCandles = candles.slice(0, -2);

      const anomalyVolume = anomalyCandle[5];
      const avgHistoricalVolume = this.calculateAverageVolume(historicalCandles);
      const anomalyPrice = this.calculateAveragePrice([anomalyCandle]);
      const avgHistoricalPrice = this.calculateAveragePrice(historicalCandles);

      // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –æ–±—ä–µ–º–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
      if (!this.detectVolumeAnomaly(anomalyVolume, avgHistoricalVolume)) {
        return;
      }

      console.log(`üö® –ê–Ω–æ–º–∞–ª–∏—è –æ–±—ä–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–ª—è ${symbol}!`);

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
      const tradeType = this.determineTradeType(anomalyPrice, avgHistoricalPrice);
      
      if (!tradeType) {
        console.log(`‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –¥–ª—è ${symbol}`);
        this.setAnomalyCooldown(symbol);
        return;
      }

      console.log(`üìà –¢–∏–ø —Å–¥–µ–ª–∫–∏: ${tradeType}`);

      // –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞–Ω–æ–º–∞–ª–∏–∏
      const anomalyId = `${symbol.replace('/USDT', '')}_${Date.now()}`;
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –≤ pending –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const anomalyTime = new Date(anomalyCandle[0]);
      
      this.pendingAnomalies.set(symbol, {
        anomalyId,
        tradeType: tradeType,
        anomalyTime: anomalyTime.toISOString(),
        watchlistTime: new Date().toISOString(), // –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ watchlist
        anomalyCandleIndex: candles.length - 2,
        anomalyPrice: anomalyPrice,
        historicalPrice: avgHistoricalPrice
      });
      
      console.log(`üìù –ê–Ω–æ–º–∞–ª–∏—è ${symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ pending (${tradeType})`);
      
      // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ WebSocket –ø–æ—Ç–æ–∫ –¥–ª—è watchlist
      if (this.wsProvider && this.wsConnected) {
        this.wsProvider.subscribeToKline(
          symbol.replace('/USDT', ''),
          this.config.websocketIntervals.watchlist,
          (symbol, candle) => this.handleWatchlistKline(symbol, candle)
        );
      }
      
      await this.savePendingAnomalies();

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${symbol}:`, error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  async sendNewTradeNotification(trade) {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createNewTradeMessage(trade);
      await notificationRepository.sendTelegramMessage(message);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  createNewTradeMessage(trade) {
    const symbol = trade.symbol.replace('/USDT', '');
    const emoji = trade.type === 'Long' ? 'üü¢' : 'üî¥';
    const stopLoss = trade.stopLoss;
    const takeProfit = trade.takeProfit;

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.getCurrentStatistics();

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
    const tradeTime = new Date(trade.entryTime).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    return `üéØ –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê: ${symbol} ‚Üí ${trade.type} ${emoji}
üÜî ID: ${trade.anomalyId || trade.id || 'N/A'}
üïê –í—Ä–µ–º—è: ${tradeTime}

üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}
üõë –°—Ç–æ–ø: $${stopLoss.toFixed(6)}
üéØ –¢–µ–π–∫: $${takeProfit.toFixed(6)}

üìà –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades} üü¢
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades} üî¥
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.activeTrades.size}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  async sendExistingTradesNotification() {
    try {
      if (!this.app) return;
      
      const notificationRepository = global.cryptoScreener.notificationRepository;
      const message = this.createExistingTradesMessage();
      await notificationRepository.sendTelegramMessage(message);
      console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö (–∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  createExistingTradesMessage() {
    const trades = Array.from(this.activeTrades.values());
    const longTrades = trades.filter(t => t.type === 'Long');
    const shortTrades = trades.filter(t => t.type === 'Short');
    
    let message = `üìä –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–î–ï–õ–ö–ò (${trades.length})\n\n`;
    
    if (longTrades.length > 0) {
      message += `üü¢ LONG (${longTrades.length}):\n`;
      longTrades.forEach(trade => {
        const symbol = trade.symbol.replace('/USDT', '');
        const entryTime = new Date(trade.entryTime).toLocaleString('ru-RU');
        const lastUpdateTime = trade.lastUpdateTime ? new Date(trade.lastUpdateTime).toLocaleString('ru-RU') : '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å';
        
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        const lastPrice = trade.lastPrice || trade.entryPrice;
        const priceChange = ((lastPrice - trade.entryPrice) / trade.entryPrice) * 100;
        const changeEmoji = priceChange >= 0 ? 'üü¢' : 'üî¥';
        const changeSign = priceChange >= 0 ? '+' : '';
        
        message += `‚Ä¢ ${symbol} ${changeEmoji}\n`;
        message += `  üïê –í—Ö–æ–¥: ${entryTime}\n`;
        message += `  üí∞ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: $${trade.entryPrice.toFixed(6)}\n`;
        message += `  üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${lastPrice.toFixed(6)}\n`;
        message += `  üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeSign}${priceChange.toFixed(2)}%\n`;
        message += `  ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdateTime}\n\n`;
      });
    }
    
    if (shortTrades.length > 0) {
      message += `üî¥ SHORT (${shortTrades.length}):\n`;
      shortTrades.forEach(trade => {
        const symbol = trade.symbol.replace('/USDT', '');
        const entryTime = new Date(trade.entryTime).toLocaleString('ru-RU');
        const lastUpdateTime = trade.lastUpdateTime ? new Date(trade.lastUpdateTime).toLocaleString('ru-RU') : '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å';
        
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–¥–ª—è Short –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è)
        const lastPrice = trade.lastPrice || trade.entryPrice;
        const priceChange = ((trade.entryPrice - lastPrice) / trade.entryPrice) * 100;
        const changeEmoji = priceChange >= 0 ? 'üü¢' : 'üî¥';
        const changeSign = priceChange >= 0 ? '+' : '';
        
        message += `‚Ä¢ ${symbol} ${changeEmoji}\n`;
        message += `  üïê –í—Ö–æ–¥: ${entryTime}\n`;
        message += `  üí∞ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: $${trade.entryPrice.toFixed(6)}\n`;
        message += `  üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${lastPrice.toFixed(6)}\n`;
        message += `  üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeSign}${priceChange.toFixed(2)}%\n`;
        message += `  ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdateTime}\n\n`;
      });
    }
    
    message += `üí° –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —ç—Ç–∏ —Å–¥–µ–ª–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ WebSocket`;
    
    return message;
  }

  /**
   * –ü–æ—Ç–æ–∫ 1: –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç (5 –º–∏–Ω—É—Ç) - REST API
   */
  async runAnomalyCheck() {
    console.log('üîç [–ü–û–¢–û–ö 1] –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç...');
    
    for (const coin of this.filteredCoins) {
      await this.checkAnomalies(coin);
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log('‚úÖ [–ü–û–¢–û–ö 1] –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
   */
  async start() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å WebSocket...');
    
    await this.initialize();
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
    await this.runAnomalyCheck();
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ (–ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π) —á–µ—Ä–µ–∑ REST API
    this.anomalyCheckInterval = setInterval(async () => {
      await this.runAnomalyCheck();
    }, this.config.anomalyCheckInterval); // Anomalies - –Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞');
    console.log(`   üîç –ü–æ—Ç–æ–∫ 1 (–∞–Ω–æ–º–∞–ª–∏–∏): –∫–∞–∂–¥—ã–µ ${this.config.anomalyCheckInterval / 1000 / 60} –º–∏–Ω—É—Ç (REST API)`);
    console.log('   ‚è≥ –ü–æ—Ç–æ–∫ 2 (watchlist): WebSocket –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    console.log('   üìä –ü–æ—Ç–æ–∫ 3 (trade list): WebSocket –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
   */
  async stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
    
    if (this.anomalyCheckInterval) {
      clearInterval(this.anomalyCheckInterval);
      this.anomalyCheckInterval = null;
    }
    
    if (this.wsProvider) {
      this.wsProvider.disconnect();
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
    await this.saveTradeHistory();
    await this.savePendingAnomalies();
    await this.saveActiveTrades();
    
    if (this.app) {
      await this.app.stop();
      this.app = null;
    }
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await system.stop();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await system.stop();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
const system = new VirtualTradingSystemFull();

if (require.main === module) {
  system.start().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { VirtualTradingSystemFull }; 