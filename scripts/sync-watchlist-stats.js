const fs = require('fs').promises;
const path = require('path');
const PendingAnomaliesStatsUpdater = require('./update-pending-anomalies-stats');

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ watchlist —Å trading-statistics.json
 */
class WatchlistStatsSync {
  constructor() {
    this.pendingAnomaliesFile = path.join(__dirname, '..', 'data', 'pending-anomalies.json');
    this.tradingStatsFile = path.join(__dirname, '..', 'data', 'trading-statistics.json');
    this.statsUpdater = new PendingAnomaliesStatsUpdater();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å trading statistics
   */
  async loadTradingStats() {
    try {
      const data = await fs.readFile(this.tradingStatsFile, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ trading statistics:', error.message);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å trading statistics
   */
  async saveTradingStats(stats) {
    try {
      await fs.writeFile(this.tradingStatsFile, JSON.stringify(stats, null, 2));
      console.log('‚úÖ Trading statistics –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è trading statistics:', error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É watchlist
   */
  async getWatchlistStats() {
    try {
      return await this.statsUpdater.getCurrentStats();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ watchlist:', error.message);
      return null;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É watchlist —Å trading statistics
   */
  async syncWatchlistStats() {
    try {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ watchlist...');
      
      // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É watchlist
      const watchlistStats = await this.getWatchlistStats();
      if (!watchlistStats) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É watchlist');
        return;
      }

      // –ó–∞–≥—Ä—É–∑–∏—Ç—å trading statistics
      const tradingStats = await this.loadTradingStats();
      if (!tradingStats) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å trading statistics');
        return;
      }

      // –û–±–Ω–æ–≤–∏—Ç—å watchlist —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      tradingStats.watchlistStats = {
        sessionStartTime: watchlistStats.sessionStartTime,
        lastUpdated: watchlistStats.lastUpdated,
        totalAnomaliesProcessed: watchlistStats.totalAnomaliesProcessed,
        currentAnomaliesCount: watchlistStats.currentAnomaliesCount,
        convertedToTrades: watchlistStats.convertedToTrades,
        removedFromWatchlist: watchlistStats.removedFromWatchlist,
        averageVolumeLeverage: watchlistStats.averageVolumeLeverage,
        averageWatchlistTimeMinutes: watchlistStats.averageWatchlistTimeMinutes,
        longAnomaliesCount: watchlistStats.longAnomaliesCount,
        shortAnomaliesCount: watchlistStats.shortAnomaliesCount,
        consolidatedAnomaliesCount: watchlistStats.consolidatedAnomaliesCount,
        unconsolidatedAnomaliesCount: watchlistStats.unconsolidatedAnomaliesCount,
        topVolumeLeverages: watchlistStats.topVolumeLeverages,
        conversionRate: watchlistStats.conversionRate,
        sessionDurationMinutes: watchlistStats.sessionDurationMinutes
      };

      // –û–±–Ω–æ–≤–∏—Ç—å lastUpdated
      tradingStats.lastUpdated = new Date().toISOString();

      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ trading statistics
      await this.saveTradingStats(tradingStats);
      
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ watchlist —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return tradingStats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  async showCurrentStats() {
    try {
      const tradingStats = await this.loadTradingStats();
      if (!tradingStats) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å trading statistics');
        return;
      }

      const watchlistStats = tradingStats.watchlistStats;
      if (!watchlistStats) {
        console.log('‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ watchlist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ trading statistics');
        return;
      }

      console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WATCHLIST (–∏–∑ trading-statistics.json):\n');
      console.log(`üïê –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏: ${new Date(watchlistStats.sessionStartTime).toLocaleString('ru-RU')}`);
      console.log(`üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(watchlistStats.lastUpdated).toLocaleString('ru-RU')}`);
      console.log(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: ${watchlistStats.sessionDurationMinutes} –º–∏–Ω\n`);
      
      console.log(`üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
      console.log(`   üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${watchlistStats.totalAnomaliesProcessed}`);
      console.log(`   üìã –¢–µ–∫—É—â–∏—Ö –≤ watchlist: ${watchlistStats.currentAnomaliesCount}`);
      console.log(`   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–¥–µ–ª–∫–∏: ${watchlistStats.convertedToTrades}`);
      console.log(`   ‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ watchlist: ${watchlistStats.removedFromWatchlist}\n`);
      
      console.log(`üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:`);
      console.log(`   üü¢ Long: ${watchlistStats.longAnomaliesCount}`);
      console.log(`   üî¥ Short: ${watchlistStats.shortAnomaliesCount}`);
      console.log(`   ‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${watchlistStats.consolidatedAnomaliesCount}`);
      console.log(`   ‚è≥ –ù–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${watchlistStats.unconsolidatedAnomaliesCount}\n`);
      
      console.log(`üìà –ú–ï–¢–†–ò–ö–ò:`);
      console.log(`   üìä –°—Ä–µ–¥–Ω–∏–π leverage: ${watchlistStats.averageVolumeLeverage}x`);
      console.log(`   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ watchlist: ${watchlistStats.averageWatchlistTimeMinutes} –º–∏–Ω`);
      console.log(`   üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${watchlistStats.conversionRate}%\n`);
      
      if (watchlistStats.topVolumeLeverages && watchlistStats.topVolumeLeverages.length > 0) {
        console.log(`üèÜ –¢–û–ü LEVERAGE:`);
        watchlistStats.topVolumeLeverages.forEach((leverage, index) => {
          console.log(`   ${index + 1}. ${leverage.toFixed(1)}x`);
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
   */
  async autoSync() {
    try {
      await this.syncWatchlistStats();
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = WatchlistStatsSync;

// –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã
if (require.main === module) {
  const sync = new WatchlistStatsSync();
  
  const args = process.argv.slice(2);
  const command = args[0];
  
  switch (command) {
    case 'sync':
      sync.syncWatchlistStats();
      break;
    case 'show':
      sync.showCurrentStats();
      break;
    case 'auto':
      sync.autoSync();
      break;
    default:
      console.log('üìä –£—Ç–∏–ª–∏—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ watchlist\n');
      console.log('–ö–æ–º–∞–Ω–¥—ã:');
      console.log('  node scripts/sync-watchlist-stats.js sync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      console.log('  node scripts/sync-watchlist-stats.js show - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      console.log('  node scripts/sync-watchlist-stats.js auto - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
      break;
  }
} 