/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
 */

const fs = require('fs').promises;
const path = require('path');

async function viewStatistics() {
  try {
    const filename = path.join(__dirname, '..', 'data', 'trade-history.json');
    const data = await fs.readFile(filename, 'utf8');
    const tradeHistory = JSON.parse(data);

    if (tradeHistory.length === 0) {
      console.log('üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞');
      return;
    }

    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalTrades = tradeHistory.length;
    const winningTrades = tradeHistory.filter(t => t.profitLoss > 0).length;
    const losingTrades = tradeHistory.filter(t => t.profitLoss < 0).length;
    const winRate = (winningTrades / totalTrades * 100).toFixed(1);
    
    const totalProfit = tradeHistory.reduce((sum, t) => sum + t.profitLoss, 0);
    const avgProfit = (totalProfit / totalTrades).toFixed(2);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–¥–µ–ª–æ–∫
    const longTrades = tradeHistory.filter(t => t.type === 'Long');
    const shortTrades = tradeHistory.filter(t => t.type === 'Short');
    
    const longWinRate = longTrades.length > 0 ? 
      (longTrades.filter(t => t.profitLoss > 0).length / longTrades.length * 100).toFixed(1) : 0;
    const shortWinRate = shortTrades.length > 0 ? 
      (shortTrades.filter(t => t.profitLoss > 0).length / shortTrades.length * 100).toFixed(1) : 0;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const avgDuration = tradeHistory.reduce((sum, t) => sum + t.duration, 0) / totalTrades / 1000 / 60; // –≤ –º–∏–Ω—É—Ç–∞—Ö

    // –¢–æ–ø-5 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∏ —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    const profitableTrades = tradeHistory.filter(t => t.profitLoss > 0).sort((a, b) => b.profitLoss - a.profitLoss).slice(0, 5);
    const topLosingTrades = tradeHistory.filter(t => t.profitLoss < 0).sort((a, b) => a.profitLoss - b.profitLoss).slice(0, 5);

    console.log('\n' + '='.repeat(60));
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò');
    console.log('='.repeat(60));

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${totalTrades}`);
    console.log(`üü¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${winningTrades}`);
    console.log(`üî¥ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${losingTrades}`);
    console.log(`üìä –í–∏–Ω—Ä–µ–π—Ç: ${winRate}%`);
    console.log(`üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${totalProfit.toFixed(2)}%`);
    console.log(`üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avgProfit}%`);
    console.log(`‚è∞ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${avgDuration.toFixed(1)} –º–∏–Ω—É—Ç`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –°–î–ï–õ–û–ö:');
    console.log(`üìà Long —Å–¥–µ–ª–æ–∫: ${longTrades.length} (–≤–∏–Ω—Ä–µ–π—Ç: ${longWinRate}%)`);
    console.log(`üìâ Short —Å–¥–µ–ª–æ–∫: ${shortTrades.length} (–≤–∏–Ω—Ä–µ–π—Ç: ${shortWinRate}%)`);

    // –¢–æ–ø-5 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    if (profitableTrades.length > 0) {
      console.log('\nüèÜ –¢–û–ü-5 –ü–†–ò–ë–´–õ–¨–ù–´–• –°–î–ï–õ–û–ö:');
      profitableTrades.forEach((trade, index) => {
        console.log(`${index + 1}. ${trade.symbol.replace('/USDT', '')} ${trade.type}: +${trade.profitLoss.toFixed(2)}% (${Math.round(trade.duration / 1000 / 60)} –º–∏–Ω)`);
      });
    }

    // –¢–æ–ø-5 —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    if (topLosingTrades.length > 0) {
      console.log('\nüí∏ –¢–û–ü-5 –£–ë–´–¢–û–ß–ù–´–• –°–î–ï–õ–û–ö:');
      topLosingTrades.forEach((trade, index) => {
        console.log(`${index + 1}. ${trade.symbol.replace('/USDT', '')} ${trade.type}: ${trade.profitLoss.toFixed(2)}% (${Math.round(trade.duration / 1000 / 60)} –º–∏–Ω)`);
      });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –∑–∞–∫—Ä—ã—Ç–∏—è
    const takeProfitTrades = tradeHistory.filter(t => t.closeReason === 'take_profit');
    const stopLossTrades = tradeHistory.filter(t => t.closeReason === 'stop_loss');
    
    console.log('\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–†–ò–ß–ò–ù–ê–ú –ó–ê–ö–†–´–¢–ò–Ø:');
    console.log(`üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${takeProfitTrades.length} (${(takeProfitTrades.length / totalTrades * 100).toFixed(1)}%)`);
    console.log(`üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${stopLossTrades.length} (${(stopLossTrades.length / totalTrades * 100).toFixed(1)}%)`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const dayStats = {};
    tradeHistory.forEach(trade => {
      const day = new Date(trade.entryTime).toLocaleDateString('en-US', { weekday: 'long' });
      if (!dayStats[day]) {
        dayStats[day] = { total: 0, profitable: 0, totalProfit: 0 };
      }
      dayStats[day].total++;
      if (trade.profitLoss > 0) dayStats[day].profitable++;
      dayStats[day].totalProfit += trade.profitLoss;
    });

    console.log('\nüìÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò:');
    Object.entries(dayStats).forEach(([day, stats]) => {
      const winRate = (stats.profitable / stats.total * 100).toFixed(1);
      const avgProfit = (stats.totalProfit / stats.total).toFixed(2);
      console.log(`${day}: ${stats.total} —Å–¥–µ–ª–æ–∫, –≤–∏–Ω—Ä–µ–π—Ç ${winRate}%, —Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å ${avgProfit}%`);
    });

    console.log('\n' + '='.repeat(60));

  } catch (error) {
    if (error.code === 'ENOENT') {
      console.log('üìä –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
  }
}

if (require.main === module) {
  viewStatistics();
}

module.exports = { viewStatistics }; 