const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å WebSocket
 */
function viewWebSocketLogs() {
  console.log('üìä –ü–†–û–°–ú–û–¢–† –õ–û–ì–û–í –°–ò–°–¢–ï–ú–´ WEB SOCKET');
  console.log('=' .repeat(50));
  
  const logDir = path.join(__dirname, '../logs');
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
  if (!fs.existsSync(logDir)) {
    console.log('‚ÑπÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–∏—Å—Ç–µ–º–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å.');
    return;
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
  const files = fs.readdirSync(logDir)
    .filter(file => file.startsWith('websocket-system'))
    .sort()
    .reverse(); // –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–≤—ã–º–∏
  
  if (files.length === 0) {
    console.log('‚ÑπÔ∏è –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    return;
  }
  
  console.log('üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤:');
  files.forEach((file, index) => {
    const filePath = path.join(logDir, file);
    const stats = fs.statSync(filePath);
    const size = (stats.size / 1024).toFixed(2); // KB
    console.log(`   ${index + 1}. ${file} (${size} KB)`);
  });
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥ —Ñ–∞–π–ª–∞
  const mainLogFile = files.find(file => !file.includes('error'));
  if (mainLogFile) {
    console.log(`\nüìù –ü–û–°–õ–ï–î–ù–ò–ï –°–¢–†–û–ö–ò –ò–ó ${mainLogFile}:`);
    console.log('=' .repeat(50));
    
    const logPath = path.join(logDir, mainLogFile);
    const content = fs.readFileSync(logPath, 'utf8');
    const lines = content.split('\n').filter(line => line.trim());
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
    const lastLines = lines.slice(-20);
    lastLines.forEach(line => {
      console.log(line);
    });
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
  const errorLogFile = files.find(file => file.includes('error'));
  if (errorLogFile) {
    console.log(`\n‚ùå –ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò –ò–ó ${errorLogFile}:`);
    console.log('=' .repeat(50));
    
    const errorPath = path.join(logDir, errorLogFile);
    const errorContent = fs.readFileSync(errorPath, 'utf8');
    const errorLines = errorContent.split('\n').filter(line => line.trim());
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
    const lastErrors = errorLines.slice(-10);
    lastErrors.forEach(line => {
      console.log(line);
    });
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
  const pidFile = path.join(__dirname, '../websocket-system.pid');
  if (fs.existsSync(pidFile)) {
    const pid = fs.readFileSync(pidFile, 'utf8').trim();
    console.log(`\nüìÑ PID —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${pid}`);
    
    try {
      process.kill(pid, 0);
      console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω');
    } catch (error) {
      console.log('‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
    }
  } else {
    console.log('\nüìÑ PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
  }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
viewWebSocketLogs(); 