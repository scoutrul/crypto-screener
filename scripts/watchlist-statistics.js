const fs = require('fs').promises;
const path = require('path');

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ watchlist
 */
class WatchlistStatisticsAnalyzer {
  constructor() {
    this.pendingAnomaliesFile = path.join(__dirname, '..', 'data', 'pending-anomalies.json');
    this.tradeHistoryFile = path.join(__dirname, '..', 'data', 'trade-history.json');
    this.signalStatisticsFile = path.join(__dirname, '..', 'data', 'signal-statistics.json');
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
   */
  async loadData() {
    try {
      const pendingData = await fs.readFile(this.pendingAnomaliesFile, 'utf8');
      const parsed = JSON.parse(pendingData);
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–æ–±—ä–µ–∫—Ç —Å meta –∏ anomalies) –∏ —Å—Ç–∞—Ä–æ–π (–º–∞—Å—Å–∏–≤)
      if (Array.isArray(parsed)) {
        // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –º–∞—Å—Å–∏–≤
        this.pendingAnomalies = parsed;
      } else if (parsed.anomalies && Array.isArray(parsed.anomalies)) {
        // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –æ–±—ä–µ–∫—Ç —Å anomalies
        this.pendingAnomalies = parsed.anomalies;
      } else {
        console.log('üìä –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ pending-anomalies.json');
        this.pendingAnomalies = [];
      }
      
      try {
        const historyData = await fs.readFile(this.tradeHistoryFile, 'utf8');
        this.tradeHistory = JSON.parse(historyData);
      } catch (error) {
        this.tradeHistory = [];
      }
      
      try {
        const signalData = await fs.readFile(this.signalStatisticsFile, 'utf8');
        this.signalStatistics = JSON.parse(signalData);
      } catch (error) {
        this.signalStatistics = { totalLeads: 0, convertedToTrade: 0, averageLeadLifetimeMinutes: 0 };
      }
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.pendingAnomalies.length} –∞–Ω–æ–º–∞–ª–∏–π –≤ watchlist`);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.tradeHistory.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      this.pendingAnomalies = [];
      this.tradeHistory = [];
      this.signalStatistics = { totalLeads: 0, convertedToTrade: 0, averageLeadLifetimeMinutes: 0 };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
   */
  getPeriodStatistics(hours = 24) {
    const now = new Date();
    const periodStart = new Date(now.getTime() - (hours * 60 * 60 * 1000));
    
    // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    const periodAnomalies = this.pendingAnomalies.filter(anomaly => {
      const watchlistTime = new Date(anomaly.watchlistTime);
      return watchlistTime >= periodStart;
    });

    // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    const periodTrades = this.tradeHistory.filter(trade => {
      const tradeTime = new Date(trade.entryTime);
      return tradeTime >= periodStart;
    });

    return {
      period: `${hours}—á`,
      periodStart: periodStart.toISOString(),
      periodEnd: now.toISOString(),
      anomalies: periodAnomalies,
      trades: periodTrades
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  calculateDetailedStatistics(periodData) {
    const { anomalies, trades } = periodData;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–Ω–æ–º–∞–ª–∏–π
    const longAnomalies = anomalies.filter(a => a.tradeType === 'Long');
    const shortAnomalies = anomalies.filter(a => a.tradeType === 'Short');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä–µ–º–∞–º
    const volumeLeverages = anomalies.map(a => a.volumeLeverage).filter(v => v);
    const avgVolumeLeverage = volumeLeverages.length > 0 
      ? (volumeLeverages.reduce((sum, v) => sum + v, 0) / volumeLeverages.length).toFixed(1)
      : 0;
    
    // –í—Ä–µ–º—è –≤ watchlist
    const watchlistTimes = anomalies.map(anomaly => {
      const watchlistTime = new Date(anomaly.watchlistTime);
      const now = new Date();
      return Math.floor((now - watchlistTime) / (1000 * 60)); // –º–∏–Ω—É—Ç—ã
    });
    
    const avgWatchlistTime = watchlistTimes.length > 0
      ? Math.floor(watchlistTimes.reduce((sum, time) => sum + time, 0) / watchlistTimes.length)
      : 0;
    
    // –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Å–¥–µ–ª–∫–∏
    const convertedAnomalies = trades.filter(trade => 
      anomalies.some(anomaly => 
        anomaly.symbol === trade.symbol && 
        Math.abs(new Date(anomaly.watchlistTime) - new Date(trade.entryTime)) < 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
      )
    );
    
    const conversionRate = anomalies.length > 0 
      ? ((convertedAnomalies.length / anomalies.length) * 100).toFixed(1)
      : 0;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
    const profitableTrades = trades.filter(trade => trade.profitPercent > 0);
    const avgProfit = trades.length > 0 
      ? (trades.reduce((sum, t) => sum + (t.profitPercent || 0), 0) / trades.length).toFixed(2)
      : 0;
    
    return {
      totalAnomalies: anomalies.length,
      longAnomalies: longAnomalies.length,
      shortAnomalies: shortAnomalies.length,
      avgVolumeLeverage: parseFloat(avgVolumeLeverage),
      avgWatchlistTimeMinutes: avgWatchlistTime,
      convertedToTrades: convertedAnomalies.length,
      conversionRate: parseFloat(conversionRate),
      totalTrades: trades.length,
      profitableTrades: profitableTrades.length,
      avgProfitPercent: parseFloat(avgProfit),
      volumeLeverages: volumeLeverages,
      watchlistTimes: watchlistTimes
    };
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
   */
  createReport(periodData, detailedStats) {
    const { period, periodStart, periodEnd } = periodData;
    const startTime = new Date(periodStart).toLocaleString('ru-RU');
    const endTime = new Date(periodEnd).toLocaleString('ru-RU');
    
    let report = `üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WATCHLIST –ó–ê ${period}\n\n`;
    report += `üïê –ü–µ—Ä–∏–æ–¥: ${startTime} - ${endTime}\n\n`;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    report += `üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`;
    report += `   üìä –í—Å–µ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π: ${detailedStats.totalAnomalies}\n`;
    report += `   üü¢ Long: ${detailedStats.longAnomalies}\n`;
    report += `   üî¥ Short: ${detailedStats.shortAnomalies}\n`;
    report += `   üìà –°—Ä–µ–¥–Ω–∏–π leverage: ${detailedStats.avgVolumeLeverage}x\n`;
    report += `   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ watchlist: ${detailedStats.avgWatchlistTimeMinutes} –º–∏–Ω\n\n`;
    
    // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
    report += `üîÑ –ö–û–ù–í–ï–†–°–ò–Ø:\n`;
    report += `   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–¥–µ–ª–∫–∏: ${detailedStats.convertedToTrades}\n`;
    report += `   üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${detailedStats.conversionRate}%\n\n`;
    
    // –°–¥–µ–ª–∫–∏
    if (detailedStats.totalTrades > 0) {
      report += `üí∞ –°–î–ï–õ–ö–ò:\n`;
      report += `   üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${detailedStats.totalTrades}\n`;
      report += `   ‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${detailedStats.profitableTrades}\n`;
      report += `   üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${detailedStats.avgProfitPercent}%\n`;
      report += `   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((detailedStats.profitableTrades / detailedStats.totalTrades) * 100).toFixed(1)}%\n\n`;
    }
    
    // –¢–æ–ø –∞–Ω–æ–º–∞–ª–∏–π –ø–æ leverage
    if (detailedStats.volumeLeverages.length > 0) {
      const sortedLeverages = detailedStats.volumeLeverages.sort((a, b) => b - a);
      report += `üèÜ –¢–û–ü-5 –ü–û LEVERAGE:\n`;
      sortedLeverages.slice(0, 5).forEach((leverage, index) => {
        report += `   ${index + 1}. ${leverage.toFixed(1)}x\n`;
      });
      report += `\n`;
    }
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ watchlist
    if (detailedStats.watchlistTimes.length > 0) {
      const timeRanges = {
        '0-30 –º–∏–Ω': 0,
        '30-60 –º–∏–Ω': 0,
        '1-2 —á–∞—Å–∞': 0,
        '2+ —á–∞—Å–∞': 0
      };
      
      detailedStats.watchlistTimes.forEach(time => {
        if (time <= 30) timeRanges['0-30 –º–∏–Ω']++;
        else if (time <= 60) timeRanges['30-60 –º–∏–Ω']++;
        else if (time <= 120) timeRanges['1-2 —á–∞—Å–∞']++;
        else timeRanges['2+ —á–∞—Å–∞']++;
      });
      
      report += `‚è±Ô∏è –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –í WATCHLIST:\n`;
      Object.entries(timeRanges).forEach(([range, count]) => {
        if (count > 0) {
          const percentage = ((count / detailedStats.watchlistTimes.length) * 100).toFixed(1);
          report += `   ${range}: ${count} (${percentage}%)\n`;
        }
      });
    }
    
    return report;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
   */
  async showPeriodStatistics() {
    await this.loadData();
    
    const periods = [1, 6, 12, 24, 48, 168]; // 1—á, 6—á, 12—á, 24—á, 48—á, 168—á (–Ω–µ–¥–µ–ª—è)
    
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WATCHLIST –ü–û –ü–ï–†–ò–û–î–ê–ú:\n');
    
    for (const hours of periods) {
      const periodData = this.getPeriodStatistics(hours);
      const detailedStats = this.calculateDetailedStatistics(periodData);
      const report = this.createReport(periodData, detailedStats);
      
      console.log(report);
      console.log('‚îÄ'.repeat(80));
      console.log('');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  async showCurrentStatistics() {
    await this.loadData();
    
    const currentData = this.getPeriodStatistics(24); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const detailedStats = this.calculateDetailedStatistics(currentData);
    const report = this.createReport(currentData, detailedStats);
    
    console.log(report);
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON
   */
  async exportStatistics(hours = 24) {
    await this.loadData();
    
    const periodData = this.getPeriodStatistics(hours);
    const detailedStats = this.calculateDetailedStatistics(periodData);
    
    const exportData = {
      period: periodData,
      statistics: detailedStats,
      anomalies: periodData.anomalies,
      trades: periodData.trades,
      exportedAt: new Date().toISOString()
    };
    
    const filename = `watchlist-stats-${hours}h-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;
    await fs.writeFile(filename, JSON.stringify(exportData, null, 2));
    
    console.log(`üìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${filename}`);
    return filename;
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
if (require.main === module) {
  const analyzer = new WatchlistStatisticsAnalyzer();
  
  const args = process.argv.slice(2);
  const command = args[0];
  
  switch (command) {
    case 'current':
      analyzer.showCurrentStatistics();
      break;
    case 'periods':
      analyzer.showPeriodStatistics();
      break;
    case 'export':
      const hours = parseInt(args[1]) || 24;
      analyzer.exportStatistics(hours);
      break;
    default:
      console.log('üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ watchlist\n');
      console.log('–ö–æ–º–∞–Ω–¥—ã:');
      console.log('  node scripts/watchlist-statistics.js current    - –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (24—á)');
      console.log('  node scripts/watchlist-statistics.js periods    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º');
      console.log('  node scripts/watchlist-statistics.js export [—á–∞—Å–æ–≤] - –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      break;
  }
}

module.exports = WatchlistStatisticsAnalyzer; 