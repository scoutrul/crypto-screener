/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç, —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –Ω–∞ Binance
 */
const ccxt = require('ccxt');
const fs = require('fs').promises;
const path = require('path');

class BinanceCoinFilter {
  constructor() {
    this.exchange = new ccxt.binance({ enableRateLimit: true });
    this.availableMarkets = new Set();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—ã–Ω–∫–∏ Binance
   */
  async loadBinanceMarkets() {
    try {
      console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ Binance...');
      const markets = await this.exchange.loadMarkets();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã
      const usdtPairs = Object.keys(markets).filter(symbol => 
        symbol.endsWith('/USDT') && markets[symbol].active
      );
      
      this.availableMarkets = new Set(usdtPairs);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.availableMarkets.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö USDT –ø–∞—Ä –Ω–∞ Binance`);
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—ã–Ω–∫–æ–≤ Binance:', error.message);
      return false;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
   */
  async loadFilteredCoins() {
    try {
      const filename = path.join(__dirname, '..', 'data', 'filtered-coins.json');
      const data = await fs.readFile(filename, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç:', error.message);
      return null;
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã, —Ç–æ—Ä–≥—É—é—â–∏–µ—Å—è –Ω–∞ Binance
   */
  filterBinanceCoins(coinsData) {
    const binanceCoins = coinsData.coins.filter(coin => {
      const symbol = `${coin.symbol}/USDT`;
      return this.availableMarkets.has(symbol);
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${binanceCoins.length} –º–æ–Ω–µ—Ç –∏–∑ ${coinsData.coins.length}, —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –Ω–∞ Binance`);

    return {
      ...coinsData,
      coins: binanceCoins,
      totalCoins: binanceCoins.length,
      timestamp: new Date().toISOString()
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
   */
  async saveBinanceCoins(filteredData) {
    try {
      const filename = path.join(__dirname, '..', 'data', 'binance-coins.json');
      await fs.writeFile(filename, JSON.stringify(filteredData, null, 2));
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${filteredData.coins.length} –º–æ–Ω–µ—Ç –≤ ${filename}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  showStatistics(originalData, filteredData) {
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:');
    console.log(`- –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç: ${originalData.coins.length}`);
    console.log(`- –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ Binance: ${filteredData.coins.length}`);
    console.log(`- –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: ${((filteredData.coins.length / originalData.coins.length) * 100).toFixed(1)}%`);
    
    console.log('\nüèÜ –¢–æ–ø-10 –º–æ–Ω–µ—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ Binance):');
    filteredData.coins.slice(0, 10).forEach((coin, index) => {
      console.log(`${index + 1}. ${coin.symbol} - ${coin.name} (${coin.marketCap24h.toFixed(2)} BTC)`);
    });
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
   */
  async run() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç –¥–ª—è Binance...\n');

      // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä—ã–Ω–∫–∏ Binance
      if (!await this.loadBinanceMarkets()) {
        return;
      }

      // –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
      const originalData = await this.loadFilteredCoins();
      if (!originalData) {
        return;
      }

      // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã
      const filteredData = this.filterBinanceCoins(originalData);

      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (await this.saveBinanceCoins(filteredData)) {
        this.showStatistics(originalData, filteredData);
      }

      console.log('\n‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const filter = new BinanceCoinFilter();
  filter.run().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { BinanceCoinFilter }; 