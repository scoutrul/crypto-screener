/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance WebSocket –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 */

const { BinanceWebSocketProvider } = require('../src/infrastructure/adapters/BinanceWebSocketProvider.js');

class WebSocketTester {
  constructor() {
    this.wsProvider = new BinanceWebSocketProvider();
    this.testSymbols = ['BTCUSDT', 'ETHUSDT', 'CRVUSDT', 'AAVEUSDT', 'AXSUSDT', 'WUSDT'];
    this.receivedData = new Map();
  }

  async start() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.wsProvider.onConnect(() => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!');
      this.subscribeToTestStreams();
    });
    
    this.wsProvider.onDisconnect((code, reason) => {
      console.log(`üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: ${code} - ${reason}`);
    });
    
    this.wsProvider.onError((error) => {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
    });
    
    // –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket
    await this.wsProvider.connect();
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    this.startDataCheck();
  }

  subscribeToTestStreams() {
    console.log('üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏...');
    
    this.testSymbols.forEach(symbol => {
      console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${symbol}@kline_1m`);
      
      this.wsProvider.subscribeToKline(
        symbol,
        '1m',
        (symbol, candle) => this.handleTestKline(symbol, candle)
      );
    });
  }

  handleTestKline(symbol, candle) {
    console.log(`üìä [TEST] ${symbol} - –ù–æ–≤–∞—è —Å–≤–µ—á–∞:`);
    console.log(`   üí∞ –¶–µ–Ω–∞: $${candle.close}`);
    console.log(`   üìà –û–±—ä–µ–º: ${candle.volume}`);
    console.log(`   üïê –í—Ä–µ–º—è: ${new Date(candle.closeTime).toLocaleString()}`);
    console.log(`   ‚úÖ –ó–∞–∫—Ä—ã—Ç–∞: ${candle.isClosed}`);
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (!this.receivedData.has(symbol)) {
      this.receivedData.set(symbol, []);
    }
    this.receivedData.get(symbol).push({
      price: candle.close,
      volume: candle.volume,
      time: new Date(candle.closeTime),
      isClosed: candle.isClosed
    });
  }

  startDataCheck() {
    // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
      console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–£–ß–ï–ù–ù–´–• –î–ê–ù–ù–´–•:');
      
      this.receivedData.forEach((data, symbol) => {
        console.log(`   ${symbol}: ${data.length} —Å–≤–µ—á–µ–π`);
        if (data.length > 0) {
          const latest = data[data.length - 1];
          console.log(`     –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: $${latest.price}`);
          console.log(`     –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${latest.time.toLocaleString()}`);
        }
      });
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const status = this.wsProvider.getConnectionStatus();
      console.log(`\nüîå –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:`);
      console.log(`   –ü–æ–¥–∫–ª—é—á–µ–Ω: ${status.isConnected}`);
      console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${status.activeSubscriptions}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π pong: ${new Date(status.lastPong).toLocaleString()}`);
      
    }, 30000);
  }

  async stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞...');
    this.wsProvider.disconnect();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await tester.stop();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
const tester = new WebSocketTester();

if (require.main === module) {
  tester.start().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { WebSocketTester }; 