/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–æ—Ä–≥—É–µ–º—ã–µ –Ω–∞ Binance –ø–∞—Ä—ã
 */
const ccxt = require('ccxt');
const fs = require('fs').promises;
const path = require('path');

class BinancePairFilter {
  constructor() {
    this.exchange = new ccxt.binance({ 
      enableRateLimit: true,
      options: {
        defaultType: 'spot'
      }
    });
    this.tradingPairs = new Set();
    this.filteredCoins = [];
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
   */
  async loadAllCoins() {
    try {
      const filename = path.join(__dirname, '..', 'data', 'filtered-coins.json');
      const data = await fs.readFile(filename, 'utf8');
      const coinsData = JSON.parse(data);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${coinsData.coins.length} –º–æ–Ω–µ—Ç –∏–∑ filtered-coins.json`);
      return coinsData.coins;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç:', error.message);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä —Å Binance
   */
  async getBinanceTradingPairs() {
    try {
      console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä —Å Binance...');
      const markets = await this.exchange.loadMarkets();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã
      const usdtPairs = Object.keys(markets).filter(symbol => 
        symbol.endsWith('/USDT') && markets[symbol].active
      );
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${usdtPairs.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö USDT –ø–∞—Ä –Ω–∞ Binance`);
      return usdtPairs;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä —Å Binance:', error.message);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –Ω–∞ Binance
   */
  async checkPairAvailability(symbol) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ —Ç–æ—Ä–≥—É–µ–º—ã—Ö
      const pairSymbol = `${symbol}/USDT`;
      return this.tradingPairs.has(pairSymbol);
    } catch (error) {
      return false;
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–æ—Ä–≥—É–µ–º—ã–µ –Ω–∞ Binance
   */
  async filterTradingPairs() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –º–æ–Ω–µ—Ç...');
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –º–æ–Ω–µ—Ç—ã
    const allCoins = await this.loadAllCoins();
    if (allCoins.length === 0) {
      console.log('‚ùå –ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
      return;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä —Å Binance
    const binancePairs = await this.getBinanceTradingPairs();
    this.tradingPairs = new Set(binancePairs);

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${allCoins.length} –º–æ–Ω–µ—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ Binance...`);
    
    let availableCount = 0;
    let unavailableCount = 0;
    
    // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã
    for (const coin of allCoins) {
      const isAvailable = await this.checkPairAvailability(coin.symbol);
      
      if (isAvailable) {
        this.filteredCoins.push(coin);
        availableCount++;
        console.log(`‚úÖ ${coin.symbol}/USDT - –¥–æ—Å—Ç—É–ø–Ω–∞`);
      } else {
        unavailableCount++;
        console.log(`‚ùå ${coin.symbol}/USDT - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:`);
    console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä: ${availableCount}`);
    console.log(`‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä: ${unavailableCount}`);
    console.log(`üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${((availableCount / allCoins.length) * 100).toFixed(1)}%`);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
   */
  async saveFilteredList() {
    try {
      const dataDir = path.join(__dirname, '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });

      const filename = path.join(dataDir, 'binance-trading-pairs.json');
      
      const filteredData = {
        timestamp: new Date().toISOString(),
        totalCoins: this.filteredCoins.length,
        source: 'filtered-coins.json',
        filter: 'binance-trading-pairs',
        description: '–°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ —Ç–æ—Ä–≥—É—é—Ç—Å—è –Ω–∞ Binance',
        coins: this.filteredCoins
      };

      await fs.writeFile(filename, JSON.stringify(filteredData, null, 2));
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${this.filteredCoins.length} —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä –≤ ${filename}`);
      
      return filename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:', error.message);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
   */
  async updateMainList() {
    try {
      const dataDir = path.join(__dirname, '..', 'data');
      const filename = path.join(dataDir, 'filtered-coins.json');
      
      const updatedData = {
        timestamp: new Date().toISOString(),
        totalCoins: this.filteredCoins.length,
        params: {
          totalLimit: 600,
          minMarketCapBTC: 20,
          currency: 'btc',
          maxResults: 300,
          filter: 'binance-trading-pairs-only'
        },
        coins: this.filteredCoins
      };

      await fs.writeFile(filename, JSON.stringify(updatedData, null, 2));
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ filtered-coins.json —Å ${this.filteredCoins.length} —Ç–æ—Ä–≥—É–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–∏`);
      
      return filename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:', error.message);
      return null;
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
   */
  async run() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞ Binance...');
      
      // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
      await this.filterTradingPairs();
      
      if (this.filteredCoins.length === 0) {
        console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      await this.saveFilteredList();
      
      // –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
      await this.updateMainList();
      
      console.log('\nüéâ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log(`üìä –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ ${this.filteredCoins.length} —Ä–µ–∞–ª—å–Ω–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä`);
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const filter = new BinancePairFilter();
  filter.run().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { BinancePairFilter }; 