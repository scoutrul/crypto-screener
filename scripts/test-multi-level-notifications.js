/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ
 */

const { MultiLevelTradingService } = require('../src/domain/services/MultiLevelTradingService');
const { MultiLevelNotificationService } = require('../src/domain/services/MultiLevelNotificationService');

async function testMultiLevelNotifications() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–û–ô –¢–û–†–ì–û–í–õ–ò\n');

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  const config = {
    multiLevelEnabled: true,
    initialVolume: 1000,
    commissionPercent: 0.0003,
    level2VolumePercent: 0.2,
    level3VolumePercent: 0.4,
    level4VolumePercent: 0.4,
    level2TargetPercent: 0.0006,
    level3TargetPercent: 0.05,
    level4TargetPercent: 0.05
  };

  const multiLevelService = new MultiLevelTradingService(config);
  const notificationService = new MultiLevelNotificationService(config);

  // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É
  const trade = {
    symbol: 'BTC/USDT',
    type: 'Long',
    entryPrice: 1.0,
    anomalyId: 'test_anomaly_123',
    tradeLevels: multiLevelService.createTradeLevels(1.0, 'Long'),
    totalCommission: 0,
    netProfit: 0,
    executedLevels: 0
  };

  console.log('üìä –°–û–ó–î–ê–ù–ê –¢–ï–°–¢–û–í–ê–Ø –°–î–ï–õ–ö–ê:');
  console.log(`–°–∏–º–≤–æ–ª: ${trade.symbol}`);
  console.log(`–¢–∏–ø: ${trade.type}`);
  console.log(`–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: $${trade.entryPrice}`);
  console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π: ${trade.tradeLevels.length}\n`);

  // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
  const testPrices = [1.0, 1.0006, 1.05, 1.05];
  
  for (let i = 0; i < testPrices.length; i++) {
    const currentPrice = testPrices[i];
    console.log(`üí∞ –¢–ï–°–¢–ò–†–£–ï–ú –¶–ï–ù–£: $${currentPrice}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
    const executedLevels = multiLevelService.checkLevelExecution(trade, currentPrice);
    
    if (executedLevels && executedLevels.length > 0) {
      for (const executedLevel of executedLevels) {
        console.log(`‚úÖ –£—Ä–æ–≤–µ–Ω—å ${executedLevel.levelNumber} –≤—ã–ø–æ–ª–Ω–µ–Ω!`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await notificationService.sendLevelExecutedNotification(trade, executedLevel);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        console.log(`   üí∞ –û–±—ä—ë–º: $${executedLevel.volumeAmount.toFixed(2)}`);
        console.log(`   üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: $${executedLevel.targetPrice.toFixed(6)}`);
        console.log(`   üí∞ –¶–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $${executedLevel.executionPrice.toFixed(6)}`);
        console.log(`   üíµ –ü—Ä–∏–±—ã–ª—å: $${executedLevel.profitLoss.toFixed(2)} (${executedLevel.profitLossPercent.toFixed(2)}%)`);
        console.log(`   üí∏ –ö–æ–º–∏—Å—Å–∏—è: $${executedLevel.commission.toFixed(2)}`);
      }
    } else {
      console.log('‚è≥ –£—Ä–æ–≤–Ω–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
    }
    
    console.log('');
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–ö–ò:');
  const stats = multiLevelService.getLevelsStatistics(trade);
  console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: ${stats.executedLevels}/4`);
  console.log(`–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $${stats.totalProfit.toFixed(2)}`);
  console.log(`–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: $${stats.totalCommission.toFixed(2)}`);
  console.log(`–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $${stats.netProfit.toFixed(2)}`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏
  console.log('\nüì§ –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ó–ê–í–ï–†–®–ï–ù–ò–ò –°–î–ï–õ–ö–ò...');
  await notificationService.sendTradeCompletedNotification(trade);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('\nüìä –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:');
  const globalStats = notificationService.getGlobalStatistics();
  console.log(`–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${globalStats.totalTrades}`);
  console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: ${globalStats.totalLevelsExecuted}`);
  console.log(`–û–±—â–∏–π –æ–±—ä—ë–º: $${globalStats.totalVolume.toFixed(2)}`);
  console.log(`–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $${globalStats.totalProfit.toFixed(2)}`);
  console.log(`–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: $${globalStats.totalCommission.toFixed(2)}`);
  console.log(`–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $${globalStats.totalNetProfit.toFixed(2)}`);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  await notificationService.saveStatistics();
  console.log('\nüíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª');

  console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
}

if (require.main === module) {
  testMultiLevelNotifications().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  });
}

module.exports = { testMultiLevelNotifications }; 