/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ Binance —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
 * –ò—Å–∫–ª—é—á–∞–µ—Ç —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ —Ç–æ—Ä–≥—É–µ–º—ã–µ –ø–∞—Ä—ã
 */
const ccxt = require('ccxt');
const fs = require('fs').promises;
const path = require('path');

class BinanceOnlyFilter {
  constructor() {
    this.exchange = new ccxt.binance({
      enableRateLimit: true,
      options: { defaultType: 'spot' }
    });
    this.filteredCoins = [];
    this.binancePairs = new Set();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –º–æ–Ω–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
   */
  async loadAllCoins() {
    try {
      const filename = path.join(__dirname, '..', 'data', 'filtered-coins.json');
      const data = await fs.readFile(filename, 'utf8');
      const coinsData = JSON.parse(data);
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${coinsData.coins.length} –º–æ–Ω–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞`);
      return coinsData.coins;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–µ—Ç:', error.message);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã Binance
   */
  async getBinanceTradingPairs() {
    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance...');
      const markets = await this.exchange.loadMarkets();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã
      const usdtPairs = Object.keys(markets).filter(symbol => 
        symbol.endsWith('/USDT') && 
        markets[symbol].active && 
        markets[symbol].spot
      );
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${usdtPairs.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö USDT –ø–∞—Ä –Ω–∞ Binance`);
      
      // –ò—Å–∫–ª—é—á–∏—Ç—å —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
      const nonStablecoins = usdtPairs.filter(symbol => {
        const base = symbol.split('/')[0].toUpperCase();
        const stablecoinKeywords = [
          'USDT', 'USDC', 'BUSD', 'DAI', 'TUSD', 'FRAX', 'USDP', 'USDD', 'GUSD',
          'USDK', 'USDN', 'USDJ', 'USDK', 'USDN', 'USDJ', 'USDK', 'USDN', 'USDJ'
        ];
        
        return !stablecoinKeywords.some(keyword => base.includes(keyword));
      });
      
      console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ ${usdtPairs.length - nonStablecoins.length} —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤`);
      console.log(`‚úÖ –û—Å—Ç–∞–ª–æ—Å—å ${nonStablecoins.length} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä`);
      
      return nonStablecoins;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance:', error.message);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä—ã
   */
  async checkPairAvailability(symbol) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ç–æ—Ä–≥—É–µ—Ç—Å—è
      const ticker = await this.exchange.fetchTicker(symbol);
      return ticker && ticker.last > 0;
    } catch (error) {
      return false;
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ Binance –ø–∞—Ä—ã
   */
  async filterBinanceOnly() {
    try {
      // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –º–æ–Ω–µ—Ç—ã
      const allCoins = await this.loadAllCoins();
      if (allCoins.length === 0) {
        throw new Error('–ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
      }

      // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã Binance
      const binancePairs = await this.getBinanceTradingPairs();
      if (binancePairs.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã Binance');
      }

      // –°–æ–∑–¥–∞—Ç—å Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const binancePairsSet = new Set(binancePairs.map(pair => pair.split('/')[0]));

      // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è –Ω–∞ Binance
      const filteredCoins = allCoins.filter(coin => {
        const symbol = coin.symbol.toUpperCase();
        return binancePairsSet.has(symbol);
      });

      console.log(`üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredCoins.length} –º–æ–Ω–µ—Ç –∏–∑ ${allCoins.length} (—Ç–æ–ª—å–∫–æ Binance)`);

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä (–≤—ã–±–æ—Ä–æ—á–Ω–æ)
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä...');
      const availablePairs = [];
      const checkLimit = Math.min(50, filteredCoins.length); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 50

      for (let i = 0; i < checkLimit; i++) {
        const coin = filteredCoins[i];
        const symbol = `${coin.symbol}/USDT`;
        
        const isAvailable = await this.checkPairAvailability(symbol);
        if (isAvailable) {
          availablePairs.push(coin);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (i % 10 === 0) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }

      console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${checkLimit} –ø–∞—Ä, –¥–æ—Å—Ç—É–ø–Ω–æ: ${availablePairs.length}`);

      // –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏)
      const remainingCoins = filteredCoins.slice(checkLimit);
      this.filteredCoins = [...availablePairs, ...remainingCoins];

      console.log(`üìä –ò—Ç–æ–≥–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${this.filteredCoins.length} –º–æ–Ω–µ—Ç (Binance + –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ)`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
   */
  async saveFilteredList() {
    try {
      const dataDir = path.join(__dirname, '..', 'data');
      await fs.mkdir(dataDir, { recursive: true });
      
      const filename = path.join(dataDir, 'binance-only-coins.json');
      
      const data = {
        timestamp: new Date().toISOString(),
        totalCoins: this.filteredCoins.length,
        source: 'filtered-coins.json',
        filter: 'Binance only (exclude stablecoins)',
        coins: this.filteredCoins
      };

      await fs.writeFile(filename, JSON.stringify(data, null, 2));
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${this.filteredCoins.length} –º–æ–Ω–µ—Ç –≤ —Ñ–∞–π–ª: ${filename}`);
      
      return filename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error.message);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
   */
  async updateMainList() {
    try {
      const dataDir = path.join(__dirname, '..', 'data');
      const filename = path.join(dataDir, 'filtered-coins.json');
      
      const data = {
        timestamp: new Date().toISOString(),
        totalCoins: this.filteredCoins.length,
        source: 'Binance only filter',
        filter: 'Binance only (exclude stablecoins)',
        coins: this.filteredCoins
      };

      await fs.writeFile(filename, JSON.stringify(data, null, 2));
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫: ${filename}`);
      console.log(`üìä –¢–µ–ø–µ—Ä—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: ${this.filteredCoins.length} –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ Binance)`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:', error.message);
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
   */
  async run() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ Binance –ø–∞—Ä...');
      
      await this.filterBinanceOnly();
      
      if (this.filteredCoins.length > 0) {
        await this.saveFilteredList();
        await this.updateMainList();
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò:');
        console.log(`‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${this.filteredCoins.length} –º–æ–Ω–µ—Ç`);
        console.log(`üéØ –¢–æ–ª—å–∫–æ Binance —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã`);
        console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω—ã —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã`);
        console.log(`üìà –ì–æ—Ç–æ–≤–æ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É!`);
      } else {
        console.log('‚ùå –ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
if (require.main === module) {
  const filter = new BinanceOnlyFilter();
  filter.run().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = { BinanceOnlyFilter }; 