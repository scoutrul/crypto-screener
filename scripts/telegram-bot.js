const TelegramBot = require('node-telegram-bot-api');
const WatchlistStatusSender = require('./send-watchlist-status');
const { CryptoScreenerApp } = require('../src/app');
const messageQueue = require('./telegram-message-queue');

/**
 * Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Crypto Screener
 */
class CryptoTelegramBot {
  constructor() {
    this.bot = null;
    this.app = null;
    this.watchlistSender = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
   */
  async initialize() {
    try {
      // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ .env
      require('dotenv').config();
      const token = process.env.TELEGRAM_BOT_TOKEN;
      
      if (!token) {
        throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      }

      // –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      this.bot = new TelegramBot(token, { 
        polling: true,
        polling_options: {
          timeout: 10,
          limit: 100,
          allowed_updates: ['message']
        }
      });
      
             // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
       messageQueue.setBot(this.bot);
       
       // –î–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
       await new Promise(resolve => setTimeout(resolve, 10000));
       
       // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç –≥–æ—Ç–æ–≤
       if (!this.bot.isPolling()) {
         throw new Error('–ë–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
       }
       
       // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
       this.app = new CryptoScreenerApp();
       await this.app.start();
       
       // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å watchlist
       this.watchlistSender = new WatchlistStatusSender();
      
      console.log('ü§ñ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
      // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã
      this.setupCommands();
      
             // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
       const chatId = process.env.TELEGRAM_CHAT_ID;
       if (chatId) {
         const message = `ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n` +
                         `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
                         `üí∞ /trades - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n` +
                         `üìä /watchlist - –°—Ç–∞—Ç—É—Å watchlist\n` +
                         `üìà /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ watchlist\n` +
                         `üìä /trading - –ü–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
                         `üìã /status - –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n` +
                         `‚ùì /help - –°–ø—Ä–∞–≤–∫–∞\n\n` +
                         `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏`;
        try {
          await messageQueue.addMessage(chatId, message);
        } catch (e) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:', e.message);
        }
      } else {
        console.log('‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω, —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error.message);
      if (error.message.includes('409 Conflict')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞');
        console.log('üí° –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: taskkill /f /im node.exe');
      }
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
   */
  setupCommands() {
         // –ö–æ–º–∞–Ω–¥–∞ /start
     this.bot.onText(/\/start/, async (msg) => {
       const chatId = msg.chat.id;
       const message = `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Screener Bot!\n\n` +
                      `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
                      `üí∞ /trades - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n` +
                      `üìä /watchlist - –°—Ç–∞—Ç—É—Å watchlist\n` +
                      `üìà /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ watchlist\n` +
                      `üìä /trading - –ü–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
                      `üìã /status - –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n` +
                      `‚ùì /help - –°–ø—Ä–∞–≤–∫–∞\n\n` +
                      `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏`;
       
       await messageQueue.addMessage(chatId, message);
     });

    // –ö–æ–º–∞–Ω–¥–∞ /watchlist
    this.bot.onText(/\/watchlist/, async (msg) => {
      const chatId = msg.chat.id;
      
      try {
        await messageQueue.addMessage(chatId, 'üìã –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç—É—Å watchlist...');
        
        // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å watchlist
        const anomalies = await this.watchlistSender.loadPendingAnomalies();
        const message = this.watchlistSender.createWatchlistMessage(anomalies);
        
                 // –†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
         const messageParts = this.splitMessageForTelegram(message);
        
        for (let i = 0; i < messageParts.length; i++) {
          const part = messageParts[i];
          const partNumber = i + 1;
          const totalParts = messageParts.length;
          
          let partMessage = part;
          if (messageParts.length > 1) {
            partMessage = part.replace(
              'üìã WATCHLIST –°–¢–ê–¢–£–°:',
              `üìã WATCHLIST –°–¢–ê–¢–£–° (–ß–∞—Å—Ç—å ${partNumber}/${totalParts}):`
            );
          }
          
          await messageQueue.addMessage(chatId, partMessage, { parse_mode: 'HTML' });
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
          if (i < messageParts.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ watchlist:', error.message);
        await messageQueue.addMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ watchlist');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /trades - –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    this.bot.onText(/\/trades/, async (msg) => {
      const chatId = msg.chat.id;
      
      try {
        await messageQueue.addMessage(chatId, 'üí∞ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏...');
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        const fs = require('fs').promises;
        const path = require('path');
        
        const activeTradesFile = path.join(__dirname, '..', 'data', 'active-trades.json');
        const activeTradesData = await fs.readFile(activeTradesFile, 'utf8');
        const activeTrades = JSON.parse(activeTradesData);
        
        if (activeTrades.length === 0) {
          const message = `üí∞ –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò:\n\nüìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫`;
          await messageQueue.addMessage(chatId, message);
          return;
        }
        
        let message = `üí∞ –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò (${activeTrades.length}):\n\n`;
        
        activeTrades.forEach((trade, index) => {
          const duration = Math.round((Date.now() - new Date(trade.entryTime).getTime()) / 1000 / 60);
          const emoji = trade.type === 'Long' ? 'üü¢' : 'üî¥';
          
          // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
          const currentPrice = trade.lastPrice || trade.entryPrice;
          const priceChange = trade.type === 'Long' 
            ? ((currentPrice - trade.entryPrice) / trade.entryPrice) * 100
            : ((trade.entryPrice - currentPrice) / trade.entryPrice) * 100;
          const changeSign = priceChange >= 0 ? '+' : '';
          const changeEmoji = priceChange >= 0 ? 'üü¢' : 'üî¥';
          
          message += `${index + 1}. ${trade.symbol} ${emoji} (${trade.type})\n`;
          message += `   üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(6)}\n`;
          message += `   üìà –¢–µ–∫—É—â–∞—è: $${currentPrice.toFixed(6)} ${changeEmoji} ${changeSign}${priceChange.toFixed(2)}%\n`;
          message += `   üõë –°—Ç–æ–ø: $${trade.stopLoss.toFixed(6)}\n`;
          message += `   üéØ –¢–µ–π–∫: $${trade.takeProfit.toFixed(6)}\n`;
          message += `   ‚è±Ô∏è –í—Ä–µ–º—è: ${duration} –º–∏–Ω –Ω–∞–∑–∞–¥\n`;
          message += `   üìä –û–±—ä–µ–º: ${trade.volumeIncrease ? `${trade.volumeIncrease}x` : 'N/A'}\n\n`;
        });
        
        // –†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        const messageParts = this.splitMessageForTelegram(message);
        
        for (let i = 0; i < messageParts.length; i++) {
          const part = messageParts[i];
          const partNumber = i + 1;
          const totalParts = messageParts.length;
          
          let partMessage = part;
          if (messageParts.length > 1) {
            partMessage = part.replace(
              'üí∞ –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò:',
              `üí∞ –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò (–ß–∞—Å—Ç—å ${partNumber}/${totalParts}):`
            );
          }
          
          await messageQueue.addMessage(chatId, partMessage);
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
          if (i < messageParts.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:', error.message);
        await messageQueue.addMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /status
    this.bot.onText(/\/status/, async (msg) => {
      const chatId = msg.chat.id;
      
      try {
        await messageQueue.addMessage(chatId, 'üìä –ó–∞–≥—Ä—É–∂–∞—é –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        const message = `üìä –û–ë–©–ò–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:\n\n` +
                       `ü§ñ –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω\n` +
                       `üìã Watchlist: –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...\n` +
                       `üí∞ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏: –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...\n\n` +
                       `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /watchlist –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞`;
        
        await messageQueue.addMessage(chatId, message);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
        await messageQueue.addMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã');
      }
    });

         // –ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞
     this.bot.onText(/\/help/, async (msg) => {
       const chatId = msg.chat.id;
       
       const message = `ü§ñ Crypto Screener Bot - –°–ø—Ä–∞–≤–∫–∞\n\n` +
                       `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n` +
                       `üí∞ /trades - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n` +
                       `üìä /watchlist - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å watchlist\n` +
                       `üìà /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ watchlist –∑–∞ 24 —á–∞—Å–∞\n` +
                       `üìä /trading - –ü–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
                       `üìã /status - –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n` +
                       `‚ùì /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
                       `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /trades –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n` +
                       `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /watchlist –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–π –∞–Ω–æ–º–∞–ª–∏–∏\n` +
                       `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ watchlist\n` +
                       `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /trading –¥–ª—è –ø–æ–ª–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n` +
                       `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã`;
       
       await messageQueue.addMessage(chatId, message);
     });

         // –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ watchlist
     this.bot.onText(/\/stats/, async (msg) => {
       const chatId = msg.chat.id;
       
       try {
         await messageQueue.addMessage(chatId, 'üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É watchlist...');
         
         // –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
         const WatchlistStatisticsAnalyzer = require('./watchlist-statistics');
         const analyzer = new WatchlistStatisticsAnalyzer();
         
         // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 24 —á–∞—Å–∞
         await analyzer.loadData();
         const periodData = analyzer.getPeriodStatistics(24);
         const detailedStats = analyzer.calculateDetailedStatistics(periodData);
         const report = analyzer.createReport(periodData, detailedStats);
         
         // –†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
         const messageParts = this.splitMessageForTelegram(report);
         
         if (messageParts.length > 1) {
           for (let i = 0; i < messageParts.length; i++) {
             const part = messageParts[i];
             const partNumber = i + 1;
             const totalParts = messageParts.length;
             
             const partMessage = part.replace(
               'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WATCHLIST –ó–ê 24—á',
               `üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WATCHLIST –ó–ê 24—á (–ß–∞—Å—Ç—å ${partNumber}/${totalParts})`
             );
             
             await messageQueue.addMessage(chatId, partMessage, { parse_mode: 'HTML' });
             
             // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
             if (i < messageParts.length - 1) {
               await new Promise(resolve => setTimeout(resolve, 1000));
             }
           }
         } else {
           await messageQueue.addMessage(chatId, report, { parse_mode: 'HTML' });
         }
         
       } catch (error) {
         console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
         await messageQueue.addMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ watchlist');
       }
     });

     // –ö–æ–º–∞–Ω–¥–∞ /trading - –ø–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     this.bot.onText(/\/trading/, async (msg) => {
       const chatId = msg.chat.id;
       
       try {
         await messageQueue.addMessage(chatId, 'üìä –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
         
         // –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
         const { createSystemStatusMessage } = require('./send-system-status');
         
         // –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–∏—Å—Ç–µ–º—ã
         const message = await createSystemStatusMessage();
         
         // –†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
         const messageParts = this.splitMessageForTelegram(message);
         
         if (messageParts.length > 1) {
           for (let i = 0; i < messageParts.length; i++) {
             const part = messageParts[i];
             const partNumber = i + 1;
             const totalParts = messageParts.length;
             
             const partMessage = part.replace(
               'üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:',
               `üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ (–ß–∞—Å—Ç—å ${partNumber}/${totalParts}):`
             );
             
             await messageQueue.addMessage(chatId, partMessage);
             
             // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
             if (i < messageParts.length - 1) {
               await new Promise(resolve => setTimeout(resolve, 1000));
             }
           }
         } else {
           await messageQueue.addMessage(chatId, message);
         }
         
       } catch (error) {
         console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
         await messageQueue.addMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
       }
     });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    this.bot.on('message', async (msg) => {
      if (msg.text && !msg.text.startsWith('/')) {
        const chatId = msg.chat.id;
        await messageQueue.addMessage(chatId, '‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥');
      }
    });

    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  /**
   * –†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram
   */
  splitMessageForTelegram(message, maxLength = 4000) {
    const parts = [];
    let currentPart = '';
    
    const lines = message.split('\n');
    
    for (const line of lines) {
      // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
      if (currentPart.length + line.length + 1 > maxLength) {
        if (currentPart.trim()) {
          parts.push(currentPart.trim());
        }
        currentPart = line;
      } else {
        currentPart += (currentPart ? '\n' : '') + line;
      }
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if (currentPart.trim()) {
      parts.push(currentPart.trim());
    }
    
    return parts;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
   */
  async start() {
    try {
      await this.initialize();
      console.log('üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
   */
  async stop() {
    if (this.bot) {
      this.bot.stopPolling();
      console.log('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if (require.main === module) {
  const bot = new CryptoTelegramBot();
  bot.start();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    await bot.stop();
    process.exit(0);
  });
  
  process.on('SIGTERM', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    await bot.stop();
    process.exit(0);
  });
}

module.exports = CryptoTelegramBot; 