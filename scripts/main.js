const { spawn } = require('child_process');
const path = require('path');

/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
 */
class MainSystem {
  constructor() {
    this.processes = [];
    this.isShuttingDown = false;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
   */
  spawnProcess(command, name, args = []) {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ ${name}...`);
    
    const process = spawn('npm', ['run', command, ...args], {
      stdio: 'inherit',
      shell: true,
      cwd: path.join(__dirname, '..')
    });

    process.on('error', (error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${name}:`, error.message);
    });

    process.on('exit', (code) => {
      if (!this.isShuttingDown) {
        console.log(`‚ö†Ô∏è ${name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
      }
    });

    this.processes.push({ process, name });
    return process;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
   */
  async stopAllProcesses() {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
    this.isShuttingDown = true;

    for (const { process, name } of this.processes) {
      try {
        console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${name}...`);
        process.kill('SIGTERM');
        
        // –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        await new Promise((resolve) => {
          const timeout = setTimeout(() => {
            console.log(`‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ${name}`);
            process.kill('SIGKILL');
            resolve();
          }, 5000);

          process.on('exit', () => {
            clearTimeout(timeout);
            resolve();
          });
        });
        
        console.log(`‚úÖ ${name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ${name}:`, error.message);
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É
   */
  async start() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ Crypto Screener Main System...');
      console.log('üìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:');
      console.log('   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (monitor:virtual)');
      console.log('   ‚Ä¢ Telegram –±–æ—Ç (bot:start)');
      console.log('');

      // –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–æ—Ä–≥–æ–≤–ª–∏
      const tradingSystem = this.spawnProcess('monitor:virtual', 'Trading System');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞
      const telegramBot = this.spawnProcess('bot:start', 'Telegram Bot');

      console.log('\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!');
      console.log('üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
      console.log('ü§ñ Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
      console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
      console.log('');

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      process.on('SIGINT', async () => {
        console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
        await this.stopAllProcesses();
        process.exit(0);
      });

      process.on('SIGTERM', async () => {
        console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
        await this.stopAllProcesses();
        process.exit(0);
      });

      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
      setInterval(() => {
        for (const { process, name } of this.processes) {
          if (process.exitCode !== null && !this.isShuttingDown) {
            console.log(`‚ö†Ô∏è ${name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ`);
          }
        }
      }, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error.message);
      await this.stopAllProcesses();
      process.exit(1);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   */
  showStatus() {
    console.log('\nüìä –°–¢–ê–¢–£–° –ü–†–û–¶–ï–°–°–û–í:');
    for (const { process, name } of this.processes) {
      const status = process.exitCode === null ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      console.log(`   ${name}: ${status}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
if (require.main === module) {
  const mainSystem = new MainSystem();
  mainSystem.start();
}

module.exports = MainSystem; 